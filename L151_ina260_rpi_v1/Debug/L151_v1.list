
L151_v1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000041ac  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  080042e8  080042e8  000142e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004310  08004310  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08004310  08004310  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004310  08004310  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004310  08004310  00014310  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004314  08004314  00014314  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08004318  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d0  20000078  08004390  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000148  08004390  00020148  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b449  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001cc1  00000000  00000000  0002b4ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ab0  00000000  00000000  0002d1b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000009e8  00000000  00000000  0002dc60  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000146f7  00000000  00000000  0002e648  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000089fa  00000000  00000000  00042d3f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007d39a  00000000  00000000  0004b739  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c8ad3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d64  00000000  00000000  000c8b50  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000078 	.word	0x20000078
 8000158:	00000000 	.word	0x00000000
 800015c:	080042d0 	.word	0x080042d0

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	2000007c 	.word	0x2000007c
 8000178:	080042d0 	.word	0x080042d0

0800017c <__aeabi_frsub>:
 800017c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000180:	e002      	b.n	8000188 <__addsf3>
 8000182:	bf00      	nop

08000184 <__aeabi_fsub>:
 8000184:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000188 <__addsf3>:
 8000188:	0042      	lsls	r2, r0, #1
 800018a:	bf1f      	itttt	ne
 800018c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000190:	ea92 0f03 	teqne	r2, r3
 8000194:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000198:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800019c:	d06a      	beq.n	8000274 <__addsf3+0xec>
 800019e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80001a2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80001a6:	bfc1      	itttt	gt
 80001a8:	18d2      	addgt	r2, r2, r3
 80001aa:	4041      	eorgt	r1, r0
 80001ac:	4048      	eorgt	r0, r1
 80001ae:	4041      	eorgt	r1, r0
 80001b0:	bfb8      	it	lt
 80001b2:	425b      	neglt	r3, r3
 80001b4:	2b19      	cmp	r3, #25
 80001b6:	bf88      	it	hi
 80001b8:	4770      	bxhi	lr
 80001ba:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80001be:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001c2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80001c6:	bf18      	it	ne
 80001c8:	4240      	negne	r0, r0
 80001ca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001ce:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001d2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001d6:	bf18      	it	ne
 80001d8:	4249      	negne	r1, r1
 80001da:	ea92 0f03 	teq	r2, r3
 80001de:	d03f      	beq.n	8000260 <__addsf3+0xd8>
 80001e0:	f1a2 0201 	sub.w	r2, r2, #1
 80001e4:	fa41 fc03 	asr.w	ip, r1, r3
 80001e8:	eb10 000c 	adds.w	r0, r0, ip
 80001ec:	f1c3 0320 	rsb	r3, r3, #32
 80001f0:	fa01 f103 	lsl.w	r1, r1, r3
 80001f4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001f8:	d502      	bpl.n	8000200 <__addsf3+0x78>
 80001fa:	4249      	negs	r1, r1
 80001fc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000200:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000204:	d313      	bcc.n	800022e <__addsf3+0xa6>
 8000206:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800020a:	d306      	bcc.n	800021a <__addsf3+0x92>
 800020c:	0840      	lsrs	r0, r0, #1
 800020e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000212:	f102 0201 	add.w	r2, r2, #1
 8000216:	2afe      	cmp	r2, #254	; 0xfe
 8000218:	d251      	bcs.n	80002be <__addsf3+0x136>
 800021a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800021e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000222:	bf08      	it	eq
 8000224:	f020 0001 	biceq.w	r0, r0, #1
 8000228:	ea40 0003 	orr.w	r0, r0, r3
 800022c:	4770      	bx	lr
 800022e:	0049      	lsls	r1, r1, #1
 8000230:	eb40 0000 	adc.w	r0, r0, r0
 8000234:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000238:	f1a2 0201 	sub.w	r2, r2, #1
 800023c:	d1ed      	bne.n	800021a <__addsf3+0x92>
 800023e:	fab0 fc80 	clz	ip, r0
 8000242:	f1ac 0c08 	sub.w	ip, ip, #8
 8000246:	ebb2 020c 	subs.w	r2, r2, ip
 800024a:	fa00 f00c 	lsl.w	r0, r0, ip
 800024e:	bfaa      	itet	ge
 8000250:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000254:	4252      	neglt	r2, r2
 8000256:	4318      	orrge	r0, r3
 8000258:	bfbc      	itt	lt
 800025a:	40d0      	lsrlt	r0, r2
 800025c:	4318      	orrlt	r0, r3
 800025e:	4770      	bx	lr
 8000260:	f092 0f00 	teq	r2, #0
 8000264:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000268:	bf06      	itte	eq
 800026a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800026e:	3201      	addeq	r2, #1
 8000270:	3b01      	subne	r3, #1
 8000272:	e7b5      	b.n	80001e0 <__addsf3+0x58>
 8000274:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000278:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800027c:	bf18      	it	ne
 800027e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000282:	d021      	beq.n	80002c8 <__addsf3+0x140>
 8000284:	ea92 0f03 	teq	r2, r3
 8000288:	d004      	beq.n	8000294 <__addsf3+0x10c>
 800028a:	f092 0f00 	teq	r2, #0
 800028e:	bf08      	it	eq
 8000290:	4608      	moveq	r0, r1
 8000292:	4770      	bx	lr
 8000294:	ea90 0f01 	teq	r0, r1
 8000298:	bf1c      	itt	ne
 800029a:	2000      	movne	r0, #0
 800029c:	4770      	bxne	lr
 800029e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80002a2:	d104      	bne.n	80002ae <__addsf3+0x126>
 80002a4:	0040      	lsls	r0, r0, #1
 80002a6:	bf28      	it	cs
 80002a8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80002ac:	4770      	bx	lr
 80002ae:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80002b2:	bf3c      	itt	cc
 80002b4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80002b8:	4770      	bxcc	lr
 80002ba:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80002be:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80002c2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002c6:	4770      	bx	lr
 80002c8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002cc:	bf16      	itet	ne
 80002ce:	4608      	movne	r0, r1
 80002d0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002d4:	4601      	movne	r1, r0
 80002d6:	0242      	lsls	r2, r0, #9
 80002d8:	bf06      	itte	eq
 80002da:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002de:	ea90 0f01 	teqeq	r0, r1
 80002e2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002e6:	4770      	bx	lr

080002e8 <__aeabi_ui2f>:
 80002e8:	f04f 0300 	mov.w	r3, #0
 80002ec:	e004      	b.n	80002f8 <__aeabi_i2f+0x8>
 80002ee:	bf00      	nop

080002f0 <__aeabi_i2f>:
 80002f0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002f4:	bf48      	it	mi
 80002f6:	4240      	negmi	r0, r0
 80002f8:	ea5f 0c00 	movs.w	ip, r0
 80002fc:	bf08      	it	eq
 80002fe:	4770      	bxeq	lr
 8000300:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000304:	4601      	mov	r1, r0
 8000306:	f04f 0000 	mov.w	r0, #0
 800030a:	e01c      	b.n	8000346 <__aeabi_l2f+0x2a>

0800030c <__aeabi_ul2f>:
 800030c:	ea50 0201 	orrs.w	r2, r0, r1
 8000310:	bf08      	it	eq
 8000312:	4770      	bxeq	lr
 8000314:	f04f 0300 	mov.w	r3, #0
 8000318:	e00a      	b.n	8000330 <__aeabi_l2f+0x14>
 800031a:	bf00      	nop

0800031c <__aeabi_l2f>:
 800031c:	ea50 0201 	orrs.w	r2, r0, r1
 8000320:	bf08      	it	eq
 8000322:	4770      	bxeq	lr
 8000324:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000328:	d502      	bpl.n	8000330 <__aeabi_l2f+0x14>
 800032a:	4240      	negs	r0, r0
 800032c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000330:	ea5f 0c01 	movs.w	ip, r1
 8000334:	bf02      	ittt	eq
 8000336:	4684      	moveq	ip, r0
 8000338:	4601      	moveq	r1, r0
 800033a:	2000      	moveq	r0, #0
 800033c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000340:	bf08      	it	eq
 8000342:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000346:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800034a:	fabc f28c 	clz	r2, ip
 800034e:	3a08      	subs	r2, #8
 8000350:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000354:	db10      	blt.n	8000378 <__aeabi_l2f+0x5c>
 8000356:	fa01 fc02 	lsl.w	ip, r1, r2
 800035a:	4463      	add	r3, ip
 800035c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000360:	f1c2 0220 	rsb	r2, r2, #32
 8000364:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000368:	fa20 f202 	lsr.w	r2, r0, r2
 800036c:	eb43 0002 	adc.w	r0, r3, r2
 8000370:	bf08      	it	eq
 8000372:	f020 0001 	biceq.w	r0, r0, #1
 8000376:	4770      	bx	lr
 8000378:	f102 0220 	add.w	r2, r2, #32
 800037c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000380:	f1c2 0220 	rsb	r2, r2, #32
 8000384:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000388:	fa21 f202 	lsr.w	r2, r1, r2
 800038c:	eb43 0002 	adc.w	r0, r3, r2
 8000390:	bf08      	it	eq
 8000392:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000396:	4770      	bx	lr

08000398 <__aeabi_fmul>:
 8000398:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800039c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80003a0:	bf1e      	ittt	ne
 80003a2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80003a6:	ea92 0f0c 	teqne	r2, ip
 80003aa:	ea93 0f0c 	teqne	r3, ip
 80003ae:	d06f      	beq.n	8000490 <__aeabi_fmul+0xf8>
 80003b0:	441a      	add	r2, r3
 80003b2:	ea80 0c01 	eor.w	ip, r0, r1
 80003b6:	0240      	lsls	r0, r0, #9
 80003b8:	bf18      	it	ne
 80003ba:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80003be:	d01e      	beq.n	80003fe <__aeabi_fmul+0x66>
 80003c0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80003c4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80003c8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003cc:	fba0 3101 	umull	r3, r1, r0, r1
 80003d0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003d4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003d8:	bf3e      	ittt	cc
 80003da:	0049      	lslcc	r1, r1, #1
 80003dc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003e0:	005b      	lslcc	r3, r3, #1
 80003e2:	ea40 0001 	orr.w	r0, r0, r1
 80003e6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003ea:	2afd      	cmp	r2, #253	; 0xfd
 80003ec:	d81d      	bhi.n	800042a <__aeabi_fmul+0x92>
 80003ee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003f2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003f6:	bf08      	it	eq
 80003f8:	f020 0001 	biceq.w	r0, r0, #1
 80003fc:	4770      	bx	lr
 80003fe:	f090 0f00 	teq	r0, #0
 8000402:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000406:	bf08      	it	eq
 8000408:	0249      	lsleq	r1, r1, #9
 800040a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800040e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000412:	3a7f      	subs	r2, #127	; 0x7f
 8000414:	bfc2      	ittt	gt
 8000416:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800041a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800041e:	4770      	bxgt	lr
 8000420:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000424:	f04f 0300 	mov.w	r3, #0
 8000428:	3a01      	subs	r2, #1
 800042a:	dc5d      	bgt.n	80004e8 <__aeabi_fmul+0x150>
 800042c:	f112 0f19 	cmn.w	r2, #25
 8000430:	bfdc      	itt	le
 8000432:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000436:	4770      	bxle	lr
 8000438:	f1c2 0200 	rsb	r2, r2, #0
 800043c:	0041      	lsls	r1, r0, #1
 800043e:	fa21 f102 	lsr.w	r1, r1, r2
 8000442:	f1c2 0220 	rsb	r2, r2, #32
 8000446:	fa00 fc02 	lsl.w	ip, r0, r2
 800044a:	ea5f 0031 	movs.w	r0, r1, rrx
 800044e:	f140 0000 	adc.w	r0, r0, #0
 8000452:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000456:	bf08      	it	eq
 8000458:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800045c:	4770      	bx	lr
 800045e:	f092 0f00 	teq	r2, #0
 8000462:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000466:	bf02      	ittt	eq
 8000468:	0040      	lsleq	r0, r0, #1
 800046a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800046e:	3a01      	subeq	r2, #1
 8000470:	d0f9      	beq.n	8000466 <__aeabi_fmul+0xce>
 8000472:	ea40 000c 	orr.w	r0, r0, ip
 8000476:	f093 0f00 	teq	r3, #0
 800047a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800047e:	bf02      	ittt	eq
 8000480:	0049      	lsleq	r1, r1, #1
 8000482:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000486:	3b01      	subeq	r3, #1
 8000488:	d0f9      	beq.n	800047e <__aeabi_fmul+0xe6>
 800048a:	ea41 010c 	orr.w	r1, r1, ip
 800048e:	e78f      	b.n	80003b0 <__aeabi_fmul+0x18>
 8000490:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000494:	ea92 0f0c 	teq	r2, ip
 8000498:	bf18      	it	ne
 800049a:	ea93 0f0c 	teqne	r3, ip
 800049e:	d00a      	beq.n	80004b6 <__aeabi_fmul+0x11e>
 80004a0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80004a4:	bf18      	it	ne
 80004a6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80004aa:	d1d8      	bne.n	800045e <__aeabi_fmul+0xc6>
 80004ac:	ea80 0001 	eor.w	r0, r0, r1
 80004b0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004b4:	4770      	bx	lr
 80004b6:	f090 0f00 	teq	r0, #0
 80004ba:	bf17      	itett	ne
 80004bc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80004c0:	4608      	moveq	r0, r1
 80004c2:	f091 0f00 	teqne	r1, #0
 80004c6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80004ca:	d014      	beq.n	80004f6 <__aeabi_fmul+0x15e>
 80004cc:	ea92 0f0c 	teq	r2, ip
 80004d0:	d101      	bne.n	80004d6 <__aeabi_fmul+0x13e>
 80004d2:	0242      	lsls	r2, r0, #9
 80004d4:	d10f      	bne.n	80004f6 <__aeabi_fmul+0x15e>
 80004d6:	ea93 0f0c 	teq	r3, ip
 80004da:	d103      	bne.n	80004e4 <__aeabi_fmul+0x14c>
 80004dc:	024b      	lsls	r3, r1, #9
 80004de:	bf18      	it	ne
 80004e0:	4608      	movne	r0, r1
 80004e2:	d108      	bne.n	80004f6 <__aeabi_fmul+0x15e>
 80004e4:	ea80 0001 	eor.w	r0, r0, r1
 80004e8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004ec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004f0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004f4:	4770      	bx	lr
 80004f6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004fa:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004fe:	4770      	bx	lr

08000500 <__aeabi_fdiv>:
 8000500:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000504:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000508:	bf1e      	ittt	ne
 800050a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800050e:	ea92 0f0c 	teqne	r2, ip
 8000512:	ea93 0f0c 	teqne	r3, ip
 8000516:	d069      	beq.n	80005ec <__aeabi_fdiv+0xec>
 8000518:	eba2 0203 	sub.w	r2, r2, r3
 800051c:	ea80 0c01 	eor.w	ip, r0, r1
 8000520:	0249      	lsls	r1, r1, #9
 8000522:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000526:	d037      	beq.n	8000598 <__aeabi_fdiv+0x98>
 8000528:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800052c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000530:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000534:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000538:	428b      	cmp	r3, r1
 800053a:	bf38      	it	cc
 800053c:	005b      	lslcc	r3, r3, #1
 800053e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000542:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000546:	428b      	cmp	r3, r1
 8000548:	bf24      	itt	cs
 800054a:	1a5b      	subcs	r3, r3, r1
 800054c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000550:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000554:	bf24      	itt	cs
 8000556:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800055a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800055e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000562:	bf24      	itt	cs
 8000564:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000568:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800056c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000570:	bf24      	itt	cs
 8000572:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000576:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800057a:	011b      	lsls	r3, r3, #4
 800057c:	bf18      	it	ne
 800057e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000582:	d1e0      	bne.n	8000546 <__aeabi_fdiv+0x46>
 8000584:	2afd      	cmp	r2, #253	; 0xfd
 8000586:	f63f af50 	bhi.w	800042a <__aeabi_fmul+0x92>
 800058a:	428b      	cmp	r3, r1
 800058c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000590:	bf08      	it	eq
 8000592:	f020 0001 	biceq.w	r0, r0, #1
 8000596:	4770      	bx	lr
 8000598:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800059c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80005a0:	327f      	adds	r2, #127	; 0x7f
 80005a2:	bfc2      	ittt	gt
 80005a4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80005a8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80005ac:	4770      	bxgt	lr
 80005ae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80005b2:	f04f 0300 	mov.w	r3, #0
 80005b6:	3a01      	subs	r2, #1
 80005b8:	e737      	b.n	800042a <__aeabi_fmul+0x92>
 80005ba:	f092 0f00 	teq	r2, #0
 80005be:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80005c2:	bf02      	ittt	eq
 80005c4:	0040      	lsleq	r0, r0, #1
 80005c6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80005ca:	3a01      	subeq	r2, #1
 80005cc:	d0f9      	beq.n	80005c2 <__aeabi_fdiv+0xc2>
 80005ce:	ea40 000c 	orr.w	r0, r0, ip
 80005d2:	f093 0f00 	teq	r3, #0
 80005d6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005da:	bf02      	ittt	eq
 80005dc:	0049      	lsleq	r1, r1, #1
 80005de:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005e2:	3b01      	subeq	r3, #1
 80005e4:	d0f9      	beq.n	80005da <__aeabi_fdiv+0xda>
 80005e6:	ea41 010c 	orr.w	r1, r1, ip
 80005ea:	e795      	b.n	8000518 <__aeabi_fdiv+0x18>
 80005ec:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005f0:	ea92 0f0c 	teq	r2, ip
 80005f4:	d108      	bne.n	8000608 <__aeabi_fdiv+0x108>
 80005f6:	0242      	lsls	r2, r0, #9
 80005f8:	f47f af7d 	bne.w	80004f6 <__aeabi_fmul+0x15e>
 80005fc:	ea93 0f0c 	teq	r3, ip
 8000600:	f47f af70 	bne.w	80004e4 <__aeabi_fmul+0x14c>
 8000604:	4608      	mov	r0, r1
 8000606:	e776      	b.n	80004f6 <__aeabi_fmul+0x15e>
 8000608:	ea93 0f0c 	teq	r3, ip
 800060c:	d104      	bne.n	8000618 <__aeabi_fdiv+0x118>
 800060e:	024b      	lsls	r3, r1, #9
 8000610:	f43f af4c 	beq.w	80004ac <__aeabi_fmul+0x114>
 8000614:	4608      	mov	r0, r1
 8000616:	e76e      	b.n	80004f6 <__aeabi_fmul+0x15e>
 8000618:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800061c:	bf18      	it	ne
 800061e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000622:	d1ca      	bne.n	80005ba <__aeabi_fdiv+0xba>
 8000624:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000628:	f47f af5c 	bne.w	80004e4 <__aeabi_fmul+0x14c>
 800062c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000630:	f47f af3c 	bne.w	80004ac <__aeabi_fmul+0x114>
 8000634:	e75f      	b.n	80004f6 <__aeabi_fmul+0x15e>
 8000636:	bf00      	nop

08000638 <ina260_new>:
  * @param    i2c_hal - pointer to configured HAL I2C device handle
  *
  * @return   pointer to newly allocated ina260_t struct
  */
ina260_t *ina260_new(I2C_HandleTypeDef *i2c_hal, uint8_t i2c_slave_addr)
{
 8000638:	b590      	push	{r4, r7, lr}
 800063a:	b087      	sub	sp, #28
 800063c:	af02      	add	r7, sp, #8
 800063e:	6078      	str	r0, [r7, #4]
 8000640:	460b      	mov	r3, r1
 8000642:	70fb      	strb	r3, [r7, #3]
  ina260_t *pow = NULL;
 8000644:	2300      	movs	r3, #0
 8000646:	60fb      	str	r3, [r7, #12]

  if ((NULL != i2c_hal) && (i2c_slave_addr < 0x80)/* 7-bit */) {
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	2b00      	cmp	r3, #0
 800064c:	d025      	beq.n	800069a <ina260_new+0x62>
 800064e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000652:	2b00      	cmp	r3, #0
 8000654:	db21      	blt.n	800069a <ina260_new+0x62>

    if (NULL != (pow = malloc(sizeof(ina260_t)))) {
 8000656:	200c      	movs	r0, #12
 8000658:	f003 fd6a 	bl	8004130 <malloc>
 800065c:	4603      	mov	r3, r0
 800065e:	60fb      	str	r3, [r7, #12]
 8000660:	68fb      	ldr	r3, [r7, #12]
 8000662:	2b00      	cmp	r3, #0
 8000664:	d019      	beq.n	800069a <ina260_new+0x62>

      pow->i2c_hal        = i2c_hal;
 8000666:	68fb      	ldr	r3, [r7, #12]
 8000668:	687a      	ldr	r2, [r7, #4]
 800066a:	601a      	str	r2, [r3, #0]
      pow->i2c_slave_addr = i2c_slave_addr;
 800066c:	68fb      	ldr	r3, [r7, #12]
 800066e:	78fa      	ldrb	r2, [r7, #3]
 8000670:	711a      	strb	r2, [r3, #4]

      if (HAL_OK != ina260_set_config(pow,
 8000672:	2103      	movs	r1, #3
 8000674:	2001      	movs	r0, #1
 8000676:	2404      	movs	r4, #4
 8000678:	2304      	movs	r3, #4
 800067a:	2200      	movs	r2, #0
 800067c:	9201      	str	r2, [sp, #4]
 800067e:	9300      	str	r3, [sp, #0]
 8000680:	4623      	mov	r3, r4
 8000682:	4602      	mov	r2, r0
 8000684:	68f8      	ldr	r0, [r7, #12]
 8000686:	f000 f866 	bl	8000756 <ina260_set_config>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d004      	beq.n	800069a <ina260_new+0x62>
          DEFAULT_OPERATING_TYPE, DEFAULT_OPERATING_MODE,
          DEFAULT_CURRENT_CTIME, DEFAULT_VOLTAGE_CTIME, DEFAULT_SAMPLE_SIZE)) {
        free(pow);
 8000690:	68f8      	ldr	r0, [r7, #12]
 8000692:	f003 fd55 	bl	8004140 <free>
        pow = NULL;
 8000696:	2300      	movs	r3, #0
 8000698:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  return pow;
 800069a:	68fb      	ldr	r3, [r7, #12]
}
 800069c:	4618      	mov	r0, r3
 800069e:	3714      	adds	r7, #20
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd90      	pop	{r4, r7, pc}

080006a4 <ina260_ready>:
  *             HAL_TIMEOUT - I2C communication timeout. see timeout constant
  *                           INA260_I2C_READ_TIMEOUT_MS in ina260.c
  *
  */
ina260_status_t ina260_ready(ina260_t *pow)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b084      	sub	sp, #16
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
  ina260_status_t status;
  ina260_identification_t id;

  if (NULL == pow)
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d101      	bne.n	80006b6 <ina260_ready+0x12>
    { return HAL_ERROR; }
 80006b2:	2301      	movs	r3, #1
 80006b4:	e023      	b.n	80006fe <ina260_ready+0x5a>

  status = ina260_i2c_read(pow, INA260_REG_DEV_ID, &(id.u16), 2U);
 80006b6:	21ff      	movs	r1, #255	; 0xff
 80006b8:	f107 020c 	add.w	r2, r7, #12
 80006bc:	2302      	movs	r3, #2
 80006be:	6878      	ldr	r0, [r7, #4]
 80006c0:	f000 f8cc 	bl	800085c <ina260_i2c_read>
 80006c4:	4603      	mov	r3, r0
 80006c6:	73fb      	strb	r3, [r7, #15]
  if (HAL_OK != status)
 80006c8:	7bfb      	ldrb	r3, [r7, #15]
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <ina260_ready+0x2e>
    { return status; }
 80006ce:	7bfb      	ldrb	r3, [r7, #15]
 80006d0:	e015      	b.n	80006fe <ina260_ready+0x5a>

  // INA260 returns MSB first
  id.u16 = __LEu16(&(id.u16));
 80006d2:	f107 030c 	add.w	r3, r7, #12
 80006d6:	3301      	adds	r3, #1
 80006d8:	781b      	ldrb	r3, [r3, #0]
 80006da:	b21a      	sxth	r2, r3
 80006dc:	f107 030c 	add.w	r3, r7, #12
 80006e0:	781b      	ldrb	r3, [r3, #0]
 80006e2:	021b      	lsls	r3, r3, #8
 80006e4:	b21b      	sxth	r3, r3
 80006e6:	4313      	orrs	r3, r2
 80006e8:	b21b      	sxth	r3, r3
 80006ea:	b29b      	uxth	r3, r3
 80006ec:	81bb      	strh	r3, [r7, #12]

  if (INA260_DEVICE_ID.u16 != id.u16)
 80006ee:	4b06      	ldr	r3, [pc, #24]	; (8000708 <ina260_ready+0x64>)
 80006f0:	881a      	ldrh	r2, [r3, #0]
 80006f2:	89bb      	ldrh	r3, [r7, #12]
 80006f4:	429a      	cmp	r2, r3
 80006f6:	d001      	beq.n	80006fc <ina260_ready+0x58>
    { return HAL_ERROR; }
 80006f8:	2301      	movs	r3, #1
 80006fa:	e000      	b.n	80006fe <ina260_ready+0x5a>

  return HAL_OK;
 80006fc:	2300      	movs	r3, #0
}
 80006fe:	4618      	mov	r0, r3
 8000700:	3710      	adds	r7, #16
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	080042e8 	.word	0x080042e8

0800070c <ina260_wait_until_ready>:
  *             HAL_BUSY    - I2C bus busy
  *             HAL_TIMEOUT - I2C communication timeout or failed to obtain the
  *                           expected device ID within given timeout period.
  */
ina260_status_t ina260_wait_until_ready(ina260_t *pow, uint32_t timeout)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b084      	sub	sp, #16
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
 8000714:	6039      	str	r1, [r7, #0]
  uint32_t start = HAL_GetTick();
 8000716:	f000 fe3b 	bl	8001390 <HAL_GetTick>
 800071a:	60f8      	str	r0, [r7, #12]

  while (HAL_OK != ina260_ready(pow)) {
 800071c:	e010      	b.n	8000740 <ina260_wait_until_ready+0x34>
    if (HAL_MAX_DELAY != timeout) {
 800071e:	683b      	ldr	r3, [r7, #0]
 8000720:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000724:	d00c      	beq.n	8000740 <ina260_wait_until_ready+0x34>
      if (((HAL_GetTick() - start) > timeout) || (0U == timeout)) {
 8000726:	f000 fe33 	bl	8001390 <HAL_GetTick>
 800072a:	4602      	mov	r2, r0
 800072c:	68fb      	ldr	r3, [r7, #12]
 800072e:	1ad3      	subs	r3, r2, r3
 8000730:	683a      	ldr	r2, [r7, #0]
 8000732:	429a      	cmp	r2, r3
 8000734:	d302      	bcc.n	800073c <ina260_wait_until_ready+0x30>
 8000736:	683b      	ldr	r3, [r7, #0]
 8000738:	2b00      	cmp	r3, #0
 800073a:	d101      	bne.n	8000740 <ina260_wait_until_ready+0x34>
        return HAL_TIMEOUT;
 800073c:	2303      	movs	r3, #3
 800073e:	e006      	b.n	800074e <ina260_wait_until_ready+0x42>
  while (HAL_OK != ina260_ready(pow)) {
 8000740:	6878      	ldr	r0, [r7, #4]
 8000742:	f7ff ffaf 	bl	80006a4 <ina260_ready>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d1e8      	bne.n	800071e <ina260_wait_until_ready+0x12>
      }
    }
  }
  return HAL_OK;
 800074c:	2300      	movs	r3, #0
}
 800074e:	4618      	mov	r0, r3
 8000750:	3710      	adds	r7, #16
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}

08000756 <ina260_set_config>:
    ina260_operating_type_t  operating_type,
    ina260_operating_mode_t  operating_mode,
    ina260_conversion_time_t current_ctime,
    ina260_conversion_time_t voltage_ctime,
    ina260_sample_size_t     sample_size)
{
 8000756:	b580      	push	{r7, lr}
 8000758:	b082      	sub	sp, #8
 800075a:	af00      	add	r7, sp, #0
 800075c:	6078      	str	r0, [r7, #4]
 800075e:	4608      	mov	r0, r1
 8000760:	4611      	mov	r1, r2
 8000762:	461a      	mov	r2, r3
 8000764:	4603      	mov	r3, r0
 8000766:	70fb      	strb	r3, [r7, #3]
 8000768:	460b      	mov	r3, r1
 800076a:	70bb      	strb	r3, [r7, #2]
 800076c:	4613      	mov	r3, r2
 800076e:	707b      	strb	r3, [r7, #1]
  if (NULL == pow)
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	2b00      	cmp	r3, #0
 8000774:	d101      	bne.n	800077a <ina260_set_config+0x24>
    { return HAL_ERROR; }
 8000776:	2301      	movs	r3, #1
 8000778:	e030      	b.n	80007dc <ina260_set_config+0x86>

  pow->config.type  = operating_type;
 800077a:	78fb      	ldrb	r3, [r7, #3]
 800077c:	f003 0303 	and.w	r3, r3, #3
 8000780:	b2d9      	uxtb	r1, r3
 8000782:	687a      	ldr	r2, [r7, #4]
 8000784:	7993      	ldrb	r3, [r2, #6]
 8000786:	f361 0301 	bfi	r3, r1, #0, #2
 800078a:	7193      	strb	r3, [r2, #6]
  pow->config.mode  = operating_mode;
 800078c:	78bb      	ldrb	r3, [r7, #2]
 800078e:	f003 0301 	and.w	r3, r3, #1
 8000792:	b2d9      	uxtb	r1, r3
 8000794:	687a      	ldr	r2, [r7, #4]
 8000796:	7993      	ldrb	r3, [r2, #6]
 8000798:	f361 0382 	bfi	r3, r1, #2, #1
 800079c:	7193      	strb	r3, [r2, #6]
  pow->config.ctime = current_ctime;
 800079e:	787b      	ldrb	r3, [r7, #1]
 80007a0:	f003 0307 	and.w	r3, r3, #7
 80007a4:	b2d9      	uxtb	r1, r3
 80007a6:	687a      	ldr	r2, [r7, #4]
 80007a8:	7993      	ldrb	r3, [r2, #6]
 80007aa:	f361 03c5 	bfi	r3, r1, #3, #3
 80007ae:	7193      	strb	r3, [r2, #6]
  pow->config.vtime = voltage_ctime;
 80007b0:	7c3b      	ldrb	r3, [r7, #16]
 80007b2:	f003 0307 	and.w	r3, r3, #7
 80007b6:	b2d9      	uxtb	r1, r3
 80007b8:	687a      	ldr	r2, [r7, #4]
 80007ba:	79d3      	ldrb	r3, [r2, #7]
 80007bc:	f361 0302 	bfi	r3, r1, #0, #3
 80007c0:	71d3      	strb	r3, [r2, #7]
  pow->config.ssize = sample_size;
 80007c2:	7d3b      	ldrb	r3, [r7, #20]
 80007c4:	f003 0307 	and.w	r3, r3, #7
 80007c8:	b2d9      	uxtb	r1, r3
 80007ca:	687a      	ldr	r2, [r7, #4]
 80007cc:	79d3      	ldrb	r3, [r2, #7]
 80007ce:	f361 03c5 	bfi	r3, r1, #3, #3
 80007d2:	71d3      	strb	r3, [r2, #7]

  return ina260_write_config(pow);
 80007d4:	6878      	ldr	r0, [r7, #4]
 80007d6:	f000 f8a2 	bl	800091e <ina260_write_config>
 80007da:	4603      	mov	r3, r0
}
 80007dc:	4618      	mov	r0, r3
 80007de:	3708      	adds	r7, #8
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}

080007e4 <ina260_get_voltage>:
  *             HAL_BUSY    - I2C bus busy
  *             HAL_TIMEOUT - I2C communication timeout. see timeout constant
  *                           INA260_I2C_READ_TIMEOUT_MS in ina260.c
  */
ina260_status_t ina260_get_voltage(ina260_t *pow, float *voltage)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b084      	sub	sp, #16
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
 80007ec:	6039      	str	r1, [r7, #0]
  ina260_status_t status;
  uint16_t v;

  if (NULL == pow)
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d101      	bne.n	80007f8 <ina260_get_voltage+0x14>
    { return HAL_ERROR; }
 80007f4:	2301      	movs	r3, #1
 80007f6:	e02a      	b.n	800084e <ina260_get_voltage+0x6a>

  if (HAL_OK != (status = ina260_i2c_read(pow, INA260_REG_VOLTAGE, &v, 2U)))
 80007f8:	2102      	movs	r1, #2
 80007fa:	f107 020c 	add.w	r2, r7, #12
 80007fe:	2302      	movs	r3, #2
 8000800:	6878      	ldr	r0, [r7, #4]
 8000802:	f000 f82b 	bl	800085c <ina260_i2c_read>
 8000806:	4603      	mov	r3, r0
 8000808:	73fb      	strb	r3, [r7, #15]
 800080a:	7bfb      	ldrb	r3, [r7, #15]
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <ina260_get_voltage+0x30>
    { return status; }
 8000810:	7bfb      	ldrb	r3, [r7, #15]
 8000812:	e01c      	b.n	800084e <ina260_get_voltage+0x6a>

  v = __LEu16(&v);
 8000814:	f107 030c 	add.w	r3, r7, #12
 8000818:	3301      	adds	r3, #1
 800081a:	781b      	ldrb	r3, [r3, #0]
 800081c:	b21a      	sxth	r2, r3
 800081e:	f107 030c 	add.w	r3, r7, #12
 8000822:	781b      	ldrb	r3, [r3, #0]
 8000824:	021b      	lsls	r3, r3, #8
 8000826:	b21b      	sxth	r3, r3
 8000828:	4313      	orrs	r3, r2
 800082a:	b21b      	sxth	r3, r3
 800082c:	b29b      	uxth	r3, r3
 800082e:	81bb      	strh	r3, [r7, #12]
  *voltage = (float)v * INA260_LSB_VOLTAGE;
 8000830:	89bb      	ldrh	r3, [r7, #12]
 8000832:	4618      	mov	r0, r3
 8000834:	f7ff fd58 	bl	80002e8 <__aeabi_ui2f>
 8000838:	4602      	mov	r2, r0
 800083a:	4b07      	ldr	r3, [pc, #28]	; (8000858 <ina260_get_voltage+0x74>)
 800083c:	4619      	mov	r1, r3
 800083e:	4610      	mov	r0, r2
 8000840:	f7ff fdaa 	bl	8000398 <__aeabi_fmul>
 8000844:	4603      	mov	r3, r0
 8000846:	461a      	mov	r2, r3
 8000848:	683b      	ldr	r3, [r7, #0]
 800084a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800084c:	2300      	movs	r3, #0
}
 800084e:	4618      	mov	r0, r3
 8000850:	3710      	adds	r7, #16
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	3fa00000 	.word	0x3fa00000

0800085c <ina260_i2c_read>:

// -------------------------------------------------------- private functions --

static ina260_status_t ina260_i2c_read(ina260_t *pow,
    uint8_t mem_addr, uint16_t *buff_dst, uint16_t buff_dst_sz)
{
 800085c:	b590      	push	{r4, r7, lr}
 800085e:	b08b      	sub	sp, #44	; 0x2c
 8000860:	af04      	add	r7, sp, #16
 8000862:	60f8      	str	r0, [r7, #12]
 8000864:	607a      	str	r2, [r7, #4]
 8000866:	461a      	mov	r2, r3
 8000868:	460b      	mov	r3, r1
 800086a:	72fb      	strb	r3, [r7, #11]
 800086c:	4613      	mov	r3, r2
 800086e:	813b      	strh	r3, [r7, #8]
  if (NULL == pow)
 8000870:	68fb      	ldr	r3, [r7, #12]
 8000872:	2b00      	cmp	r3, #0
 8000874:	d10b      	bne.n	800088e <ina260_i2c_read+0x32>
    { return HAL_ERROR; }
 8000876:	2301      	movs	r3, #1
 8000878:	e023      	b.n	80008c2 <ina260_i2c_read+0x66>
      (uint8_t *)buff_dst,
      buff_dst_sz,
      INA260_I2C_READ_TIMEOUT_MS))) {

    // should not happen, unless during IRQ routine
    HAL_I2C_DeInit(pow->i2c_hal);
 800087a:	68fb      	ldr	r3, [r7, #12]
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	4618      	mov	r0, r3
 8000880:	f001 fb02 	bl	8001e88 <HAL_I2C_DeInit>
    HAL_I2C_Init(pow->i2c_hal);
 8000884:	68fb      	ldr	r3, [r7, #12]
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	4618      	mov	r0, r3
 800088a:	f001 f9d5 	bl	8001c38 <HAL_I2C_Init>
  while (HAL_BUSY == (status = HAL_I2C_Mem_Read(
 800088e:	68fb      	ldr	r3, [r7, #12]
 8000890:	6818      	ldr	r0, [r3, #0]
      (uint16_t)__I2C_SLAVE_READ_ADDR(pow->i2c_slave_addr),
 8000892:	68fb      	ldr	r3, [r7, #12]
 8000894:	791b      	ldrb	r3, [r3, #4]
 8000896:	b29b      	uxth	r3, r3
  while (HAL_BUSY == (status = HAL_I2C_Mem_Read(
 8000898:	005b      	lsls	r3, r3, #1
 800089a:	b299      	uxth	r1, r3
 800089c:	7afb      	ldrb	r3, [r7, #11]
 800089e:	b29a      	uxth	r2, r3
 80008a0:	2401      	movs	r4, #1
 80008a2:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80008a6:	9302      	str	r3, [sp, #8]
 80008a8:	893b      	ldrh	r3, [r7, #8]
 80008aa:	9301      	str	r3, [sp, #4]
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	9300      	str	r3, [sp, #0]
 80008b0:	4623      	mov	r3, r4
 80008b2:	f001 fc13 	bl	80020dc <HAL_I2C_Mem_Read>
 80008b6:	4603      	mov	r3, r0
 80008b8:	75fb      	strb	r3, [r7, #23]
 80008ba:	7dfb      	ldrb	r3, [r7, #23]
 80008bc:	2b02      	cmp	r3, #2
 80008be:	d0dc      	beq.n	800087a <ina260_i2c_read+0x1e>
  }

  return status;
 80008c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80008c2:	4618      	mov	r0, r3
 80008c4:	371c      	adds	r7, #28
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd90      	pop	{r4, r7, pc}

080008ca <ina260_i2c_write>:

static ina260_status_t ina260_i2c_write(ina260_t *pow,
    uint8_t mem_addr, uint16_t *buff_src, uint16_t buff_src_sz)
{
 80008ca:	b590      	push	{r4, r7, lr}
 80008cc:	b08b      	sub	sp, #44	; 0x2c
 80008ce:	af04      	add	r7, sp, #16
 80008d0:	60f8      	str	r0, [r7, #12]
 80008d2:	607a      	str	r2, [r7, #4]
 80008d4:	461a      	mov	r2, r3
 80008d6:	460b      	mov	r3, r1
 80008d8:	72fb      	strb	r3, [r7, #11]
 80008da:	4613      	mov	r3, r2
 80008dc:	813b      	strh	r3, [r7, #8]
  if (NULL == pow)
 80008de:	68fb      	ldr	r3, [r7, #12]
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d101      	bne.n	80008e8 <ina260_i2c_write+0x1e>
    { return HAL_ERROR; }
 80008e4:	2301      	movs	r3, #1
 80008e6:	e016      	b.n	8000916 <ina260_i2c_write+0x4c>

  ina260_status_t status;

  status = HAL_I2C_Mem_Write(
 80008e8:	68fb      	ldr	r3, [r7, #12]
 80008ea:	6818      	ldr	r0, [r3, #0]
      pow->i2c_hal,
      (uint16_t)__I2C_SLAVE_WRITE_ADDR(pow->i2c_slave_addr),
 80008ec:	68fb      	ldr	r3, [r7, #12]
 80008ee:	791b      	ldrb	r3, [r3, #4]
 80008f0:	b29b      	uxth	r3, r3
  status = HAL_I2C_Mem_Write(
 80008f2:	005b      	lsls	r3, r3, #1
 80008f4:	b299      	uxth	r1, r3
 80008f6:	7afb      	ldrb	r3, [r7, #11]
 80008f8:	b29a      	uxth	r2, r3
 80008fa:	2401      	movs	r4, #1
 80008fc:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000900:	9302      	str	r3, [sp, #8]
 8000902:	893b      	ldrh	r3, [r7, #8]
 8000904:	9301      	str	r3, [sp, #4]
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	9300      	str	r3, [sp, #0]
 800090a:	4623      	mov	r3, r4
 800090c:	f001 faec 	bl	8001ee8 <HAL_I2C_Mem_Write>
 8000910:	4603      	mov	r3, r0
 8000912:	75fb      	strb	r3, [r7, #23]
      INA260_I2C_MEM_ADDR_SIZE,
      (uint8_t *)buff_src,
      buff_src_sz,
      INA260_I2C_WRITE_TIMEOUT_MS);

  return status;
 8000914:	7dfb      	ldrb	r3, [r7, #23]
}
 8000916:	4618      	mov	r0, r3
 8000918:	371c      	adds	r7, #28
 800091a:	46bd      	mov	sp, r7
 800091c:	bd90      	pop	{r4, r7, pc}

0800091e <ina260_write_config>:

static ina260_status_t ina260_write_config(ina260_t *pow)
{
 800091e:	b580      	push	{r7, lr}
 8000920:	b084      	sub	sp, #16
 8000922:	af00      	add	r7, sp, #0
 8000924:	6078      	str	r0, [r7, #4]
  if (NULL == pow)
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	2b00      	cmp	r3, #0
 800092a:	d101      	bne.n	8000930 <ina260_write_config+0x12>
    { return HAL_ERROR; }
 800092c:	2301      	movs	r3, #1
 800092e:	e022      	b.n	8000976 <ina260_write_config+0x58>

  ina260_status_t status = ina260_wait_until_ready(
 8000930:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000934:	4619      	mov	r1, r3
 8000936:	6878      	ldr	r0, [r7, #4]
 8000938:	f7ff fee8 	bl	800070c <ina260_wait_until_ready>
 800093c:	4603      	mov	r3, r0
 800093e:	73fb      	strb	r3, [r7, #15]
      pow, INA260_I2C_READ_TIMEOUT_MS);

  ina260_configuration_t conf;
  conf.u16 = __LEu16(&(pow->config.u16));
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	3306      	adds	r3, #6
 8000944:	3301      	adds	r3, #1
 8000946:	781b      	ldrb	r3, [r3, #0]
 8000948:	b21a      	sxth	r2, r3
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	3306      	adds	r3, #6
 800094e:	781b      	ldrb	r3, [r3, #0]
 8000950:	021b      	lsls	r3, r3, #8
 8000952:	b21b      	sxth	r3, r3
 8000954:	4313      	orrs	r3, r2
 8000956:	b21b      	sxth	r3, r3
 8000958:	b29b      	uxth	r3, r3
 800095a:	813b      	strh	r3, [r7, #8]

  if (HAL_OK == status) {
 800095c:	7bfb      	ldrb	r3, [r7, #15]
 800095e:	2b00      	cmp	r3, #0
 8000960:	d108      	bne.n	8000974 <ina260_write_config+0x56>
    status = ina260_i2c_write(pow, INA260_REG_CONFIG, &(conf.u16), 2U);
 8000962:	2100      	movs	r1, #0
 8000964:	f107 0208 	add.w	r2, r7, #8
 8000968:	2302      	movs	r3, #2
 800096a:	6878      	ldr	r0, [r7, #4]
 800096c:	f7ff ffad 	bl	80008ca <ina260_i2c_write>
 8000970:	4603      	mov	r3, r0
 8000972:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8000974:	7bfb      	ldrb	r3, [r7, #15]
}
 8000976:	4618      	mov	r0, r3
 8000978:	3710      	adds	r7, #16
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
	...

08000980 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b086      	sub	sp, #24
 8000984:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000986:	f000 fc9e 	bl	80012c6 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800098a:	f000 f8c9 	bl	8000b20 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800098e:	f000 f963 	bl	8000c58 <MX_GPIO_Init>
	MX_I2C2_Init();
 8000992:	f000 f909 	bl	8000ba8 <MX_I2C2_Init>
	MX_USART1_UART_Init();
 8000996:	f000 f935 	bl	8000c04 <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */

	//для отладки
	blink(6, 40);
 800099a:	2128      	movs	r1, #40	; 0x28
 800099c:	2006      	movs	r0, #6
 800099e:	f000 fa17 	bl	8000dd0 <blink>


	__HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE);
 80009a2:	4b55      	ldr	r3, [pc, #340]	; (8000af8 <main+0x178>)
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	68da      	ldr	r2, [r3, #12]
 80009a8:	4b53      	ldr	r3, [pc, #332]	; (8000af8 <main+0x178>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	f042 0220 	orr.w	r2, r2, #32
 80009b0:	60da      	str	r2, [r3, #12]
	//	HAL_UART_Transmit_IT (&huart1, (uint8_t*)tx_uart, 10);//для отладки
	HAL_UART_Transmit(&huart1, tx_uart_2, 1, 100);//для отладки
 80009b2:	2364      	movs	r3, #100	; 0x64
 80009b4:	2201      	movs	r2, #1
 80009b6:	4951      	ldr	r1, [pc, #324]	; (8000afc <main+0x17c>)
 80009b8:	484f      	ldr	r0, [pc, #316]	; (8000af8 <main+0x178>)
 80009ba:	f002 feac 	bl	8003716 <HAL_UART_Transmit>
	uint8_t addr_ina = 0x45;
 80009be:	2345      	movs	r3, #69	; 0x45
 80009c0:	73fb      	strb	r3, [r7, #15]
	ina260_t *m_pow = NULL;
 80009c2:	2300      	movs	r3, #0
 80009c4:	60bb      	str	r3, [r7, #8]
	m_pow = ina260_new (&hi2c2, (uint8_t*)addr_ina); //
 80009c6:	7bfb      	ldrb	r3, [r7, #15]
 80009c8:	4619      	mov	r1, r3
 80009ca:	484d      	ldr	r0, [pc, #308]	; (8000b00 <main+0x180>)
 80009cc:	f7ff fe34 	bl	8000638 <ina260_new>
 80009d0:	60b8      	str	r0, [r7, #8]

	ina260_set_config(m_pow,
 80009d2:	2302      	movs	r3, #2
 80009d4:	9301      	str	r3, [sp, #4]
 80009d6:	2304      	movs	r3, #4
 80009d8:	9300      	str	r3, [sp, #0]
 80009da:	2304      	movs	r3, #4
 80009dc:	2201      	movs	r2, #1
 80009de:	2103      	movs	r1, #3
 80009e0:	68b8      	ldr	r0, [r7, #8]
 80009e2:	f7ff feb8 	bl	8000756 <ina260_set_config>
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		//отправляем в сон
		if(flag_need_sleep){
 80009e6:	4b47      	ldr	r3, [pc, #284]	; (8000b04 <main+0x184>)
 80009e8:	f993 3000 	ldrsb.w	r3, [r3]
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d004      	beq.n	80009fa <main+0x7a>
			get_sleep();
 80009f0:	f000 f9e2 	bl	8000db8 <get_sleep>
			//выход после режима сна
			flag_need_sleep=0;
 80009f4:	4b43      	ldr	r3, [pc, #268]	; (8000b04 <main+0x184>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	701a      	strb	r2, [r3, #0]
		}
		//произошло короткое нажатие кнопки - вызывает прерывание
		//если произошло прерывание по кнопке BTN_IRQ
		if(flag_btn_irq){
 80009fa:	4b43      	ldr	r3, [pc, #268]	; (8000b08 <main+0x188>)
 80009fc:	f993 3000 	ldrsb.w	r3, [r3]
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d0f0      	beq.n	80009e6 <main+0x66>
			blink(6, 50);
 8000a04:	2132      	movs	r1, #50	; 0x32
 8000a06:	2006      	movs	r0, #6
 8000a08:	f000 f9e2 	bl	8000dd0 <blink>
			//необходимо проверить состояние кнопки на удержание BTN_USER
			//(BTN_USER и BTN_IRQ - физически это одна и та же кнопка, выводы дублируются на ещё один пин, так как на ней и режим прерывания и обычный )
			HAL_Delay(1900);
 8000a0c:	f240 706c 	movw	r0, #1900	; 0x76c
 8000a10:	f000 fcc8 	bl	80013a4 <HAL_Delay>
			if(HAL_GPIO_ReadPin(BTN_USER_PORT, BTN_USER_PIN) == GPIO_PIN_RESET){
 8000a14:	2104      	movs	r1, #4
 8000a16:	483d      	ldr	r0, [pc, #244]	; (8000b0c <main+0x18c>)
 8000a18:	f001 f8ae 	bl	8001b78 <HAL_GPIO_ReadPin>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d102      	bne.n	8000a28 <main+0xa8>
				//кнопка удерживается какой то период времени
				flag_btn_user_pressed=1;
 8000a22:	4b3b      	ldr	r3, [pc, #236]	; (8000b10 <main+0x190>)
 8000a24:	2201      	movs	r2, #1
 8000a26:	701a      	strb	r2, [r3, #0]
			}

			//кнопку удерживали, необходимо вкл прибор
			if(flag_btn_user_pressed){
 8000a28:	4b39      	ldr	r3, [pc, #228]	; (8000b10 <main+0x190>)
 8000a2a:	f993 3000 	ldrsb.w	r3, [r3]
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d05b      	beq.n	8000aea <main+0x16a>
				//включаем пин, отвечающий за глобальное управление питанием
				HAL_GPIO_WritePin(PIN_GLOBAL_POWER_PORT, PIN_GLOBAL_POWER_PIN, GPIO_PIN_SET);
 8000a32:	2201      	movs	r2, #1
 8000a34:	2101      	movs	r1, #1
 8000a36:	4837      	ldr	r0, [pc, #220]	; (8000b14 <main+0x194>)
 8000a38:	f001 f8b5 	bl	8001ba6 <HAL_GPIO_WritePin>
				blink(6,50);  //для отладки
 8000a3c:	2132      	movs	r1, #50	; 0x32
 8000a3e:	2006      	movs	r0, #6
 8000a40:	f000 f9c6 	bl	8000dd0 <blink>
				//LED сигнализирующий, что питание подано
				HAL_GPIO_WritePin(LED_PORT, LED_PIN, GPIO_PIN_SET);
 8000a44:	2201      	movs	r2, #1
 8000a46:	2102      	movs	r1, #2
 8000a48:	4832      	ldr	r0, [pc, #200]	; (8000b14 <main+0x194>)
 8000a4a:	f001 f8ac 	bl	8001ba6 <HAL_GPIO_WritePin>
				flag_btn_user_pressed = 0;
 8000a4e:	4b30      	ldr	r3, [pc, #192]	; (8000b10 <main+0x190>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	701a      	strb	r2, [r3, #0]

				//разрешаем работу по UART`у
				flag_get_UART=1;
 8000a54:	4b30      	ldr	r3, [pc, #192]	; (8000b18 <main+0x198>)
 8000a56:	2201      	movs	r2, #1
 8000a58:	701a      	strb	r2, [r3, #0]

				while(flag_get_UART){
 8000a5a:	e040      	b.n	8000ade <main+0x15e>
					HAL_UART_Receive_IT (&huart1, (uint8_t*)rx_uart, size_rx_uart);
 8000a5c:	2206      	movs	r2, #6
 8000a5e:	492f      	ldr	r1, [pc, #188]	; (8000b1c <main+0x19c>)
 8000a60:	4825      	ldr	r0, [pc, #148]	; (8000af8 <main+0x178>)
 8000a62:	f002 fef1 	bl	8003848 <HAL_UART_Receive_IT>
					//данный буффер собирается в обработчике прерываний,
					//т.е когда буффер rx_uart размером (size_rx_uart) получает все байты,
					//тогда происходит прерывание и срабатывает обработчик прерываний HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
					int8_t action=rx_uart[0];
 8000a66:	4b2d      	ldr	r3, [pc, #180]	; (8000b1c <main+0x19c>)
 8000a68:	781b      	ldrb	r3, [r3, #0]
 8000a6a:	71fb      	strb	r3, [r7, #7]

					switch (action)
 8000a6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a70:	2b02      	cmp	r3, #2
 8000a72:	d002      	beq.n	8000a7a <main+0xfa>
 8000a74:	2b03      	cmp	r3, #3
 8000a76:	d008      	beq.n	8000a8a <main+0x10a>
						HAL_GPIO_WritePin(LED_PORT, LED_PIN, GPIO_PIN_RESET);
						break;

					default:
						//другие команды игнорируются
						break;
 8000a78:	e02c      	b.n	8000ad4 <main+0x154>
						blink(6,50);
 8000a7a:	2132      	movs	r1, #50	; 0x32
 8000a7c:	2006      	movs	r0, #6
 8000a7e:	f000 f9a7 	bl	8000dd0 <blink>
						get_volt_and_chargerStatus(m_pow);
 8000a82:	68b8      	ldr	r0, [r7, #8]
 8000a84:	f000 f9d8 	bl	8000e38 <get_volt_and_chargerStatus>
						break;
 8000a88:	e024      	b.n	8000ad4 <main+0x154>
						blink(6, 1000);
 8000a8a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000a8e:	2006      	movs	r0, #6
 8000a90:	f000 f99e 	bl	8000dd0 <blink>
						flag_get_UART = 0;
 8000a94:	4b20      	ldr	r3, [pc, #128]	; (8000b18 <main+0x198>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	701a      	strb	r2, [r3, #0]
						flag_btn_user_pressed = 0;
 8000a9a:	4b1d      	ldr	r3, [pc, #116]	; (8000b10 <main+0x190>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	701a      	strb	r2, [r3, #0]
						flag_btn_irq=0;
 8000aa0:	4b19      	ldr	r3, [pc, #100]	; (8000b08 <main+0x188>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	701a      	strb	r2, [r3, #0]
						flag_need_sleep=1;
 8000aa6:	4b17      	ldr	r3, [pc, #92]	; (8000b04 <main+0x184>)
 8000aa8:	2201      	movs	r2, #1
 8000aaa:	701a      	strb	r2, [r3, #0]
						HAL_GPIO_WritePin(LED_PORT, LED_PIN, GPIO_PIN_SET); // для отладки - удалить
 8000aac:	2201      	movs	r2, #1
 8000aae:	2102      	movs	r1, #2
 8000ab0:	4818      	ldr	r0, [pc, #96]	; (8000b14 <main+0x194>)
 8000ab2:	f001 f878 	bl	8001ba6 <HAL_GPIO_WritePin>
						HAL_Delay(6000);
 8000ab6:	f241 7070 	movw	r0, #6000	; 0x1770
 8000aba:	f000 fc73 	bl	80013a4 <HAL_Delay>
						HAL_GPIO_WritePin(PIN_GLOBAL_POWER_PORT, PIN_GLOBAL_POWER_PIN, GPIO_PIN_RESET);
 8000abe:	2200      	movs	r2, #0
 8000ac0:	2101      	movs	r1, #1
 8000ac2:	4814      	ldr	r0, [pc, #80]	; (8000b14 <main+0x194>)
 8000ac4:	f001 f86f 	bl	8001ba6 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LED_PORT, LED_PIN, GPIO_PIN_RESET);
 8000ac8:	2200      	movs	r2, #0
 8000aca:	2102      	movs	r1, #2
 8000acc:	4811      	ldr	r0, [pc, #68]	; (8000b14 <main+0x194>)
 8000ace:	f001 f86a 	bl	8001ba6 <HAL_GPIO_WritePin>
						break;
 8000ad2:	bf00      	nop
					}

					//обнуление массива rx_uart
					memset(&rx_uart[0], 0x00, size_rx_uart);
 8000ad4:	2206      	movs	r2, #6
 8000ad6:	2100      	movs	r1, #0
 8000ad8:	4810      	ldr	r0, [pc, #64]	; (8000b1c <main+0x19c>)
 8000ada:	f003 fb39 	bl	8004150 <memset>
				while(flag_get_UART){
 8000ade:	4b0e      	ldr	r3, [pc, #56]	; (8000b18 <main+0x198>)
 8000ae0:	f993 3000 	ldrsb.w	r3, [r3]
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d1b9      	bne.n	8000a5c <main+0xdc>
 8000ae8:	e77d      	b.n	80009e6 <main+0x66>
				}

			}else{
				flag_need_sleep=1;
 8000aea:	4b06      	ldr	r3, [pc, #24]	; (8000b04 <main+0x184>)
 8000aec:	2201      	movs	r2, #1
 8000aee:	701a      	strb	r2, [r3, #0]
				flag_btn_irq=0;
 8000af0:	4b05      	ldr	r3, [pc, #20]	; (8000b08 <main+0x188>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	701a      	strb	r2, [r3, #0]
		if(flag_need_sleep){
 8000af6:	e776      	b.n	80009e6 <main+0x66>
 8000af8:	20000100 	.word	0x20000100
 8000afc:	20000004 	.word	0x20000004
 8000b00:	200000ac 	.word	0x200000ac
 8000b04:	20000000 	.word	0x20000000
 8000b08:	20000094 	.word	0x20000094
 8000b0c:	40020c00 	.word	0x40020c00
 8000b10:	20000095 	.word	0x20000095
 8000b14:	40020800 	.word	0x40020800
 8000b18:	20000096 	.word	0x20000096
 8000b1c:	20000098 	.word	0x20000098

08000b20 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b092      	sub	sp, #72	; 0x48
 8000b24:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b26:	f107 0314 	add.w	r3, r7, #20
 8000b2a:	2234      	movs	r2, #52	; 0x34
 8000b2c:	2100      	movs	r1, #0
 8000b2e:	4618      	mov	r0, r3
 8000b30:	f003 fb0e 	bl	8004150 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b34:	463b      	mov	r3, r7
 8000b36:	2200      	movs	r2, #0
 8000b38:	601a      	str	r2, [r3, #0]
 8000b3a:	605a      	str	r2, [r3, #4]
 8000b3c:	609a      	str	r2, [r3, #8]
 8000b3e:	60da      	str	r2, [r3, #12]
 8000b40:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b42:	4b18      	ldr	r3, [pc, #96]	; (8000ba4 <SystemClock_Config+0x84>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8000b4a:	4a16      	ldr	r2, [pc, #88]	; (8000ba4 <SystemClock_Config+0x84>)
 8000b4c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000b50:	6013      	str	r3, [r2, #0]
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b52:	2301      	movs	r3, #1
 8000b54:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b56:	2301      	movs	r3, #1
 8000b58:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	63bb      	str	r3, [r7, #56]	; 0x38
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b5e:	f107 0314 	add.w	r3, r7, #20
 8000b62:	4618      	mov	r0, r3
 8000b64:	f002 f83c 	bl	8002be0 <HAL_RCC_OscConfig>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d001      	beq.n	8000b72 <SystemClock_Config+0x52>
	{
		Error_Handler();
 8000b6e:	f000 fa07 	bl	8000f80 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b72:	230f      	movs	r3, #15
 8000b74:	603b      	str	r3, [r7, #0]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000b76:	2302      	movs	r3, #2
 8000b78:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b82:	2300      	movs	r3, #0
 8000b84:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000b86:	463b      	mov	r3, r7
 8000b88:	2100      	movs	r1, #0
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f002 fb58 	bl	8003240 <HAL_RCC_ClockConfig>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d001      	beq.n	8000b9a <SystemClock_Config+0x7a>
	{
		Error_Handler();
 8000b96:	f000 f9f3 	bl	8000f80 <Error_Handler>
	}
}
 8000b9a:	bf00      	nop
 8000b9c:	3748      	adds	r7, #72	; 0x48
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	40007000 	.word	0x40007000

08000ba8 <MX_I2C2_Init>:
 * @brief I2C2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C2_Init(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
	/* USER CODE END I2C2_Init 0 */

	/* USER CODE BEGIN I2C2_Init 1 */

	/* USER CODE END I2C2_Init 1 */
	hi2c2.Instance = I2C2;
 8000bac:	4b12      	ldr	r3, [pc, #72]	; (8000bf8 <MX_I2C2_Init+0x50>)
 8000bae:	4a13      	ldr	r2, [pc, #76]	; (8000bfc <MX_I2C2_Init+0x54>)
 8000bb0:	601a      	str	r2, [r3, #0]
	hi2c2.Init.ClockSpeed = 400000;
 8000bb2:	4b11      	ldr	r3, [pc, #68]	; (8000bf8 <MX_I2C2_Init+0x50>)
 8000bb4:	4a12      	ldr	r2, [pc, #72]	; (8000c00 <MX_I2C2_Init+0x58>)
 8000bb6:	605a      	str	r2, [r3, #4]
	hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000bb8:	4b0f      	ldr	r3, [pc, #60]	; (8000bf8 <MX_I2C2_Init+0x50>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	609a      	str	r2, [r3, #8]
	hi2c2.Init.OwnAddress1 = 0;
 8000bbe:	4b0e      	ldr	r3, [pc, #56]	; (8000bf8 <MX_I2C2_Init+0x50>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	60da      	str	r2, [r3, #12]
	hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000bc4:	4b0c      	ldr	r3, [pc, #48]	; (8000bf8 <MX_I2C2_Init+0x50>)
 8000bc6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000bca:	611a      	str	r2, [r3, #16]
	hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000bcc:	4b0a      	ldr	r3, [pc, #40]	; (8000bf8 <MX_I2C2_Init+0x50>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	615a      	str	r2, [r3, #20]
	hi2c2.Init.OwnAddress2 = 0;
 8000bd2:	4b09      	ldr	r3, [pc, #36]	; (8000bf8 <MX_I2C2_Init+0x50>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	619a      	str	r2, [r3, #24]
	hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000bd8:	4b07      	ldr	r3, [pc, #28]	; (8000bf8 <MX_I2C2_Init+0x50>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	61da      	str	r2, [r3, #28]
	hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000bde:	4b06      	ldr	r3, [pc, #24]	; (8000bf8 <MX_I2C2_Init+0x50>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000be4:	4804      	ldr	r0, [pc, #16]	; (8000bf8 <MX_I2C2_Init+0x50>)
 8000be6:	f001 f827 	bl	8001c38 <HAL_I2C_Init>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d001      	beq.n	8000bf4 <MX_I2C2_Init+0x4c>
	{
		Error_Handler();
 8000bf0:	f000 f9c6 	bl	8000f80 <Error_Handler>
	}
	/* USER CODE BEGIN I2C2_Init 2 */

	/* USER CODE END I2C2_Init 2 */

}
 8000bf4:	bf00      	nop
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	200000ac 	.word	0x200000ac
 8000bfc:	40005800 	.word	0x40005800
 8000c00:	00061a80 	.word	0x00061a80

08000c04 <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8000c08:	4b11      	ldr	r3, [pc, #68]	; (8000c50 <MX_USART1_UART_Init+0x4c>)
 8000c0a:	4a12      	ldr	r2, [pc, #72]	; (8000c54 <MX_USART1_UART_Init+0x50>)
 8000c0c:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8000c0e:	4b10      	ldr	r3, [pc, #64]	; (8000c50 <MX_USART1_UART_Init+0x4c>)
 8000c10:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c14:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c16:	4b0e      	ldr	r3, [pc, #56]	; (8000c50 <MX_USART1_UART_Init+0x4c>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8000c1c:	4b0c      	ldr	r3, [pc, #48]	; (8000c50 <MX_USART1_UART_Init+0x4c>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8000c22:	4b0b      	ldr	r3, [pc, #44]	; (8000c50 <MX_USART1_UART_Init+0x4c>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8000c28:	4b09      	ldr	r3, [pc, #36]	; (8000c50 <MX_USART1_UART_Init+0x4c>)
 8000c2a:	220c      	movs	r2, #12
 8000c2c:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c2e:	4b08      	ldr	r3, [pc, #32]	; (8000c50 <MX_USART1_UART_Init+0x4c>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c34:	4b06      	ldr	r3, [pc, #24]	; (8000c50 <MX_USART1_UART_Init+0x4c>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c3a:	4805      	ldr	r0, [pc, #20]	; (8000c50 <MX_USART1_UART_Init+0x4c>)
 8000c3c:	f002 fd1e 	bl	800367c <HAL_UART_Init>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d001      	beq.n	8000c4a <MX_USART1_UART_Init+0x46>
	{
		Error_Handler();
 8000c46:	f000 f99b 	bl	8000f80 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8000c4a:	bf00      	nop
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	20000100 	.word	0x20000100
 8000c54:	40013800 	.word	0x40013800

08000c58 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b08a      	sub	sp, #40	; 0x28
 8000c5c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c5e:	f107 0314 	add.w	r3, r7, #20
 8000c62:	2200      	movs	r2, #0
 8000c64:	601a      	str	r2, [r3, #0]
 8000c66:	605a      	str	r2, [r3, #4]
 8000c68:	609a      	str	r2, [r3, #8]
 8000c6a:	60da      	str	r2, [r3, #12]
 8000c6c:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000c6e:	4b40      	ldr	r3, [pc, #256]	; (8000d70 <MX_GPIO_Init+0x118>)
 8000c70:	69db      	ldr	r3, [r3, #28]
 8000c72:	4a3f      	ldr	r2, [pc, #252]	; (8000d70 <MX_GPIO_Init+0x118>)
 8000c74:	f043 0304 	orr.w	r3, r3, #4
 8000c78:	61d3      	str	r3, [r2, #28]
 8000c7a:	4b3d      	ldr	r3, [pc, #244]	; (8000d70 <MX_GPIO_Init+0x118>)
 8000c7c:	69db      	ldr	r3, [r3, #28]
 8000c7e:	f003 0304 	and.w	r3, r3, #4
 8000c82:	613b      	str	r3, [r7, #16]
 8000c84:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000c86:	4b3a      	ldr	r3, [pc, #232]	; (8000d70 <MX_GPIO_Init+0x118>)
 8000c88:	69db      	ldr	r3, [r3, #28]
 8000c8a:	4a39      	ldr	r2, [pc, #228]	; (8000d70 <MX_GPIO_Init+0x118>)
 8000c8c:	f043 0320 	orr.w	r3, r3, #32
 8000c90:	61d3      	str	r3, [r2, #28]
 8000c92:	4b37      	ldr	r3, [pc, #220]	; (8000d70 <MX_GPIO_Init+0x118>)
 8000c94:	69db      	ldr	r3, [r3, #28]
 8000c96:	f003 0320 	and.w	r3, r3, #32
 8000c9a:	60fb      	str	r3, [r7, #12]
 8000c9c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000c9e:	4b34      	ldr	r3, [pc, #208]	; (8000d70 <MX_GPIO_Init+0x118>)
 8000ca0:	69db      	ldr	r3, [r3, #28]
 8000ca2:	4a33      	ldr	r2, [pc, #204]	; (8000d70 <MX_GPIO_Init+0x118>)
 8000ca4:	f043 0302 	orr.w	r3, r3, #2
 8000ca8:	61d3      	str	r3, [r2, #28]
 8000caa:	4b31      	ldr	r3, [pc, #196]	; (8000d70 <MX_GPIO_Init+0x118>)
 8000cac:	69db      	ldr	r3, [r3, #28]
 8000cae:	f003 0302 	and.w	r3, r3, #2
 8000cb2:	60bb      	str	r3, [r7, #8]
 8000cb4:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000cb6:	4b2e      	ldr	r3, [pc, #184]	; (8000d70 <MX_GPIO_Init+0x118>)
 8000cb8:	69db      	ldr	r3, [r3, #28]
 8000cba:	4a2d      	ldr	r2, [pc, #180]	; (8000d70 <MX_GPIO_Init+0x118>)
 8000cbc:	f043 0301 	orr.w	r3, r3, #1
 8000cc0:	61d3      	str	r3, [r2, #28]
 8000cc2:	4b2b      	ldr	r3, [pc, #172]	; (8000d70 <MX_GPIO_Init+0x118>)
 8000cc4:	69db      	ldr	r3, [r3, #28]
 8000cc6:	f003 0301 	and.w	r3, r3, #1
 8000cca:	607b      	str	r3, [r7, #4]
 8000ccc:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000cce:	4b28      	ldr	r3, [pc, #160]	; (8000d70 <MX_GPIO_Init+0x118>)
 8000cd0:	69db      	ldr	r3, [r3, #28]
 8000cd2:	4a27      	ldr	r2, [pc, #156]	; (8000d70 <MX_GPIO_Init+0x118>)
 8000cd4:	f043 0308 	orr.w	r3, r3, #8
 8000cd8:	61d3      	str	r3, [r2, #28]
 8000cda:	4b25      	ldr	r3, [pc, #148]	; (8000d70 <MX_GPIO_Init+0x118>)
 8000cdc:	69db      	ldr	r3, [r3, #28]
 8000cde:	f003 0308 	and.w	r3, r3, #8
 8000ce2:	603b      	str	r3, [r7, #0]
 8000ce4:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	2103      	movs	r1, #3
 8000cea:	4822      	ldr	r0, [pc, #136]	; (8000d74 <MX_GPIO_Init+0x11c>)
 8000cec:	f000 ff5b 	bl	8001ba6 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PC13 */
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000cf0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cf4:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000cf6:	4b20      	ldr	r3, [pc, #128]	; (8000d78 <MX_GPIO_Init+0x120>)
 8000cf8:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cfe:	f107 0314 	add.w	r3, r7, #20
 8000d02:	4619      	mov	r1, r3
 8000d04:	481b      	ldr	r0, [pc, #108]	; (8000d74 <MX_GPIO_Init+0x11c>)
 8000d06:	f000 fcd9 	bl	80016bc <HAL_GPIO_Init>

	/*Configure GPIO pins : PC0 PC1 */
	GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000d0a:	2303      	movs	r3, #3
 8000d0c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d0e:	2301      	movs	r3, #1
 8000d10:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d12:	2300      	movs	r3, #0
 8000d14:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d16:	2300      	movs	r3, #0
 8000d18:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d1a:	f107 0314 	add.w	r3, r7, #20
 8000d1e:	4619      	mov	r1, r3
 8000d20:	4814      	ldr	r0, [pc, #80]	; (8000d74 <MX_GPIO_Init+0x11c>)
 8000d22:	f000 fccb 	bl	80016bc <HAL_GPIO_Init>

	/*Configure GPIO pin : PB0 */
	GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000d26:	2301      	movs	r3, #1
 8000d28:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d32:	f107 0314 	add.w	r3, r7, #20
 8000d36:	4619      	mov	r1, r3
 8000d38:	4810      	ldr	r0, [pc, #64]	; (8000d7c <MX_GPIO_Init+0x124>)
 8000d3a:	f000 fcbf 	bl	80016bc <HAL_GPIO_Init>

	/*Configure GPIO pin : PD2 */
	GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000d3e:	2304      	movs	r3, #4
 8000d40:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d42:	2300      	movs	r3, #0
 8000d44:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d46:	2300      	movs	r3, #0
 8000d48:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d4a:	f107 0314 	add.w	r3, r7, #20
 8000d4e:	4619      	mov	r1, r3
 8000d50:	480b      	ldr	r0, [pc, #44]	; (8000d80 <MX_GPIO_Init+0x128>)
 8000d52:	f000 fcb3 	bl	80016bc <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000d56:	2200      	movs	r2, #0
 8000d58:	2100      	movs	r1, #0
 8000d5a:	2028      	movs	r0, #40	; 0x28
 8000d5c:	f000 fc37 	bl	80015ce <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000d60:	2028      	movs	r0, #40	; 0x28
 8000d62:	f000 fc50 	bl	8001606 <HAL_NVIC_EnableIRQ>

}
 8000d66:	bf00      	nop
 8000d68:	3728      	adds	r7, #40	; 0x28
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	40023800 	.word	0x40023800
 8000d74:	40020800 	.word	0x40020800
 8000d78:	10110000 	.word	0x10110000
 8000d7c:	40020400 	.word	0x40020400
 8000d80:	40020c00 	.word	0x40020c00

08000d84 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000d84:	b480      	push	{r7}
 8000d86:	b083      	sub	sp, #12
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin== BTN_IRQ_PIN) {
 8000d8e:	88fb      	ldrh	r3, [r7, #6]
 8000d90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000d94:	d106      	bne.n	8000da4 <HAL_GPIO_EXTI_Callback+0x20>
		//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
		flag_btn_irq=1;
 8000d96:	4b06      	ldr	r3, [pc, #24]	; (8000db0 <HAL_GPIO_EXTI_Callback+0x2c>)
 8000d98:	2201      	movs	r2, #1
 8000d9a:	701a      	strb	r2, [r3, #0]
		flag_need_sleep = 0;
 8000d9c:	4b05      	ldr	r3, [pc, #20]	; (8000db4 <HAL_GPIO_EXTI_Callback+0x30>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	701a      	strb	r2, [r3, #0]
	}else{
		__NOP();
	}
}
 8000da2:	e000      	b.n	8000da6 <HAL_GPIO_EXTI_Callback+0x22>
		__NOP();
 8000da4:	bf00      	nop
}
 8000da6:	bf00      	nop
 8000da8:	370c      	adds	r7, #12
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bc80      	pop	{r7}
 8000dae:	4770      	bx	lr
 8000db0:	20000094 	.word	0x20000094
 8000db4:	20000000 	.word	0x20000000

08000db8 <get_sleep>:

void get_sleep()
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
	HAL_SuspendTick();
 8000dbc:	f000 fb14 	bl	80013e8 <HAL_SuspendTick>
	HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8000dc0:	2101      	movs	r1, #1
 8000dc2:	2000      	movs	r0, #0
 8000dc4:	f001 fee6 	bl	8002b94 <HAL_PWR_EnterSLEEPMode>
	HAL_ResumeTick();
 8000dc8:	f000 fb1c 	bl	8001404 <HAL_ResumeTick>
}
 8000dcc:	bf00      	nop
 8000dce:	bd80      	pop	{r7, pc}

08000dd0 <blink>:

void blink(uint8_t counter_blink, uint32_t t_ms)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b084      	sub	sp, #16
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	6039      	str	r1, [r7, #0]
 8000dda:	71fb      	strb	r3, [r7, #7]
	for(int8_t i=0; i<counter_blink; ++i){
 8000ddc:	2300      	movs	r3, #0
 8000dde:	73fb      	strb	r3, [r7, #15]
 8000de0:	e00a      	b.n	8000df8 <blink+0x28>
		HAL_GPIO_TogglePin(LED_PORT, LED_PIN); //Toggle LED
 8000de2:	2102      	movs	r1, #2
 8000de4:	4809      	ldr	r0, [pc, #36]	; (8000e0c <blink+0x3c>)
 8000de6:	f000 fef6 	bl	8001bd6 <HAL_GPIO_TogglePin>
		HAL_Delay (t_ms);
 8000dea:	6838      	ldr	r0, [r7, #0]
 8000dec:	f000 fada 	bl	80013a4 <HAL_Delay>
	for(int8_t i=0; i<counter_blink; ++i){
 8000df0:	7bfb      	ldrb	r3, [r7, #15]
 8000df2:	3301      	adds	r3, #1
 8000df4:	b2db      	uxtb	r3, r3
 8000df6:	73fb      	strb	r3, [r7, #15]
 8000df8:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8000dfc:	79fb      	ldrb	r3, [r7, #7]
 8000dfe:	429a      	cmp	r2, r3
 8000e00:	dbef      	blt.n	8000de2 <blink+0x12>
	}
}
 8000e02:	bf00      	nop
 8000e04:	3710      	adds	r7, #16
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	40020800 	.word	0x40020800

08000e10 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b083      	sub	sp, #12
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
	if(huart == &huart1){

	}
}
 8000e18:	bf00      	nop
 8000e1a:	370c      	adds	r7, #12
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bc80      	pop	{r7}
 8000e20:	4770      	bx	lr

08000e22 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000e22:	b480      	push	{r7}
 8000e24:	b083      	sub	sp, #12
 8000e26:	af00      	add	r7, sp, #0
 8000e28:	6078      	str	r0, [r7, #4]
	__NOP();
 8000e2a:	bf00      	nop
}
 8000e2c:	bf00      	nop
 8000e2e:	370c      	adds	r7, #12
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bc80      	pop	{r7}
 8000e34:	4770      	bx	lr
	...

08000e38 <get_volt_and_chargerStatus>:
//	HAL_UART_Transmit_IT (&huart1, (uint8_t*)&TempMSV[0], len_send);
//	//	HAL_UART_Transmit(&huart1, (uint8_t*)&TempMSV[0], len_send-13, 100);
//}

void get_volt_and_chargerStatus(ina260_t *_pow)
{
 8000e38:	b5b0      	push	{r4, r5, r7, lr}
 8000e3a:	b08a      	sub	sp, #40	; 0x28
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
 8000e40:	466b      	mov	r3, sp
 8000e42:	461d      	mov	r5, r3
	float voltage = 0.0f;
 8000e44:	f04f 0300 	mov.w	r3, #0
 8000e48:	61bb      	str	r3, [r7, #24]
	int8_t flag_status_charger = 0;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	75fb      	strb	r3, [r7, #23]
	int8_t res = SLAVE_SUCCESS_ANSWER;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	75bb      	strb	r3, [r7, #22]

	//get measure INA260
	if(ina260_get_voltage(_pow, &voltage) !=HAL_OK){
 8000e52:	f107 0318 	add.w	r3, r7, #24
 8000e56:	4619      	mov	r1, r3
 8000e58:	6878      	ldr	r0, [r7, #4]
 8000e5a:	f7ff fcc3 	bl	80007e4 <ina260_get_voltage>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d001      	beq.n	8000e68 <get_volt_and_chargerStatus+0x30>
		res = SLAVE_BAD_ANSWER;
 8000e64:	23ff      	movs	r3, #255	; 0xff
 8000e66:	75bb      	strb	r3, [r7, #22]
	}

	//get flag - charging status pin from charger or battery
	if(HAL_GPIO_ReadPin(PIN_STATUS_CHARGER_PORT, PIN_STATUS_CHARGER_PIN)==0){
 8000e68:	2101      	movs	r1, #1
 8000e6a:	4843      	ldr	r0, [pc, #268]	; (8000f78 <get_volt_and_chargerStatus+0x140>)
 8000e6c:	f000 fe84 	bl	8001b78 <HAL_GPIO_ReadPin>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d102      	bne.n	8000e7c <get_volt_and_chargerStatus+0x44>
		//charging from battery
		flag_status_charger = 0;
 8000e76:	2300      	movs	r3, #0
 8000e78:	75fb      	strb	r3, [r7, #23]
 8000e7a:	e001      	b.n	8000e80 <get_volt_and_chargerStatus+0x48>
	}else{
		//charging from power supply
		flag_status_charger = 1;
 8000e7c:	2301      	movs	r3, #1
 8000e7e:	75fb      	strb	r3, [r7, #23]
	}

	tcp_packet_t ans;
	memset(&ans, 0x00, sizeof(tcp_packet_t));
 8000e80:	f107 0310 	add.w	r3, r7, #16
 8000e84:	2206      	movs	r2, #6
 8000e86:	2100      	movs	r1, #0
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f003 f961 	bl	8004150 <memset>

	//собираем сообщение------------------------------------------
	ans.command = CMD_ANSWER;
 8000e8e:	2301      	movs	r3, #1
 8000e90:	743b      	strb	r3, [r7, #16]
	uint8_t length_data = sizeof(voltage) + sizeof(flag_status_charger);
 8000e92:	2305      	movs	r3, #5
 8000e94:	73fb      	strb	r3, [r7, #15]
	ans.length = sizeof(ans.command) + sizeof(res) + sizeof(length_data) + sizeof(voltage) + sizeof(flag_status_charger);
 8000e96:	2308      	movs	r3, #8
 8000e98:	747b      	strb	r3, [r7, #17]
	uint8_t pos = 0;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	int8_t Buffer[ans.length];
 8000ea0:	7c78      	ldrb	r0, [r7, #17]
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	3b01      	subs	r3, #1
 8000ea6:	623b      	str	r3, [r7, #32]
 8000ea8:	b2c1      	uxtb	r1, r0
 8000eaa:	f04f 0200 	mov.w	r2, #0
 8000eae:	f04f 0300 	mov.w	r3, #0
 8000eb2:	f04f 0400 	mov.w	r4, #0
 8000eb6:	00d4      	lsls	r4, r2, #3
 8000eb8:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8000ebc:	00cb      	lsls	r3, r1, #3
 8000ebe:	b2c1      	uxtb	r1, r0
 8000ec0:	f04f 0200 	mov.w	r2, #0
 8000ec4:	f04f 0300 	mov.w	r3, #0
 8000ec8:	f04f 0400 	mov.w	r4, #0
 8000ecc:	00d4      	lsls	r4, r2, #3
 8000ece:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8000ed2:	00cb      	lsls	r3, r1, #3
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	3307      	adds	r3, #7
 8000ed8:	08db      	lsrs	r3, r3, #3
 8000eda:	00db      	lsls	r3, r3, #3
 8000edc:	ebad 0d03 	sub.w	sp, sp, r3
 8000ee0:	466b      	mov	r3, sp
 8000ee2:	3300      	adds	r3, #0
 8000ee4:	61fb      	str	r3, [r7, #28]
	memset(&Buffer[0], 0x00, ans.length);
 8000ee6:	69fb      	ldr	r3, [r7, #28]
 8000ee8:	7c7a      	ldrb	r2, [r7, #17]
 8000eea:	2100      	movs	r1, #0
 8000eec:	4618      	mov	r0, r3
 8000eee:	f003 f92f 	bl	8004150 <memset>

	memcpy(&Buffer[pos], (int8_t*)&ans.command, sizeof(ans.command));
 8000ef2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000ef6:	69fa      	ldr	r2, [r7, #28]
 8000ef8:	4413      	add	r3, r2
 8000efa:	7c3a      	ldrb	r2, [r7, #16]
 8000efc:	701a      	strb	r2, [r3, #0]
	pos+= sizeof(ans.command);
 8000efe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000f02:	3301      	adds	r3, #1
 8000f04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	memcpy(&Buffer[pos], (int8_t*)&res, sizeof(res));
 8000f08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000f0c:	69fa      	ldr	r2, [r7, #28]
 8000f0e:	4413      	add	r3, r2
 8000f10:	7dba      	ldrb	r2, [r7, #22]
 8000f12:	701a      	strb	r2, [r3, #0]
	pos+=sizeof(res);
 8000f14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000f18:	3301      	adds	r3, #1
 8000f1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	memcpy(&Buffer[pos], (int8_t*)&length_data, sizeof(length_data));
 8000f1e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000f22:	69fa      	ldr	r2, [r7, #28]
 8000f24:	4413      	add	r3, r2
 8000f26:	7bfa      	ldrb	r2, [r7, #15]
 8000f28:	701a      	strb	r2, [r3, #0]
	pos+=sizeof(length_data);
 8000f2a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000f2e:	3301      	adds	r3, #1
 8000f30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	memcpy(&Buffer[pos], (int8_t*)&voltage, sizeof(voltage));
 8000f34:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000f38:	69fa      	ldr	r2, [r7, #28]
 8000f3a:	4413      	add	r3, r2
 8000f3c:	69ba      	ldr	r2, [r7, #24]
 8000f3e:	601a      	str	r2, [r3, #0]
	pos+=sizeof(voltage);
 8000f40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000f44:	3304      	adds	r3, #4
 8000f46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	memcpy(&Buffer[pos], (int8_t*)&flag_status_charger, sizeof(flag_status_charger));
 8000f4a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000f4e:	69fa      	ldr	r2, [r7, #28]
 8000f50:	4413      	add	r3, r2
 8000f52:	7dfa      	ldrb	r2, [r7, #23]
 8000f54:	701a      	strb	r2, [r3, #0]
	pos+=sizeof(flag_status_charger);
 8000f56:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000f5a:	3301      	adds	r3, #1
 8000f5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	//------------------------------------------------------------

	//send message in COM-PORT (UART to master)
	HAL_UART_Transmit(&huart1, (uint8_t*)&Buffer[0], ans.length, 100);
 8000f60:	69f9      	ldr	r1, [r7, #28]
 8000f62:	7c7b      	ldrb	r3, [r7, #17]
 8000f64:	b29a      	uxth	r2, r3
 8000f66:	2364      	movs	r3, #100	; 0x64
 8000f68:	4804      	ldr	r0, [pc, #16]	; (8000f7c <get_volt_and_chargerStatus+0x144>)
 8000f6a:	f002 fbd4 	bl	8003716 <HAL_UART_Transmit>
 8000f6e:	46ad      	mov	sp, r5
//	HAL_UART_Transmit_IT (&huart1, (uint8_t*)&Buffer[0], ans.length);
}
 8000f70:	bf00      	nop
 8000f72:	3728      	adds	r7, #40	; 0x28
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bdb0      	pop	{r4, r5, r7, pc}
 8000f78:	40020400 	.word	0x40020400
 8000f7c:	20000100 	.word	0x20000100

08000f80 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8000f84:	bf00      	nop
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bc80      	pop	{r7}
 8000f8a:	4770      	bx	lr

08000f8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b085      	sub	sp, #20
 8000f90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8000f92:	4b14      	ldr	r3, [pc, #80]	; (8000fe4 <HAL_MspInit+0x58>)
 8000f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f96:	4a13      	ldr	r2, [pc, #76]	; (8000fe4 <HAL_MspInit+0x58>)
 8000f98:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f9c:	6253      	str	r3, [r2, #36]	; 0x24
 8000f9e:	4b11      	ldr	r3, [pc, #68]	; (8000fe4 <HAL_MspInit+0x58>)
 8000fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fa2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8000fa6:	60fb      	str	r3, [r7, #12]
 8000fa8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000faa:	4b0e      	ldr	r3, [pc, #56]	; (8000fe4 <HAL_MspInit+0x58>)
 8000fac:	6a1b      	ldr	r3, [r3, #32]
 8000fae:	4a0d      	ldr	r2, [pc, #52]	; (8000fe4 <HAL_MspInit+0x58>)
 8000fb0:	f043 0301 	orr.w	r3, r3, #1
 8000fb4:	6213      	str	r3, [r2, #32]
 8000fb6:	4b0b      	ldr	r3, [pc, #44]	; (8000fe4 <HAL_MspInit+0x58>)
 8000fb8:	6a1b      	ldr	r3, [r3, #32]
 8000fba:	f003 0301 	and.w	r3, r3, #1
 8000fbe:	60bb      	str	r3, [r7, #8]
 8000fc0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fc2:	4b08      	ldr	r3, [pc, #32]	; (8000fe4 <HAL_MspInit+0x58>)
 8000fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fc6:	4a07      	ldr	r2, [pc, #28]	; (8000fe4 <HAL_MspInit+0x58>)
 8000fc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fcc:	6253      	str	r3, [r2, #36]	; 0x24
 8000fce:	4b05      	ldr	r3, [pc, #20]	; (8000fe4 <HAL_MspInit+0x58>)
 8000fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fd6:	607b      	str	r3, [r7, #4]
 8000fd8:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fda:	bf00      	nop
 8000fdc:	3714      	adds	r7, #20
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bc80      	pop	{r7}
 8000fe2:	4770      	bx	lr
 8000fe4:	40023800 	.word	0x40023800

08000fe8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b08a      	sub	sp, #40	; 0x28
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff0:	f107 0314 	add.w	r3, r7, #20
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	601a      	str	r2, [r3, #0]
 8000ff8:	605a      	str	r2, [r3, #4]
 8000ffa:	609a      	str	r2, [r3, #8]
 8000ffc:	60da      	str	r2, [r3, #12]
 8000ffe:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4a17      	ldr	r2, [pc, #92]	; (8001064 <HAL_I2C_MspInit+0x7c>)
 8001006:	4293      	cmp	r3, r2
 8001008:	d128      	bne.n	800105c <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800100a:	4b17      	ldr	r3, [pc, #92]	; (8001068 <HAL_I2C_MspInit+0x80>)
 800100c:	69db      	ldr	r3, [r3, #28]
 800100e:	4a16      	ldr	r2, [pc, #88]	; (8001068 <HAL_I2C_MspInit+0x80>)
 8001010:	f043 0302 	orr.w	r3, r3, #2
 8001014:	61d3      	str	r3, [r2, #28]
 8001016:	4b14      	ldr	r3, [pc, #80]	; (8001068 <HAL_I2C_MspInit+0x80>)
 8001018:	69db      	ldr	r3, [r3, #28]
 800101a:	f003 0302 	and.w	r3, r3, #2
 800101e:	613b      	str	r3, [r7, #16]
 8001020:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration    
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001022:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001026:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001028:	2312      	movs	r3, #18
 800102a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800102c:	2301      	movs	r3, #1
 800102e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001030:	2303      	movs	r3, #3
 8001032:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001034:	2304      	movs	r3, #4
 8001036:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001038:	f107 0314 	add.w	r3, r7, #20
 800103c:	4619      	mov	r1, r3
 800103e:	480b      	ldr	r0, [pc, #44]	; (800106c <HAL_I2C_MspInit+0x84>)
 8001040:	f000 fb3c 	bl	80016bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001044:	4b08      	ldr	r3, [pc, #32]	; (8001068 <HAL_I2C_MspInit+0x80>)
 8001046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001048:	4a07      	ldr	r2, [pc, #28]	; (8001068 <HAL_I2C_MspInit+0x80>)
 800104a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800104e:	6253      	str	r3, [r2, #36]	; 0x24
 8001050:	4b05      	ldr	r3, [pc, #20]	; (8001068 <HAL_I2C_MspInit+0x80>)
 8001052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001054:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001058:	60fb      	str	r3, [r7, #12]
 800105a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800105c:	bf00      	nop
 800105e:	3728      	adds	r7, #40	; 0x28
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	40005800 	.word	0x40005800
 8001068:	40023800 	.word	0x40023800
 800106c:	40020400 	.word	0x40020400

08001070 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4a08      	ldr	r2, [pc, #32]	; (80010a0 <HAL_I2C_MspDeInit+0x30>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d10a      	bne.n	8001098 <HAL_I2C_MspDeInit+0x28>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 8001082:	4b08      	ldr	r3, [pc, #32]	; (80010a4 <HAL_I2C_MspDeInit+0x34>)
 8001084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001086:	4a07      	ldr	r2, [pc, #28]	; (80010a4 <HAL_I2C_MspDeInit+0x34>)
 8001088:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800108c:	6253      	str	r3, [r2, #36]	; 0x24
  
    /**I2C2 GPIO Configuration    
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA 
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10|GPIO_PIN_11);
 800108e:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8001092:	4805      	ldr	r0, [pc, #20]	; (80010a8 <HAL_I2C_MspDeInit+0x38>)
 8001094:	f000 fc90 	bl	80019b8 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 8001098:	bf00      	nop
 800109a:	3708      	adds	r7, #8
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	40005800 	.word	0x40005800
 80010a4:	40023800 	.word	0x40023800
 80010a8:	40020400 	.word	0x40020400

080010ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b08a      	sub	sp, #40	; 0x28
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b4:	f107 0314 	add.w	r3, r7, #20
 80010b8:	2200      	movs	r2, #0
 80010ba:	601a      	str	r2, [r3, #0]
 80010bc:	605a      	str	r2, [r3, #4]
 80010be:	609a      	str	r2, [r3, #8]
 80010c0:	60da      	str	r2, [r3, #12]
 80010c2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4a1b      	ldr	r2, [pc, #108]	; (8001138 <HAL_UART_MspInit+0x8c>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d130      	bne.n	8001130 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80010ce:	4b1b      	ldr	r3, [pc, #108]	; (800113c <HAL_UART_MspInit+0x90>)
 80010d0:	6a1b      	ldr	r3, [r3, #32]
 80010d2:	4a1a      	ldr	r2, [pc, #104]	; (800113c <HAL_UART_MspInit+0x90>)
 80010d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010d8:	6213      	str	r3, [r2, #32]
 80010da:	4b18      	ldr	r3, [pc, #96]	; (800113c <HAL_UART_MspInit+0x90>)
 80010dc:	6a1b      	ldr	r3, [r3, #32]
 80010de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010e2:	613b      	str	r3, [r7, #16]
 80010e4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010e6:	4b15      	ldr	r3, [pc, #84]	; (800113c <HAL_UART_MspInit+0x90>)
 80010e8:	69db      	ldr	r3, [r3, #28]
 80010ea:	4a14      	ldr	r2, [pc, #80]	; (800113c <HAL_UART_MspInit+0x90>)
 80010ec:	f043 0301 	orr.w	r3, r3, #1
 80010f0:	61d3      	str	r3, [r2, #28]
 80010f2:	4b12      	ldr	r3, [pc, #72]	; (800113c <HAL_UART_MspInit+0x90>)
 80010f4:	69db      	ldr	r3, [r3, #28]
 80010f6:	f003 0301 	and.w	r3, r3, #1
 80010fa:	60fb      	str	r3, [r7, #12]
 80010fc:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80010fe:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001102:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001104:	2302      	movs	r3, #2
 8001106:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001108:	2300      	movs	r3, #0
 800110a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800110c:	2303      	movs	r3, #3
 800110e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001110:	2307      	movs	r3, #7
 8001112:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001114:	f107 0314 	add.w	r3, r7, #20
 8001118:	4619      	mov	r1, r3
 800111a:	4809      	ldr	r0, [pc, #36]	; (8001140 <HAL_UART_MspInit+0x94>)
 800111c:	f000 face 	bl	80016bc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001120:	2200      	movs	r2, #0
 8001122:	2100      	movs	r1, #0
 8001124:	2025      	movs	r0, #37	; 0x25
 8001126:	f000 fa52 	bl	80015ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800112a:	2025      	movs	r0, #37	; 0x25
 800112c:	f000 fa6b 	bl	8001606 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001130:	bf00      	nop
 8001132:	3728      	adds	r7, #40	; 0x28
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}
 8001138:	40013800 	.word	0x40013800
 800113c:	40023800 	.word	0x40023800
 8001140:	40020000 	.word	0x40020000

08001144 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001148:	bf00      	nop
 800114a:	46bd      	mov	sp, r7
 800114c:	bc80      	pop	{r7}
 800114e:	4770      	bx	lr

08001150 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001154:	e7fe      	b.n	8001154 <HardFault_Handler+0x4>

08001156 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001156:	b480      	push	{r7}
 8001158:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800115a:	e7fe      	b.n	800115a <MemManage_Handler+0x4>

0800115c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001160:	e7fe      	b.n	8001160 <BusFault_Handler+0x4>

08001162 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001162:	b480      	push	{r7}
 8001164:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001166:	e7fe      	b.n	8001166 <UsageFault_Handler+0x4>

08001168 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800116c:	bf00      	nop
 800116e:	46bd      	mov	sp, r7
 8001170:	bc80      	pop	{r7}
 8001172:	4770      	bx	lr

08001174 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001178:	bf00      	nop
 800117a:	46bd      	mov	sp, r7
 800117c:	bc80      	pop	{r7}
 800117e:	4770      	bx	lr

08001180 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001184:	bf00      	nop
 8001186:	46bd      	mov	sp, r7
 8001188:	bc80      	pop	{r7}
 800118a:	4770      	bx	lr

0800118c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001190:	f000 f8ec 	bl	800136c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001194:	bf00      	nop
 8001196:	bd80      	pop	{r7, pc}

08001198 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800119c:	4802      	ldr	r0, [pc, #8]	; (80011a8 <USART1_IRQHandler+0x10>)
 800119e:	f002 fba7 	bl	80038f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80011a2:	bf00      	nop
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	20000100 	.word	0x20000100

080011ac <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80011b0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80011b4:	f000 fd28 	bl	8001c08 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80011b8:	bf00      	nop
 80011ba:	bd80      	pop	{r7, pc}

080011bc <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b084      	sub	sp, #16
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80011c4:	4b11      	ldr	r3, [pc, #68]	; (800120c <_sbrk+0x50>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d102      	bne.n	80011d2 <_sbrk+0x16>
		heap_end = &end;
 80011cc:	4b0f      	ldr	r3, [pc, #60]	; (800120c <_sbrk+0x50>)
 80011ce:	4a10      	ldr	r2, [pc, #64]	; (8001210 <_sbrk+0x54>)
 80011d0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80011d2:	4b0e      	ldr	r3, [pc, #56]	; (800120c <_sbrk+0x50>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80011d8:	4b0c      	ldr	r3, [pc, #48]	; (800120c <_sbrk+0x50>)
 80011da:	681a      	ldr	r2, [r3, #0]
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	4413      	add	r3, r2
 80011e0:	466a      	mov	r2, sp
 80011e2:	4293      	cmp	r3, r2
 80011e4:	d907      	bls.n	80011f6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80011e6:	f002 ff79 	bl	80040dc <__errno>
 80011ea:	4602      	mov	r2, r0
 80011ec:	230c      	movs	r3, #12
 80011ee:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80011f0:	f04f 33ff 	mov.w	r3, #4294967295
 80011f4:	e006      	b.n	8001204 <_sbrk+0x48>
	}

	heap_end += incr;
 80011f6:	4b05      	ldr	r3, [pc, #20]	; (800120c <_sbrk+0x50>)
 80011f8:	681a      	ldr	r2, [r3, #0]
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	4413      	add	r3, r2
 80011fe:	4a03      	ldr	r2, [pc, #12]	; (800120c <_sbrk+0x50>)
 8001200:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001202:	68fb      	ldr	r3, [r7, #12]
}
 8001204:	4618      	mov	r0, r3
 8001206:	3710      	adds	r7, #16
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}
 800120c:	200000a0 	.word	0x200000a0
 8001210:	20000148 	.word	0x20000148

08001214 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
  /*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100;
 8001218:	4b15      	ldr	r3, [pc, #84]	; (8001270 <SystemInit+0x5c>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4a14      	ldr	r2, [pc, #80]	; (8001270 <SystemInit+0x5c>)
 800121e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001222:	6013      	str	r3, [r2, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t)0x88FFC00C;
 8001224:	4b12      	ldr	r3, [pc, #72]	; (8001270 <SystemInit+0x5c>)
 8001226:	689a      	ldr	r2, [r3, #8]
 8001228:	4911      	ldr	r1, [pc, #68]	; (8001270 <SystemInit+0x5c>)
 800122a:	4b12      	ldr	r3, [pc, #72]	; (8001274 <SystemInit+0x60>)
 800122c:	4013      	ands	r3, r2
 800122e:	608b      	str	r3, [r1, #8]
  
  /*!< Reset HSION, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xEEFEFFFE;
 8001230:	4b0f      	ldr	r3, [pc, #60]	; (8001270 <SystemInit+0x5c>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4a0e      	ldr	r2, [pc, #56]	; (8001270 <SystemInit+0x5c>)
 8001236:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 800123a:	f023 1301 	bic.w	r3, r3, #65537	; 0x10001
 800123e:	6013      	str	r3, [r2, #0]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001240:	4b0b      	ldr	r3, [pc, #44]	; (8001270 <SystemInit+0x5c>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4a0a      	ldr	r2, [pc, #40]	; (8001270 <SystemInit+0x5c>)
 8001246:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800124a:	6013      	str	r3, [r2, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFF;
 800124c:	4b08      	ldr	r3, [pc, #32]	; (8001270 <SystemInit+0x5c>)
 800124e:	689b      	ldr	r3, [r3, #8]
 8001250:	4a07      	ldr	r2, [pc, #28]	; (8001270 <SystemInit+0x5c>)
 8001252:	f423 037d 	bic.w	r3, r3, #16580608	; 0xfd0000
 8001256:	6093      	str	r3, [r2, #8]

  /*!< Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001258:	4b05      	ldr	r3, [pc, #20]	; (8001270 <SystemInit+0x5c>)
 800125a:	2200      	movs	r2, #0
 800125c:	60da      	str	r2, [r3, #12]
#endif /* DATA_IN_ExtSRAM */
    
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800125e:	4b06      	ldr	r3, [pc, #24]	; (8001278 <SystemInit+0x64>)
 8001260:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001264:	609a      	str	r2, [r3, #8]
#endif
}
 8001266:	bf00      	nop
 8001268:	46bd      	mov	sp, r7
 800126a:	bc80      	pop	{r7}
 800126c:	4770      	bx	lr
 800126e:	bf00      	nop
 8001270:	40023800 	.word	0x40023800
 8001274:	88ffc00c 	.word	0x88ffc00c
 8001278:	e000ed00 	.word	0xe000ed00

0800127c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800127c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800127e:	e003      	b.n	8001288 <LoopCopyDataInit>

08001280 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001280:	4b0b      	ldr	r3, [pc, #44]	; (80012b0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001282:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001284:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001286:	3104      	adds	r1, #4

08001288 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001288:	480a      	ldr	r0, [pc, #40]	; (80012b4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800128a:	4b0b      	ldr	r3, [pc, #44]	; (80012b8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800128c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800128e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001290:	d3f6      	bcc.n	8001280 <CopyDataInit>
  ldr r2, =_sbss
 8001292:	4a0a      	ldr	r2, [pc, #40]	; (80012bc <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001294:	e002      	b.n	800129c <LoopFillZerobss>

08001296 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001296:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001298:	f842 3b04 	str.w	r3, [r2], #4

0800129c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800129c:	4b08      	ldr	r3, [pc, #32]	; (80012c0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800129e:	429a      	cmp	r2, r3
  bcc FillZerobss
 80012a0:	d3f9      	bcc.n	8001296 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80012a2:	f7ff ffb7 	bl	8001214 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012a6:	f002 ff1f 	bl	80040e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80012aa:	f7ff fb69 	bl	8000980 <main>
  bx lr
 80012ae:	4770      	bx	lr
  ldr r3, =_sidata
 80012b0:	08004318 	.word	0x08004318
  ldr r0, =_sdata
 80012b4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80012b8:	20000078 	.word	0x20000078
  ldr r2, =_sbss
 80012bc:	20000078 	.word	0x20000078
  ldr r3, = _ebss
 80012c0:	20000148 	.word	0x20000148

080012c4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80012c4:	e7fe      	b.n	80012c4 <ADC1_IRQHandler>

080012c6 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012c6:	b580      	push	{r7, lr}
 80012c8:	b082      	sub	sp, #8
 80012ca:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80012cc:	2300      	movs	r3, #0
 80012ce:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012d0:	2003      	movs	r0, #3
 80012d2:	f000 f971 	bl	80015b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80012d6:	2000      	movs	r0, #0
 80012d8:	f000 f80e 	bl	80012f8 <HAL_InitTick>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d002      	beq.n	80012e8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80012e2:	2301      	movs	r3, #1
 80012e4:	71fb      	strb	r3, [r7, #7]
 80012e6:	e001      	b.n	80012ec <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80012e8:	f7ff fe50 	bl	8000f8c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80012ec:	79fb      	ldrb	r3, [r7, #7]
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	3708      	adds	r7, #8
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
	...

080012f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b084      	sub	sp, #16
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001300:	2300      	movs	r3, #0
 8001302:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001304:	4b16      	ldr	r3, [pc, #88]	; (8001360 <HAL_InitTick+0x68>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d022      	beq.n	8001352 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800130c:	4b15      	ldr	r3, [pc, #84]	; (8001364 <HAL_InitTick+0x6c>)
 800130e:	681a      	ldr	r2, [r3, #0]
 8001310:	4b13      	ldr	r3, [pc, #76]	; (8001360 <HAL_InitTick+0x68>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001318:	fbb1 f3f3 	udiv	r3, r1, r3
 800131c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001320:	4618      	mov	r0, r3
 8001322:	f000 f97e 	bl	8001622 <HAL_SYSTICK_Config>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d10f      	bne.n	800134c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	2b0f      	cmp	r3, #15
 8001330:	d809      	bhi.n	8001346 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001332:	2200      	movs	r2, #0
 8001334:	6879      	ldr	r1, [r7, #4]
 8001336:	f04f 30ff 	mov.w	r0, #4294967295
 800133a:	f000 f948 	bl	80015ce <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800133e:	4a0a      	ldr	r2, [pc, #40]	; (8001368 <HAL_InitTick+0x70>)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	6013      	str	r3, [r2, #0]
 8001344:	e007      	b.n	8001356 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001346:	2301      	movs	r3, #1
 8001348:	73fb      	strb	r3, [r7, #15]
 800134a:	e004      	b.n	8001356 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800134c:	2301      	movs	r3, #1
 800134e:	73fb      	strb	r3, [r7, #15]
 8001350:	e001      	b.n	8001356 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001352:	2301      	movs	r3, #1
 8001354:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001356:	7bfb      	ldrb	r3, [r7, #15]
}
 8001358:	4618      	mov	r0, r3
 800135a:	3710      	adds	r7, #16
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}
 8001360:	20000010 	.word	0x20000010
 8001364:	20000008 	.word	0x20000008
 8001368:	2000000c 	.word	0x2000000c

0800136c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001370:	4b05      	ldr	r3, [pc, #20]	; (8001388 <HAL_IncTick+0x1c>)
 8001372:	681a      	ldr	r2, [r3, #0]
 8001374:	4b05      	ldr	r3, [pc, #20]	; (800138c <HAL_IncTick+0x20>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4413      	add	r3, r2
 800137a:	4a03      	ldr	r2, [pc, #12]	; (8001388 <HAL_IncTick+0x1c>)
 800137c:	6013      	str	r3, [r2, #0]
}
 800137e:	bf00      	nop
 8001380:	46bd      	mov	sp, r7
 8001382:	bc80      	pop	{r7}
 8001384:	4770      	bx	lr
 8001386:	bf00      	nop
 8001388:	20000140 	.word	0x20000140
 800138c:	20000010 	.word	0x20000010

08001390 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0
  return uwTick;
 8001394:	4b02      	ldr	r3, [pc, #8]	; (80013a0 <HAL_GetTick+0x10>)
 8001396:	681b      	ldr	r3, [r3, #0]
}
 8001398:	4618      	mov	r0, r3
 800139a:	46bd      	mov	sp, r7
 800139c:	bc80      	pop	{r7}
 800139e:	4770      	bx	lr
 80013a0:	20000140 	.word	0x20000140

080013a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b084      	sub	sp, #16
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013ac:	f7ff fff0 	bl	8001390 <HAL_GetTick>
 80013b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013bc:	d004      	beq.n	80013c8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80013be:	4b09      	ldr	r3, [pc, #36]	; (80013e4 <HAL_Delay+0x40>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	68fa      	ldr	r2, [r7, #12]
 80013c4:	4413      	add	r3, r2
 80013c6:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80013c8:	bf00      	nop
 80013ca:	f7ff ffe1 	bl	8001390 <HAL_GetTick>
 80013ce:	4602      	mov	r2, r0
 80013d0:	68bb      	ldr	r3, [r7, #8]
 80013d2:	1ad3      	subs	r3, r2, r3
 80013d4:	68fa      	ldr	r2, [r7, #12]
 80013d6:	429a      	cmp	r2, r3
 80013d8:	d8f7      	bhi.n	80013ca <HAL_Delay+0x26>
  {
  }
}
 80013da:	bf00      	nop
 80013dc:	3710      	adds	r7, #16
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	20000010 	.word	0x20000010

080013e8 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 80013e8:	b480      	push	{r7}
 80013ea:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Msk);
 80013ec:	4b04      	ldr	r3, [pc, #16]	; (8001400 <HAL_SuspendTick+0x18>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4a03      	ldr	r2, [pc, #12]	; (8001400 <HAL_SuspendTick+0x18>)
 80013f2:	f023 0302 	bic.w	r3, r3, #2
 80013f6:	6013      	str	r3, [r2, #0]
}
 80013f8:	bf00      	nop
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bc80      	pop	{r7}
 80013fe:	4770      	bx	lr
 8001400:	e000e010 	.word	0xe000e010

08001404 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Msk);
 8001408:	4b04      	ldr	r3, [pc, #16]	; (800141c <HAL_ResumeTick+0x18>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4a03      	ldr	r2, [pc, #12]	; (800141c <HAL_ResumeTick+0x18>)
 800140e:	f043 0302 	orr.w	r3, r3, #2
 8001412:	6013      	str	r3, [r2, #0]
}
 8001414:	bf00      	nop
 8001416:	46bd      	mov	sp, r7
 8001418:	bc80      	pop	{r7}
 800141a:	4770      	bx	lr
 800141c:	e000e010 	.word	0xe000e010

08001420 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001420:	b480      	push	{r7}
 8001422:	b085      	sub	sp, #20
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	f003 0307 	and.w	r3, r3, #7
 800142e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001430:	4b0c      	ldr	r3, [pc, #48]	; (8001464 <__NVIC_SetPriorityGrouping+0x44>)
 8001432:	68db      	ldr	r3, [r3, #12]
 8001434:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001436:	68ba      	ldr	r2, [r7, #8]
 8001438:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800143c:	4013      	ands	r3, r2
 800143e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001444:	68bb      	ldr	r3, [r7, #8]
 8001446:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001448:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800144c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001450:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001452:	4a04      	ldr	r2, [pc, #16]	; (8001464 <__NVIC_SetPriorityGrouping+0x44>)
 8001454:	68bb      	ldr	r3, [r7, #8]
 8001456:	60d3      	str	r3, [r2, #12]
}
 8001458:	bf00      	nop
 800145a:	3714      	adds	r7, #20
 800145c:	46bd      	mov	sp, r7
 800145e:	bc80      	pop	{r7}
 8001460:	4770      	bx	lr
 8001462:	bf00      	nop
 8001464:	e000ed00 	.word	0xe000ed00

08001468 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800146c:	4b04      	ldr	r3, [pc, #16]	; (8001480 <__NVIC_GetPriorityGrouping+0x18>)
 800146e:	68db      	ldr	r3, [r3, #12]
 8001470:	0a1b      	lsrs	r3, r3, #8
 8001472:	f003 0307 	and.w	r3, r3, #7
}
 8001476:	4618      	mov	r0, r3
 8001478:	46bd      	mov	sp, r7
 800147a:	bc80      	pop	{r7}
 800147c:	4770      	bx	lr
 800147e:	bf00      	nop
 8001480:	e000ed00 	.word	0xe000ed00

08001484 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001484:	b480      	push	{r7}
 8001486:	b083      	sub	sp, #12
 8001488:	af00      	add	r7, sp, #0
 800148a:	4603      	mov	r3, r0
 800148c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800148e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001492:	2b00      	cmp	r3, #0
 8001494:	db0b      	blt.n	80014ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001496:	79fb      	ldrb	r3, [r7, #7]
 8001498:	f003 021f 	and.w	r2, r3, #31
 800149c:	4906      	ldr	r1, [pc, #24]	; (80014b8 <__NVIC_EnableIRQ+0x34>)
 800149e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014a2:	095b      	lsrs	r3, r3, #5
 80014a4:	2001      	movs	r0, #1
 80014a6:	fa00 f202 	lsl.w	r2, r0, r2
 80014aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80014ae:	bf00      	nop
 80014b0:	370c      	adds	r7, #12
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bc80      	pop	{r7}
 80014b6:	4770      	bx	lr
 80014b8:	e000e100 	.word	0xe000e100

080014bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014bc:	b480      	push	{r7}
 80014be:	b083      	sub	sp, #12
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	4603      	mov	r3, r0
 80014c4:	6039      	str	r1, [r7, #0]
 80014c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	db0a      	blt.n	80014e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	b2da      	uxtb	r2, r3
 80014d4:	490c      	ldr	r1, [pc, #48]	; (8001508 <__NVIC_SetPriority+0x4c>)
 80014d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014da:	0112      	lsls	r2, r2, #4
 80014dc:	b2d2      	uxtb	r2, r2
 80014de:	440b      	add	r3, r1
 80014e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014e4:	e00a      	b.n	80014fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	b2da      	uxtb	r2, r3
 80014ea:	4908      	ldr	r1, [pc, #32]	; (800150c <__NVIC_SetPriority+0x50>)
 80014ec:	79fb      	ldrb	r3, [r7, #7]
 80014ee:	f003 030f 	and.w	r3, r3, #15
 80014f2:	3b04      	subs	r3, #4
 80014f4:	0112      	lsls	r2, r2, #4
 80014f6:	b2d2      	uxtb	r2, r2
 80014f8:	440b      	add	r3, r1
 80014fa:	761a      	strb	r2, [r3, #24]
}
 80014fc:	bf00      	nop
 80014fe:	370c      	adds	r7, #12
 8001500:	46bd      	mov	sp, r7
 8001502:	bc80      	pop	{r7}
 8001504:	4770      	bx	lr
 8001506:	bf00      	nop
 8001508:	e000e100 	.word	0xe000e100
 800150c:	e000ed00 	.word	0xe000ed00

08001510 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001510:	b480      	push	{r7}
 8001512:	b089      	sub	sp, #36	; 0x24
 8001514:	af00      	add	r7, sp, #0
 8001516:	60f8      	str	r0, [r7, #12]
 8001518:	60b9      	str	r1, [r7, #8]
 800151a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	f003 0307 	and.w	r3, r3, #7
 8001522:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001524:	69fb      	ldr	r3, [r7, #28]
 8001526:	f1c3 0307 	rsb	r3, r3, #7
 800152a:	2b04      	cmp	r3, #4
 800152c:	bf28      	it	cs
 800152e:	2304      	movcs	r3, #4
 8001530:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001532:	69fb      	ldr	r3, [r7, #28]
 8001534:	3304      	adds	r3, #4
 8001536:	2b06      	cmp	r3, #6
 8001538:	d902      	bls.n	8001540 <NVIC_EncodePriority+0x30>
 800153a:	69fb      	ldr	r3, [r7, #28]
 800153c:	3b03      	subs	r3, #3
 800153e:	e000      	b.n	8001542 <NVIC_EncodePriority+0x32>
 8001540:	2300      	movs	r3, #0
 8001542:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001544:	f04f 32ff 	mov.w	r2, #4294967295
 8001548:	69bb      	ldr	r3, [r7, #24]
 800154a:	fa02 f303 	lsl.w	r3, r2, r3
 800154e:	43da      	mvns	r2, r3
 8001550:	68bb      	ldr	r3, [r7, #8]
 8001552:	401a      	ands	r2, r3
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001558:	f04f 31ff 	mov.w	r1, #4294967295
 800155c:	697b      	ldr	r3, [r7, #20]
 800155e:	fa01 f303 	lsl.w	r3, r1, r3
 8001562:	43d9      	mvns	r1, r3
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001568:	4313      	orrs	r3, r2
         );
}
 800156a:	4618      	mov	r0, r3
 800156c:	3724      	adds	r7, #36	; 0x24
 800156e:	46bd      	mov	sp, r7
 8001570:	bc80      	pop	{r7}
 8001572:	4770      	bx	lr

08001574 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b082      	sub	sp, #8
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	3b01      	subs	r3, #1
 8001580:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001584:	d301      	bcc.n	800158a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001586:	2301      	movs	r3, #1
 8001588:	e00f      	b.n	80015aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800158a:	4a0a      	ldr	r2, [pc, #40]	; (80015b4 <SysTick_Config+0x40>)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	3b01      	subs	r3, #1
 8001590:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001592:	210f      	movs	r1, #15
 8001594:	f04f 30ff 	mov.w	r0, #4294967295
 8001598:	f7ff ff90 	bl	80014bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800159c:	4b05      	ldr	r3, [pc, #20]	; (80015b4 <SysTick_Config+0x40>)
 800159e:	2200      	movs	r2, #0
 80015a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015a2:	4b04      	ldr	r3, [pc, #16]	; (80015b4 <SysTick_Config+0x40>)
 80015a4:	2207      	movs	r2, #7
 80015a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015a8:	2300      	movs	r3, #0
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	3708      	adds	r7, #8
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	e000e010 	.word	0xe000e010

080015b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b082      	sub	sp, #8
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015c0:	6878      	ldr	r0, [r7, #4]
 80015c2:	f7ff ff2d 	bl	8001420 <__NVIC_SetPriorityGrouping>
}
 80015c6:	bf00      	nop
 80015c8:	3708      	adds	r7, #8
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}

080015ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015ce:	b580      	push	{r7, lr}
 80015d0:	b086      	sub	sp, #24
 80015d2:	af00      	add	r7, sp, #0
 80015d4:	4603      	mov	r3, r0
 80015d6:	60b9      	str	r1, [r7, #8]
 80015d8:	607a      	str	r2, [r7, #4]
 80015da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80015dc:	2300      	movs	r3, #0
 80015de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015e0:	f7ff ff42 	bl	8001468 <__NVIC_GetPriorityGrouping>
 80015e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015e6:	687a      	ldr	r2, [r7, #4]
 80015e8:	68b9      	ldr	r1, [r7, #8]
 80015ea:	6978      	ldr	r0, [r7, #20]
 80015ec:	f7ff ff90 	bl	8001510 <NVIC_EncodePriority>
 80015f0:	4602      	mov	r2, r0
 80015f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015f6:	4611      	mov	r1, r2
 80015f8:	4618      	mov	r0, r3
 80015fa:	f7ff ff5f 	bl	80014bc <__NVIC_SetPriority>
}
 80015fe:	bf00      	nop
 8001600:	3718      	adds	r7, #24
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}

08001606 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001606:	b580      	push	{r7, lr}
 8001608:	b082      	sub	sp, #8
 800160a:	af00      	add	r7, sp, #0
 800160c:	4603      	mov	r3, r0
 800160e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001610:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001614:	4618      	mov	r0, r3
 8001616:	f7ff ff35 	bl	8001484 <__NVIC_EnableIRQ>
}
 800161a:	bf00      	nop
 800161c:	3708      	adds	r7, #8
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}

08001622 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001622:	b580      	push	{r7, lr}
 8001624:	b082      	sub	sp, #8
 8001626:	af00      	add	r7, sp, #0
 8001628:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800162a:	6878      	ldr	r0, [r7, #4]
 800162c:	f7ff ffa2 	bl	8001574 <SysTick_Config>
 8001630:	4603      	mov	r3, r0
}
 8001632:	4618      	mov	r0, r3
 8001634:	3708      	adds	r7, #8
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}

0800163a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800163a:	b580      	push	{r7, lr}
 800163c:	b084      	sub	sp, #16
 800163e:	af00      	add	r7, sp, #0
 8001640:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001642:	2300      	movs	r3, #0
 8001644:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800164c:	b2db      	uxtb	r3, r3
 800164e:	2b02      	cmp	r3, #2
 8001650:	d005      	beq.n	800165e <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2204      	movs	r2, #4
 8001656:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 8001658:	2301      	movs	r3, #1
 800165a:	73fb      	strb	r3, [r7, #15]
 800165c:	e029      	b.n	80016b2 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	681a      	ldr	r2, [r3, #0]
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f022 020e 	bic.w	r2, r2, #14
 800166c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	681a      	ldr	r2, [r3, #0]
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f022 0201 	bic.w	r2, r2, #1
 800167c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001682:	f003 021c 	and.w	r2, r3, #28
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800168a:	2101      	movs	r1, #1
 800168c:	fa01 f202 	lsl.w	r2, r1, r2
 8001690:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2201      	movs	r2, #1
 8001696:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	2200      	movs	r2, #0
 800169e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d003      	beq.n	80016b2 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016ae:	6878      	ldr	r0, [r7, #4]
 80016b0:	4798      	blx	r3
    }
  }
  return status;
 80016b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	3710      	adds	r7, #16
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}

080016bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 80016bc:	b480      	push	{r7}
 80016be:	b087      	sub	sp, #28
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
 80016c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80016c6:	2300      	movs	r3, #0
 80016c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80016ca:	2300      	movs	r3, #0
 80016cc:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 80016ce:	2300      	movs	r3, #0
 80016d0:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80016d2:	e154      	b.n	800197e <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	681a      	ldr	r2, [r3, #0]
 80016d8:	2101      	movs	r1, #1
 80016da:	697b      	ldr	r3, [r7, #20]
 80016dc:	fa01 f303 	lsl.w	r3, r1, r3
 80016e0:	4013      	ands	r3, r2
 80016e2:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	f000 8146 	beq.w	8001978 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	2b02      	cmp	r3, #2
 80016f2:	d003      	beq.n	80016fc <HAL_GPIO_Init+0x40>
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	2b12      	cmp	r3, #18
 80016fa:	d123      	bne.n	8001744 <HAL_GPIO_Init+0x88>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */ 
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	08da      	lsrs	r2, r3, #3
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	3208      	adds	r2, #8
 8001704:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001708:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;      
 800170a:	697b      	ldr	r3, [r7, #20]
 800170c:	f003 0307 	and.w	r3, r3, #7
 8001710:	009b      	lsls	r3, r3, #2
 8001712:	220f      	movs	r2, #15
 8001714:	fa02 f303 	lsl.w	r3, r2, r3
 8001718:	43db      	mvns	r3, r3
 800171a:	693a      	ldr	r2, [r7, #16]
 800171c:	4013      	ands	r3, r2
 800171e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));       
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	691a      	ldr	r2, [r3, #16]
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	f003 0307 	and.w	r3, r3, #7
 800172a:	009b      	lsls	r3, r3, #2
 800172c:	fa02 f303 	lsl.w	r3, r2, r3
 8001730:	693a      	ldr	r2, [r7, #16]
 8001732:	4313      	orrs	r3, r2
 8001734:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8001736:	697b      	ldr	r3, [r7, #20]
 8001738:	08da      	lsrs	r2, r3, #3
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	3208      	adds	r2, #8
 800173e:	6939      	ldr	r1, [r7, #16]
 8001740:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 800174a:	697b      	ldr	r3, [r7, #20]
 800174c:	005b      	lsls	r3, r3, #1
 800174e:	2203      	movs	r2, #3
 8001750:	fa02 f303 	lsl.w	r3, r2, r3
 8001754:	43db      	mvns	r3, r3
 8001756:	693a      	ldr	r2, [r7, #16]
 8001758:	4013      	ands	r3, r2
 800175a:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	f003 0203 	and.w	r2, r3, #3
 8001764:	697b      	ldr	r3, [r7, #20]
 8001766:	005b      	lsls	r3, r3, #1
 8001768:	fa02 f303 	lsl.w	r3, r2, r3
 800176c:	693a      	ldr	r2, [r7, #16]
 800176e:	4313      	orrs	r3, r2
 8001770:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	693a      	ldr	r2, [r7, #16]
 8001776:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	2b01      	cmp	r3, #1
 800177e:	d00b      	beq.n	8001798 <HAL_GPIO_Init+0xdc>
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	2b02      	cmp	r3, #2
 8001786:	d007      	beq.n	8001798 <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800178c:	2b11      	cmp	r3, #17
 800178e:	d003      	beq.n	8001798 <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	2b12      	cmp	r3, #18
 8001796:	d130      	bne.n	80017fa <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	689b      	ldr	r3, [r3, #8]
 800179c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800179e:	697b      	ldr	r3, [r7, #20]
 80017a0:	005b      	lsls	r3, r3, #1
 80017a2:	2203      	movs	r2, #3
 80017a4:	fa02 f303 	lsl.w	r3, r2, r3
 80017a8:	43db      	mvns	r3, r3
 80017aa:	693a      	ldr	r2, [r7, #16]
 80017ac:	4013      	ands	r3, r2
 80017ae:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	68da      	ldr	r2, [r3, #12]
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	005b      	lsls	r3, r3, #1
 80017b8:	fa02 f303 	lsl.w	r3, r2, r3
 80017bc:	693a      	ldr	r2, [r7, #16]
 80017be:	4313      	orrs	r3, r2
 80017c0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	693a      	ldr	r2, [r7, #16]
 80017c6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 80017ce:	2201      	movs	r2, #1
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	fa02 f303 	lsl.w	r3, r2, r3
 80017d6:	43db      	mvns	r3, r3
 80017d8:	693a      	ldr	r2, [r7, #16]
 80017da:	4013      	ands	r3, r2
 80017dc:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	091b      	lsrs	r3, r3, #4
 80017e4:	f003 0201 	and.w	r2, r3, #1
 80017e8:	697b      	ldr	r3, [r7, #20]
 80017ea:	fa02 f303 	lsl.w	r3, r2, r3
 80017ee:	693a      	ldr	r2, [r7, #16]
 80017f0:	4313      	orrs	r3, r2
 80017f2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	693a      	ldr	r2, [r7, #16]
 80017f8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	68db      	ldr	r3, [r3, #12]
 80017fe:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	005b      	lsls	r3, r3, #1
 8001804:	2203      	movs	r2, #3
 8001806:	fa02 f303 	lsl.w	r3, r2, r3
 800180a:	43db      	mvns	r3, r3
 800180c:	693a      	ldr	r2, [r7, #16]
 800180e:	4013      	ands	r3, r2
 8001810:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	689a      	ldr	r2, [r3, #8]
 8001816:	697b      	ldr	r3, [r7, #20]
 8001818:	005b      	lsls	r3, r3, #1
 800181a:	fa02 f303 	lsl.w	r3, r2, r3
 800181e:	693a      	ldr	r2, [r7, #16]
 8001820:	4313      	orrs	r3, r2
 8001822:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	693a      	ldr	r2, [r7, #16]
 8001828:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001832:	2b00      	cmp	r3, #0
 8001834:	f000 80a0 	beq.w	8001978 <HAL_GPIO_Init+0x2bc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001838:	4b57      	ldr	r3, [pc, #348]	; (8001998 <HAL_GPIO_Init+0x2dc>)
 800183a:	6a1b      	ldr	r3, [r3, #32]
 800183c:	4a56      	ldr	r2, [pc, #344]	; (8001998 <HAL_GPIO_Init+0x2dc>)
 800183e:	f043 0301 	orr.w	r3, r3, #1
 8001842:	6213      	str	r3, [r2, #32]
 8001844:	4b54      	ldr	r3, [pc, #336]	; (8001998 <HAL_GPIO_Init+0x2dc>)
 8001846:	6a1b      	ldr	r3, [r3, #32]
 8001848:	f003 0301 	and.w	r3, r3, #1
 800184c:	60bb      	str	r3, [r7, #8]
 800184e:	68bb      	ldr	r3, [r7, #8]
        
        temp = SYSCFG->EXTICR[position >> 2];
 8001850:	4a52      	ldr	r2, [pc, #328]	; (800199c <HAL_GPIO_Init+0x2e0>)
 8001852:	697b      	ldr	r3, [r7, #20]
 8001854:	089b      	lsrs	r3, r3, #2
 8001856:	3302      	adds	r3, #2
 8001858:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800185c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 800185e:	697b      	ldr	r3, [r7, #20]
 8001860:	f003 0303 	and.w	r3, r3, #3
 8001864:	009b      	lsls	r3, r3, #2
 8001866:	220f      	movs	r2, #15
 8001868:	fa02 f303 	lsl.w	r3, r2, r3
 800186c:	43db      	mvns	r3, r3
 800186e:	693a      	ldr	r2, [r7, #16]
 8001870:	4013      	ands	r3, r2
 8001872:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	4a4a      	ldr	r2, [pc, #296]	; (80019a0 <HAL_GPIO_Init+0x2e4>)
 8001878:	4293      	cmp	r3, r2
 800187a:	d019      	beq.n	80018b0 <HAL_GPIO_Init+0x1f4>
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	4a49      	ldr	r2, [pc, #292]	; (80019a4 <HAL_GPIO_Init+0x2e8>)
 8001880:	4293      	cmp	r3, r2
 8001882:	d013      	beq.n	80018ac <HAL_GPIO_Init+0x1f0>
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	4a48      	ldr	r2, [pc, #288]	; (80019a8 <HAL_GPIO_Init+0x2ec>)
 8001888:	4293      	cmp	r3, r2
 800188a:	d00d      	beq.n	80018a8 <HAL_GPIO_Init+0x1ec>
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	4a47      	ldr	r2, [pc, #284]	; (80019ac <HAL_GPIO_Init+0x2f0>)
 8001890:	4293      	cmp	r3, r2
 8001892:	d007      	beq.n	80018a4 <HAL_GPIO_Init+0x1e8>
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	4a46      	ldr	r2, [pc, #280]	; (80019b0 <HAL_GPIO_Init+0x2f4>)
 8001898:	4293      	cmp	r3, r2
 800189a:	d101      	bne.n	80018a0 <HAL_GPIO_Init+0x1e4>
 800189c:	2304      	movs	r3, #4
 800189e:	e008      	b.n	80018b2 <HAL_GPIO_Init+0x1f6>
 80018a0:	2305      	movs	r3, #5
 80018a2:	e006      	b.n	80018b2 <HAL_GPIO_Init+0x1f6>
 80018a4:	2303      	movs	r3, #3
 80018a6:	e004      	b.n	80018b2 <HAL_GPIO_Init+0x1f6>
 80018a8:	2302      	movs	r3, #2
 80018aa:	e002      	b.n	80018b2 <HAL_GPIO_Init+0x1f6>
 80018ac:	2301      	movs	r3, #1
 80018ae:	e000      	b.n	80018b2 <HAL_GPIO_Init+0x1f6>
 80018b0:	2300      	movs	r3, #0
 80018b2:	697a      	ldr	r2, [r7, #20]
 80018b4:	f002 0203 	and.w	r2, r2, #3
 80018b8:	0092      	lsls	r2, r2, #2
 80018ba:	4093      	lsls	r3, r2
 80018bc:	693a      	ldr	r2, [r7, #16]
 80018be:	4313      	orrs	r3, r2
 80018c0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 80018c2:	4936      	ldr	r1, [pc, #216]	; (800199c <HAL_GPIO_Init+0x2e0>)
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	089b      	lsrs	r3, r3, #2
 80018c8:	3302      	adds	r3, #2
 80018ca:	693a      	ldr	r2, [r7, #16]
 80018cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80018d0:	4b38      	ldr	r3, [pc, #224]	; (80019b4 <HAL_GPIO_Init+0x2f8>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	43db      	mvns	r3, r3
 80018da:	693a      	ldr	r2, [r7, #16]
 80018dc:	4013      	ands	r3, r2
 80018de:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d003      	beq.n	80018f4 <HAL_GPIO_Init+0x238>
        {
          SET_BIT(temp, iocurrent); 
 80018ec:	693a      	ldr	r2, [r7, #16]
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	4313      	orrs	r3, r2
 80018f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80018f4:	4a2f      	ldr	r2, [pc, #188]	; (80019b4 <HAL_GPIO_Init+0x2f8>)
 80018f6:	693b      	ldr	r3, [r7, #16]
 80018f8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80018fa:	4b2e      	ldr	r3, [pc, #184]	; (80019b4 <HAL_GPIO_Init+0x2f8>)
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	43db      	mvns	r3, r3
 8001904:	693a      	ldr	r2, [r7, #16]
 8001906:	4013      	ands	r3, r2
 8001908:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001912:	2b00      	cmp	r3, #0
 8001914:	d003      	beq.n	800191e <HAL_GPIO_Init+0x262>
        {
          SET_BIT(temp, iocurrent); 
 8001916:	693a      	ldr	r2, [r7, #16]
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	4313      	orrs	r3, r2
 800191c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800191e:	4a25      	ldr	r2, [pc, #148]	; (80019b4 <HAL_GPIO_Init+0x2f8>)
 8001920:	693b      	ldr	r3, [r7, #16]
 8001922:	6053      	str	r3, [r2, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001924:	4b23      	ldr	r3, [pc, #140]	; (80019b4 <HAL_GPIO_Init+0x2f8>)
 8001926:	689b      	ldr	r3, [r3, #8]
 8001928:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	43db      	mvns	r3, r3
 800192e:	693a      	ldr	r2, [r7, #16]
 8001930:	4013      	ands	r3, r2
 8001932:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800193c:	2b00      	cmp	r3, #0
 800193e:	d003      	beq.n	8001948 <HAL_GPIO_Init+0x28c>
        {
          SET_BIT(temp, iocurrent); 
 8001940:	693a      	ldr	r2, [r7, #16]
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	4313      	orrs	r3, r2
 8001946:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001948:	4a1a      	ldr	r2, [pc, #104]	; (80019b4 <HAL_GPIO_Init+0x2f8>)
 800194a:	693b      	ldr	r3, [r7, #16]
 800194c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800194e:	4b19      	ldr	r3, [pc, #100]	; (80019b4 <HAL_GPIO_Init+0x2f8>)
 8001950:	68db      	ldr	r3, [r3, #12]
 8001952:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	43db      	mvns	r3, r3
 8001958:	693a      	ldr	r2, [r7, #16]
 800195a:	4013      	ands	r3, r2
 800195c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001966:	2b00      	cmp	r3, #0
 8001968:	d003      	beq.n	8001972 <HAL_GPIO_Init+0x2b6>
        {
          SET_BIT(temp, iocurrent); 
 800196a:	693a      	ldr	r2, [r7, #16]
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	4313      	orrs	r3, r2
 8001970:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001972:	4a10      	ldr	r2, [pc, #64]	; (80019b4 <HAL_GPIO_Init+0x2f8>)
 8001974:	693b      	ldr	r3, [r7, #16]
 8001976:	60d3      	str	r3, [r2, #12]
      }
    }
    
    position++;
 8001978:	697b      	ldr	r3, [r7, #20]
 800197a:	3301      	adds	r3, #1
 800197c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	681a      	ldr	r2, [r3, #0]
 8001982:	697b      	ldr	r3, [r7, #20]
 8001984:	fa22 f303 	lsr.w	r3, r2, r3
 8001988:	2b00      	cmp	r3, #0
 800198a:	f47f aea3 	bne.w	80016d4 <HAL_GPIO_Init+0x18>
  } 
}
 800198e:	bf00      	nop
 8001990:	371c      	adds	r7, #28
 8001992:	46bd      	mov	sp, r7
 8001994:	bc80      	pop	{r7}
 8001996:	4770      	bx	lr
 8001998:	40023800 	.word	0x40023800
 800199c:	40010000 	.word	0x40010000
 80019a0:	40020000 	.word	0x40020000
 80019a4:	40020400 	.word	0x40020400
 80019a8:	40020800 	.word	0x40020800
 80019ac:	40020c00 	.word	0x40020c00
 80019b0:	40021000 	.word	0x40021000
 80019b4:	40010400 	.word	0x40010400

080019b8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b087      	sub	sp, #28
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
 80019c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80019c2:	2300      	movs	r3, #0
 80019c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80019c6:	2300      	movs	r3, #0
 80019c8:	613b      	str	r3, [r7, #16]
  uint32_t tmp = 0x00;
 80019ca:	2300      	movs	r3, #0
 80019cc:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0)
 80019ce:	e0b8      	b.n	8001b42 <HAL_GPIO_DeInit+0x18a>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1U << position);
 80019d0:	2201      	movs	r2, #1
 80019d2:	697b      	ldr	r3, [r7, #20]
 80019d4:	fa02 f303 	lsl.w	r3, r2, r3
 80019d8:	683a      	ldr	r2, [r7, #0]
 80019da:	4013      	ands	r3, r2
 80019dc:	613b      	str	r3, [r7, #16]

    if (iocurrent)
 80019de:	693b      	ldr	r3, [r7, #16]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	f000 80ab 	beq.w	8001b3c <HAL_GPIO_DeInit+0x184>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      
      tmp = SYSCFG->EXTICR[position >> 2];
 80019e6:	4a5d      	ldr	r2, [pc, #372]	; (8001b5c <HAL_GPIO_DeInit+0x1a4>)
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	089b      	lsrs	r3, r3, #2
 80019ec:	3302      	adds	r3, #2
 80019ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019f2:	60fb      	str	r3, [r7, #12]
      tmp &= ((0x0FU) << (4 * (position & 0x03)));
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	f003 0303 	and.w	r3, r3, #3
 80019fa:	009b      	lsls	r3, r3, #2
 80019fc:	220f      	movs	r2, #15
 80019fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001a02:	68fa      	ldr	r2, [r7, #12]
 8001a04:	4013      	ands	r3, r2
 8001a06:	60fb      	str	r3, [r7, #12]
      if(tmp == (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03))))
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	4a55      	ldr	r2, [pc, #340]	; (8001b60 <HAL_GPIO_DeInit+0x1a8>)
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	d019      	beq.n	8001a44 <HAL_GPIO_DeInit+0x8c>
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	4a54      	ldr	r2, [pc, #336]	; (8001b64 <HAL_GPIO_DeInit+0x1ac>)
 8001a14:	4293      	cmp	r3, r2
 8001a16:	d013      	beq.n	8001a40 <HAL_GPIO_DeInit+0x88>
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	4a53      	ldr	r2, [pc, #332]	; (8001b68 <HAL_GPIO_DeInit+0x1b0>)
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	d00d      	beq.n	8001a3c <HAL_GPIO_DeInit+0x84>
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	4a52      	ldr	r2, [pc, #328]	; (8001b6c <HAL_GPIO_DeInit+0x1b4>)
 8001a24:	4293      	cmp	r3, r2
 8001a26:	d007      	beq.n	8001a38 <HAL_GPIO_DeInit+0x80>
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	4a51      	ldr	r2, [pc, #324]	; (8001b70 <HAL_GPIO_DeInit+0x1b8>)
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d101      	bne.n	8001a34 <HAL_GPIO_DeInit+0x7c>
 8001a30:	2304      	movs	r3, #4
 8001a32:	e008      	b.n	8001a46 <HAL_GPIO_DeInit+0x8e>
 8001a34:	2305      	movs	r3, #5
 8001a36:	e006      	b.n	8001a46 <HAL_GPIO_DeInit+0x8e>
 8001a38:	2303      	movs	r3, #3
 8001a3a:	e004      	b.n	8001a46 <HAL_GPIO_DeInit+0x8e>
 8001a3c:	2302      	movs	r3, #2
 8001a3e:	e002      	b.n	8001a46 <HAL_GPIO_DeInit+0x8e>
 8001a40:	2301      	movs	r3, #1
 8001a42:	e000      	b.n	8001a46 <HAL_GPIO_DeInit+0x8e>
 8001a44:	2300      	movs	r3, #0
 8001a46:	697a      	ldr	r2, [r7, #20]
 8001a48:	f002 0203 	and.w	r2, r2, #3
 8001a4c:	0092      	lsls	r2, r2, #2
 8001a4e:	4093      	lsls	r3, r2
 8001a50:	68fa      	ldr	r2, [r7, #12]
 8001a52:	429a      	cmp	r2, r3
 8001a54:	d132      	bne.n	8001abc <HAL_GPIO_DeInit+0x104>
      {
        tmp = (0x0FU) << (4 * (position & 0x03));
 8001a56:	697b      	ldr	r3, [r7, #20]
 8001a58:	f003 0303 	and.w	r3, r3, #3
 8001a5c:	009b      	lsls	r3, r3, #2
 8001a5e:	220f      	movs	r2, #15
 8001a60:	fa02 f303 	lsl.w	r3, r2, r3
 8001a64:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(SYSCFG->EXTICR[position >> 2], tmp);
 8001a66:	4a3d      	ldr	r2, [pc, #244]	; (8001b5c <HAL_GPIO_DeInit+0x1a4>)
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	089b      	lsrs	r3, r3, #2
 8001a6c:	3302      	adds	r3, #2
 8001a6e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	43da      	mvns	r2, r3
 8001a76:	4839      	ldr	r0, [pc, #228]	; (8001b5c <HAL_GPIO_DeInit+0x1a4>)
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	089b      	lsrs	r3, r3, #2
 8001a7c:	400a      	ands	r2, r1
 8001a7e:	3302      	adds	r3, #2
 8001a80:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
        
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8001a84:	4b3b      	ldr	r3, [pc, #236]	; (8001b74 <HAL_GPIO_DeInit+0x1bc>)
 8001a86:	681a      	ldr	r2, [r3, #0]
 8001a88:	693b      	ldr	r3, [r7, #16]
 8001a8a:	43db      	mvns	r3, r3
 8001a8c:	4939      	ldr	r1, [pc, #228]	; (8001b74 <HAL_GPIO_DeInit+0x1bc>)
 8001a8e:	4013      	ands	r3, r2
 8001a90:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8001a92:	4b38      	ldr	r3, [pc, #224]	; (8001b74 <HAL_GPIO_DeInit+0x1bc>)
 8001a94:	685a      	ldr	r2, [r3, #4]
 8001a96:	693b      	ldr	r3, [r7, #16]
 8001a98:	43db      	mvns	r3, r3
 8001a9a:	4936      	ldr	r1, [pc, #216]	; (8001b74 <HAL_GPIO_DeInit+0x1bc>)
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8001aa0:	4b34      	ldr	r3, [pc, #208]	; (8001b74 <HAL_GPIO_DeInit+0x1bc>)
 8001aa2:	689a      	ldr	r2, [r3, #8]
 8001aa4:	693b      	ldr	r3, [r7, #16]
 8001aa6:	43db      	mvns	r3, r3
 8001aa8:	4932      	ldr	r1, [pc, #200]	; (8001b74 <HAL_GPIO_DeInit+0x1bc>)
 8001aaa:	4013      	ands	r3, r2
 8001aac:	608b      	str	r3, [r1, #8]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8001aae:	4b31      	ldr	r3, [pc, #196]	; (8001b74 <HAL_GPIO_DeInit+0x1bc>)
 8001ab0:	68da      	ldr	r2, [r3, #12]
 8001ab2:	693b      	ldr	r3, [r7, #16]
 8001ab4:	43db      	mvns	r3, r3
 8001ab6:	492f      	ldr	r1, [pc, #188]	; (8001b74 <HAL_GPIO_DeInit+0x1bc>)
 8001ab8:	4013      	ands	r3, r2
 8001aba:	60cb      	str	r3, [r1, #12]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floting Mode */
      CLEAR_BIT(GPIOx->MODER, GPIO_MODER_MODER0 << (position * 2)); 
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681a      	ldr	r2, [r3, #0]
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	005b      	lsls	r3, r3, #1
 8001ac4:	2103      	movs	r1, #3
 8001ac6:	fa01 f303 	lsl.w	r3, r1, r3
 8001aca:	43db      	mvns	r3, r3
 8001acc:	401a      	ands	r2, r3
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	601a      	str	r2, [r3, #0]
  
      /* Configure the default Alternate Function in current IO */ 
      CLEAR_BIT(GPIOx->AFR[position >> 3], 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;
 8001ad2:	697b      	ldr	r3, [r7, #20]
 8001ad4:	08da      	lsrs	r2, r3, #3
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	3208      	adds	r2, #8
 8001ada:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001ade:	697b      	ldr	r3, [r7, #20]
 8001ae0:	f003 0307 	and.w	r3, r3, #7
 8001ae4:	009b      	lsls	r3, r3, #2
 8001ae6:	220f      	movs	r2, #15
 8001ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8001aec:	43db      	mvns	r3, r3
 8001aee:	697a      	ldr	r2, [r7, #20]
 8001af0:	08d2      	lsrs	r2, r2, #3
 8001af2:	4019      	ands	r1, r3
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	3208      	adds	r2, #8
 8001af8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
      /* Configure the default value for IO Speed */
      CLEAR_BIT(GPIOx->OSPEEDR, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	689a      	ldr	r2, [r3, #8]
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	005b      	lsls	r3, r3, #1
 8001b04:	2103      	movs	r1, #3
 8001b06:	fa01 f303 	lsl.w	r3, r1, r3
 8001b0a:	43db      	mvns	r3, r3
 8001b0c:	401a      	ands	r2, r3
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	609a      	str	r2, [r3, #8]
                  
      /* Configure the default value IO Output Type */
      CLEAR_BIT(GPIOx->OTYPER, GPIO_OTYPER_OT_0 << position) ;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	685a      	ldr	r2, [r3, #4]
 8001b16:	2101      	movs	r1, #1
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b1e:	43db      	mvns	r3, r3
 8001b20:	401a      	ands	r2, r3
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	605a      	str	r2, [r3, #4]
  
      /* Deactivate the Pull-up oand Pull-down resistor for the current IO */
      CLEAR_BIT(GPIOx->PUPDR, GPIO_PUPDR_PUPDR0 << (position * 2));
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	68da      	ldr	r2, [r3, #12]
 8001b2a:	697b      	ldr	r3, [r7, #20]
 8001b2c:	005b      	lsls	r3, r3, #1
 8001b2e:	2103      	movs	r1, #3
 8001b30:	fa01 f303 	lsl.w	r3, r1, r3
 8001b34:	43db      	mvns	r3, r3
 8001b36:	401a      	ands	r2, r3
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	60da      	str	r2, [r3, #12]
    }

    position++;
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	3301      	adds	r3, #1
 8001b40:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0)
 8001b42:	683a      	ldr	r2, [r7, #0]
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	fa22 f303 	lsr.w	r3, r2, r3
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	f47f af40 	bne.w	80019d0 <HAL_GPIO_DeInit+0x18>
  }
}
 8001b50:	bf00      	nop
 8001b52:	371c      	adds	r7, #28
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bc80      	pop	{r7}
 8001b58:	4770      	bx	lr
 8001b5a:	bf00      	nop
 8001b5c:	40010000 	.word	0x40010000
 8001b60:	40020000 	.word	0x40020000
 8001b64:	40020400 	.word	0x40020400
 8001b68:	40020800 	.word	0x40020800
 8001b6c:	40020c00 	.word	0x40020c00
 8001b70:	40021000 	.word	0x40021000
 8001b74:	40010400 	.word	0x40010400

08001b78 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b085      	sub	sp, #20
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
 8001b80:	460b      	mov	r3, r1
 8001b82:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	691a      	ldr	r2, [r3, #16]
 8001b88:	887b      	ldrh	r3, [r7, #2]
 8001b8a:	4013      	ands	r3, r2
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d002      	beq.n	8001b96 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001b90:	2301      	movs	r3, #1
 8001b92:	73fb      	strb	r3, [r7, #15]
 8001b94:	e001      	b.n	8001b9a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001b96:	2300      	movs	r3, #0
 8001b98:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001b9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	3714      	adds	r7, #20
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bc80      	pop	{r7}
 8001ba4:	4770      	bx	lr

08001ba6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ba6:	b480      	push	{r7}
 8001ba8:	b083      	sub	sp, #12
 8001baa:	af00      	add	r7, sp, #0
 8001bac:	6078      	str	r0, [r7, #4]
 8001bae:	460b      	mov	r3, r1
 8001bb0:	807b      	strh	r3, [r7, #2]
 8001bb2:	4613      	mov	r3, r2
 8001bb4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001bb6:	787b      	ldrb	r3, [r7, #1]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d003      	beq.n	8001bc4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001bbc:	887a      	ldrh	r2, [r7, #2]
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8001bc2:	e003      	b.n	8001bcc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8001bc4:	887b      	ldrh	r3, [r7, #2]
 8001bc6:	041a      	lsls	r2, r3, #16
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	619a      	str	r2, [r3, #24]
}
 8001bcc:	bf00      	nop
 8001bce:	370c      	adds	r7, #12
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bc80      	pop	{r7}
 8001bd4:	4770      	bx	lr

08001bd6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..G depending on device used) to select the GPIO peripheral for STM32L1XX family devices 
  * @param  GPIO_Pin specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001bd6:	b480      	push	{r7}
 8001bd8:	b083      	sub	sp, #12
 8001bda:	af00      	add	r7, sp, #0
 8001bdc:	6078      	str	r0, [r7, #4]
 8001bde:	460b      	mov	r3, r1
 8001be0:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	695a      	ldr	r2, [r3, #20]
 8001be6:	887b      	ldrh	r3, [r7, #2]
 8001be8:	4013      	ands	r3, r2
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d004      	beq.n	8001bf8 <HAL_GPIO_TogglePin+0x22>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001bee:	887b      	ldrh	r3, [r7, #2]
 8001bf0:	041a      	lsls	r2, r3, #16
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8001bf6:	e002      	b.n	8001bfe <HAL_GPIO_TogglePin+0x28>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001bf8:	887a      	ldrh	r2, [r7, #2]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	619a      	str	r2, [r3, #24]
}
 8001bfe:	bf00      	nop
 8001c00:	370c      	adds	r7, #12
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bc80      	pop	{r7}
 8001c06:	4770      	bx	lr

08001c08 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b082      	sub	sp, #8
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	4603      	mov	r3, r0
 8001c10:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 8001c12:	4b08      	ldr	r3, [pc, #32]	; (8001c34 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001c14:	695a      	ldr	r2, [r3, #20]
 8001c16:	88fb      	ldrh	r3, [r7, #6]
 8001c18:	4013      	ands	r3, r2
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d006      	beq.n	8001c2c <HAL_GPIO_EXTI_IRQHandler+0x24>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001c1e:	4a05      	ldr	r2, [pc, #20]	; (8001c34 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001c20:	88fb      	ldrh	r3, [r7, #6]
 8001c22:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001c24:	88fb      	ldrh	r3, [r7, #6]
 8001c26:	4618      	mov	r0, r3
 8001c28:	f7ff f8ac 	bl	8000d84 <HAL_GPIO_EXTI_Callback>
  }
}
 8001c2c:	bf00      	nop
 8001c2e:	3708      	adds	r7, #8
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	40010400 	.word	0x40010400

08001c38 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b084      	sub	sp, #16
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d101      	bne.n	8001c4a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001c46:	2301      	movs	r3, #1
 8001c48:	e10f      	b.n	8001e6a <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c50:	b2db      	uxtb	r3, r3
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d106      	bne.n	8001c64 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2200      	movs	r2, #0
 8001c5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001c5e:	6878      	ldr	r0, [r7, #4]
 8001c60:	f7ff f9c2 	bl	8000fe8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2224      	movs	r2, #36	; 0x24
 8001c68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	681a      	ldr	r2, [r3, #0]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f022 0201 	bic.w	r2, r2, #1
 8001c7a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001c7c:	f001 fc76 	bl	800356c <HAL_RCC_GetPCLK1Freq>
 8001c80:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	4a7b      	ldr	r2, [pc, #492]	; (8001e74 <HAL_I2C_Init+0x23c>)
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	d807      	bhi.n	8001c9c <HAL_I2C_Init+0x64>
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	4a7a      	ldr	r2, [pc, #488]	; (8001e78 <HAL_I2C_Init+0x240>)
 8001c90:	4293      	cmp	r3, r2
 8001c92:	bf94      	ite	ls
 8001c94:	2301      	movls	r3, #1
 8001c96:	2300      	movhi	r3, #0
 8001c98:	b2db      	uxtb	r3, r3
 8001c9a:	e006      	b.n	8001caa <HAL_I2C_Init+0x72>
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	4a77      	ldr	r2, [pc, #476]	; (8001e7c <HAL_I2C_Init+0x244>)
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	bf94      	ite	ls
 8001ca4:	2301      	movls	r3, #1
 8001ca6:	2300      	movhi	r3, #0
 8001ca8:	b2db      	uxtb	r3, r3
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d001      	beq.n	8001cb2 <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	e0db      	b.n	8001e6a <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	4a72      	ldr	r2, [pc, #456]	; (8001e80 <HAL_I2C_Init+0x248>)
 8001cb6:	fba2 2303 	umull	r2, r3, r2, r3
 8001cba:	0c9b      	lsrs	r3, r3, #18
 8001cbc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	68ba      	ldr	r2, [r7, #8]
 8001cce:	430a      	orrs	r2, r1
 8001cd0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	6a1b      	ldr	r3, [r3, #32]
 8001cd8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	4a64      	ldr	r2, [pc, #400]	; (8001e74 <HAL_I2C_Init+0x23c>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d802      	bhi.n	8001cec <HAL_I2C_Init+0xb4>
 8001ce6:	68bb      	ldr	r3, [r7, #8]
 8001ce8:	3301      	adds	r3, #1
 8001cea:	e009      	b.n	8001d00 <HAL_I2C_Init+0xc8>
 8001cec:	68bb      	ldr	r3, [r7, #8]
 8001cee:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001cf2:	fb02 f303 	mul.w	r3, r2, r3
 8001cf6:	4a63      	ldr	r2, [pc, #396]	; (8001e84 <HAL_I2C_Init+0x24c>)
 8001cf8:	fba2 2303 	umull	r2, r3, r2, r3
 8001cfc:	099b      	lsrs	r3, r3, #6
 8001cfe:	3301      	adds	r3, #1
 8001d00:	687a      	ldr	r2, [r7, #4]
 8001d02:	6812      	ldr	r2, [r2, #0]
 8001d04:	430b      	orrs	r3, r1
 8001d06:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	69db      	ldr	r3, [r3, #28]
 8001d0e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001d12:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	4956      	ldr	r1, [pc, #344]	; (8001e74 <HAL_I2C_Init+0x23c>)
 8001d1c:	428b      	cmp	r3, r1
 8001d1e:	d80d      	bhi.n	8001d3c <HAL_I2C_Init+0x104>
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	1e59      	subs	r1, r3, #1
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	005b      	lsls	r3, r3, #1
 8001d2a:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d2e:	3301      	adds	r3, #1
 8001d30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d34:	2b04      	cmp	r3, #4
 8001d36:	bf38      	it	cc
 8001d38:	2304      	movcc	r3, #4
 8001d3a:	e04f      	b.n	8001ddc <HAL_I2C_Init+0x1a4>
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	689b      	ldr	r3, [r3, #8]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d111      	bne.n	8001d68 <HAL_I2C_Init+0x130>
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	1e58      	subs	r0, r3, #1
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6859      	ldr	r1, [r3, #4]
 8001d4c:	460b      	mov	r3, r1
 8001d4e:	005b      	lsls	r3, r3, #1
 8001d50:	440b      	add	r3, r1
 8001d52:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d56:	3301      	adds	r3, #1
 8001d58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	bf0c      	ite	eq
 8001d60:	2301      	moveq	r3, #1
 8001d62:	2300      	movne	r3, #0
 8001d64:	b2db      	uxtb	r3, r3
 8001d66:	e012      	b.n	8001d8e <HAL_I2C_Init+0x156>
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	1e58      	subs	r0, r3, #1
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6859      	ldr	r1, [r3, #4]
 8001d70:	460b      	mov	r3, r1
 8001d72:	009b      	lsls	r3, r3, #2
 8001d74:	440b      	add	r3, r1
 8001d76:	0099      	lsls	r1, r3, #2
 8001d78:	440b      	add	r3, r1
 8001d7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d7e:	3301      	adds	r3, #1
 8001d80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	bf0c      	ite	eq
 8001d88:	2301      	moveq	r3, #1
 8001d8a:	2300      	movne	r3, #0
 8001d8c:	b2db      	uxtb	r3, r3
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d001      	beq.n	8001d96 <HAL_I2C_Init+0x15e>
 8001d92:	2301      	movs	r3, #1
 8001d94:	e022      	b.n	8001ddc <HAL_I2C_Init+0x1a4>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	689b      	ldr	r3, [r3, #8]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d10e      	bne.n	8001dbc <HAL_I2C_Init+0x184>
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	1e58      	subs	r0, r3, #1
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6859      	ldr	r1, [r3, #4]
 8001da6:	460b      	mov	r3, r1
 8001da8:	005b      	lsls	r3, r3, #1
 8001daa:	440b      	add	r3, r1
 8001dac:	fbb0 f3f3 	udiv	r3, r0, r3
 8001db0:	3301      	adds	r3, #1
 8001db2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001db6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001dba:	e00f      	b.n	8001ddc <HAL_I2C_Init+0x1a4>
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	1e58      	subs	r0, r3, #1
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6859      	ldr	r1, [r3, #4]
 8001dc4:	460b      	mov	r3, r1
 8001dc6:	009b      	lsls	r3, r3, #2
 8001dc8:	440b      	add	r3, r1
 8001dca:	0099      	lsls	r1, r3, #2
 8001dcc:	440b      	add	r3, r1
 8001dce:	fbb0 f3f3 	udiv	r3, r0, r3
 8001dd2:	3301      	adds	r3, #1
 8001dd4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001dd8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001ddc:	6879      	ldr	r1, [r7, #4]
 8001dde:	6809      	ldr	r1, [r1, #0]
 8001de0:	4313      	orrs	r3, r2
 8001de2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	69da      	ldr	r2, [r3, #28]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6a1b      	ldr	r3, [r3, #32]
 8001df6:	431a      	orrs	r2, r3
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	430a      	orrs	r2, r1
 8001dfe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	689b      	ldr	r3, [r3, #8]
 8001e06:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001e0a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001e0e:	687a      	ldr	r2, [r7, #4]
 8001e10:	6911      	ldr	r1, [r2, #16]
 8001e12:	687a      	ldr	r2, [r7, #4]
 8001e14:	68d2      	ldr	r2, [r2, #12]
 8001e16:	4311      	orrs	r1, r2
 8001e18:	687a      	ldr	r2, [r7, #4]
 8001e1a:	6812      	ldr	r2, [r2, #0]
 8001e1c:	430b      	orrs	r3, r1
 8001e1e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	68db      	ldr	r3, [r3, #12]
 8001e26:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	695a      	ldr	r2, [r3, #20]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	699b      	ldr	r3, [r3, #24]
 8001e32:	431a      	orrs	r2, r3
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	430a      	orrs	r2, r1
 8001e3a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	681a      	ldr	r2, [r3, #0]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f042 0201 	orr.w	r2, r2, #1
 8001e4a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2200      	movs	r2, #0
 8001e50:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2220      	movs	r2, #32
 8001e56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2200      	movs	r2, #0
 8001e64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001e68:	2300      	movs	r3, #0
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	3710      	adds	r7, #16
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	000186a0 	.word	0x000186a0
 8001e78:	001e847f 	.word	0x001e847f
 8001e7c:	003d08ff 	.word	0x003d08ff
 8001e80:	431bde83 	.word	0x431bde83
 8001e84:	10624dd3 	.word	0x10624dd3

08001e88 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b082      	sub	sp, #8
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d101      	bne.n	8001e9a <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8001e96:	2301      	movs	r3, #1
 8001e98:	e021      	b.n	8001ede <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2224      	movs	r2, #36	; 0x24
 8001e9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	681a      	ldr	r2, [r3, #0]
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f022 0201 	bic.w	r2, r2, #1
 8001eb0:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8001eb2:	6878      	ldr	r0, [r7, #4]
 8001eb4:	f7ff f8dc 	bl	8001070 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2200      	movs	r2, #0
 8001ebc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2200      	movs	r2, #0
 8001eca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2200      	movs	r2, #0
 8001ed0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001edc:	2300      	movs	r3, #0
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	3708      	adds	r7, #8
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}
	...

08001ee8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b088      	sub	sp, #32
 8001eec:	af02      	add	r7, sp, #8
 8001eee:	60f8      	str	r0, [r7, #12]
 8001ef0:	4608      	mov	r0, r1
 8001ef2:	4611      	mov	r1, r2
 8001ef4:	461a      	mov	r2, r3
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	817b      	strh	r3, [r7, #10]
 8001efa:	460b      	mov	r3, r1
 8001efc:	813b      	strh	r3, [r7, #8]
 8001efe:	4613      	mov	r3, r2
 8001f00:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001f02:	f7ff fa45 	bl	8001390 <HAL_GetTick>
 8001f06:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f0e:	b2db      	uxtb	r3, r3
 8001f10:	2b20      	cmp	r3, #32
 8001f12:	f040 80d9 	bne.w	80020c8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001f16:	697b      	ldr	r3, [r7, #20]
 8001f18:	9300      	str	r3, [sp, #0]
 8001f1a:	2319      	movs	r3, #25
 8001f1c:	2201      	movs	r2, #1
 8001f1e:	496d      	ldr	r1, [pc, #436]	; (80020d4 <HAL_I2C_Mem_Write+0x1ec>)
 8001f20:	68f8      	ldr	r0, [r7, #12]
 8001f22:	f000 fc5b 	bl	80027dc <I2C_WaitOnFlagUntilTimeout>
 8001f26:	4603      	mov	r3, r0
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d001      	beq.n	8001f30 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001f2c:	2302      	movs	r3, #2
 8001f2e:	e0cc      	b.n	80020ca <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f36:	2b01      	cmp	r3, #1
 8001f38:	d101      	bne.n	8001f3e <HAL_I2C_Mem_Write+0x56>
 8001f3a:	2302      	movs	r3, #2
 8001f3c:	e0c5      	b.n	80020ca <HAL_I2C_Mem_Write+0x1e2>
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	2201      	movs	r2, #1
 8001f42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f003 0301 	and.w	r3, r3, #1
 8001f50:	2b01      	cmp	r3, #1
 8001f52:	d007      	beq.n	8001f64 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	681a      	ldr	r2, [r3, #0]
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f042 0201 	orr.w	r2, r2, #1
 8001f62:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	681a      	ldr	r2, [r3, #0]
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f72:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	2221      	movs	r2, #33	; 0x21
 8001f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	2240      	movs	r2, #64	; 0x40
 8001f80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	2200      	movs	r2, #0
 8001f88:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	6a3a      	ldr	r2, [r7, #32]
 8001f8e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001f94:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f9a:	b29a      	uxth	r2, r3
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	4a4d      	ldr	r2, [pc, #308]	; (80020d8 <HAL_I2C_Mem_Write+0x1f0>)
 8001fa4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001fa6:	88f8      	ldrh	r0, [r7, #6]
 8001fa8:	893a      	ldrh	r2, [r7, #8]
 8001faa:	8979      	ldrh	r1, [r7, #10]
 8001fac:	697b      	ldr	r3, [r7, #20]
 8001fae:	9301      	str	r3, [sp, #4]
 8001fb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fb2:	9300      	str	r3, [sp, #0]
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	68f8      	ldr	r0, [r7, #12]
 8001fb8:	f000 fab6 	bl	8002528 <I2C_RequestMemoryWrite>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d052      	beq.n	8002068 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	e081      	b.n	80020ca <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001fc6:	697a      	ldr	r2, [r7, #20]
 8001fc8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001fca:	68f8      	ldr	r0, [r7, #12]
 8001fcc:	f000 fcdc 	bl	8002988 <I2C_WaitOnTXEFlagUntilTimeout>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d00d      	beq.n	8001ff2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fda:	2b04      	cmp	r3, #4
 8001fdc:	d107      	bne.n	8001fee <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	681a      	ldr	r2, [r3, #0]
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fec:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e06b      	b.n	80020ca <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff6:	781a      	ldrb	r2, [r3, #0]
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002002:	1c5a      	adds	r2, r3, #1
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800200c:	3b01      	subs	r3, #1
 800200e:	b29a      	uxth	r2, r3
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002018:	b29b      	uxth	r3, r3
 800201a:	3b01      	subs	r3, #1
 800201c:	b29a      	uxth	r2, r3
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	695b      	ldr	r3, [r3, #20]
 8002028:	f003 0304 	and.w	r3, r3, #4
 800202c:	2b04      	cmp	r3, #4
 800202e:	d11b      	bne.n	8002068 <HAL_I2C_Mem_Write+0x180>
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002034:	2b00      	cmp	r3, #0
 8002036:	d017      	beq.n	8002068 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800203c:	781a      	ldrb	r2, [r3, #0]
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002048:	1c5a      	adds	r2, r3, #1
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002052:	3b01      	subs	r3, #1
 8002054:	b29a      	uxth	r2, r3
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800205e:	b29b      	uxth	r3, r3
 8002060:	3b01      	subs	r3, #1
 8002062:	b29a      	uxth	r2, r3
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800206c:	2b00      	cmp	r3, #0
 800206e:	d1aa      	bne.n	8001fc6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002070:	697a      	ldr	r2, [r7, #20]
 8002072:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002074:	68f8      	ldr	r0, [r7, #12]
 8002076:	f000 fcc8 	bl	8002a0a <I2C_WaitOnBTFFlagUntilTimeout>
 800207a:	4603      	mov	r3, r0
 800207c:	2b00      	cmp	r3, #0
 800207e:	d00d      	beq.n	800209c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002084:	2b04      	cmp	r3, #4
 8002086:	d107      	bne.n	8002098 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	681a      	ldr	r2, [r3, #0]
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002096:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002098:	2301      	movs	r3, #1
 800209a:	e016      	b.n	80020ca <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	681a      	ldr	r2, [r3, #0]
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	2220      	movs	r2, #32
 80020b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	2200      	movs	r2, #0
 80020b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	2200      	movs	r2, #0
 80020c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80020c4:	2300      	movs	r3, #0
 80020c6:	e000      	b.n	80020ca <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80020c8:	2302      	movs	r3, #2
  }
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	3718      	adds	r7, #24
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	bf00      	nop
 80020d4:	00100002 	.word	0x00100002
 80020d8:	ffff0000 	.word	0xffff0000

080020dc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b08c      	sub	sp, #48	; 0x30
 80020e0:	af02      	add	r7, sp, #8
 80020e2:	60f8      	str	r0, [r7, #12]
 80020e4:	4608      	mov	r0, r1
 80020e6:	4611      	mov	r1, r2
 80020e8:	461a      	mov	r2, r3
 80020ea:	4603      	mov	r3, r0
 80020ec:	817b      	strh	r3, [r7, #10]
 80020ee:	460b      	mov	r3, r1
 80020f0:	813b      	strh	r3, [r7, #8]
 80020f2:	4613      	mov	r3, r2
 80020f4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80020f6:	f7ff f94b 	bl	8001390 <HAL_GetTick>
 80020fa:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002102:	b2db      	uxtb	r3, r3
 8002104:	2b20      	cmp	r3, #32
 8002106:	f040 8208 	bne.w	800251a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800210a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800210c:	9300      	str	r3, [sp, #0]
 800210e:	2319      	movs	r3, #25
 8002110:	2201      	movs	r2, #1
 8002112:	497b      	ldr	r1, [pc, #492]	; (8002300 <HAL_I2C_Mem_Read+0x224>)
 8002114:	68f8      	ldr	r0, [r7, #12]
 8002116:	f000 fb61 	bl	80027dc <I2C_WaitOnFlagUntilTimeout>
 800211a:	4603      	mov	r3, r0
 800211c:	2b00      	cmp	r3, #0
 800211e:	d001      	beq.n	8002124 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002120:	2302      	movs	r3, #2
 8002122:	e1fb      	b.n	800251c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800212a:	2b01      	cmp	r3, #1
 800212c:	d101      	bne.n	8002132 <HAL_I2C_Mem_Read+0x56>
 800212e:	2302      	movs	r3, #2
 8002130:	e1f4      	b.n	800251c <HAL_I2C_Mem_Read+0x440>
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	2201      	movs	r2, #1
 8002136:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f003 0301 	and.w	r3, r3, #1
 8002144:	2b01      	cmp	r3, #1
 8002146:	d007      	beq.n	8002158 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	681a      	ldr	r2, [r3, #0]
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f042 0201 	orr.w	r2, r2, #1
 8002156:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	681a      	ldr	r2, [r3, #0]
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002166:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	2222      	movs	r2, #34	; 0x22
 800216c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	2240      	movs	r2, #64	; 0x40
 8002174:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	2200      	movs	r2, #0
 800217c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002182:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002188:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800218e:	b29a      	uxth	r2, r3
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	4a5b      	ldr	r2, [pc, #364]	; (8002304 <HAL_I2C_Mem_Read+0x228>)
 8002198:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800219a:	88f8      	ldrh	r0, [r7, #6]
 800219c:	893a      	ldrh	r2, [r7, #8]
 800219e:	8979      	ldrh	r1, [r7, #10]
 80021a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a2:	9301      	str	r3, [sp, #4]
 80021a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021a6:	9300      	str	r3, [sp, #0]
 80021a8:	4603      	mov	r3, r0
 80021aa:	68f8      	ldr	r0, [r7, #12]
 80021ac:	f000 fa46 	bl	800263c <I2C_RequestMemoryRead>
 80021b0:	4603      	mov	r3, r0
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d001      	beq.n	80021ba <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80021b6:	2301      	movs	r3, #1
 80021b8:	e1b0      	b.n	800251c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d113      	bne.n	80021ea <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021c2:	2300      	movs	r3, #0
 80021c4:	623b      	str	r3, [r7, #32]
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	695b      	ldr	r3, [r3, #20]
 80021cc:	623b      	str	r3, [r7, #32]
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	699b      	ldr	r3, [r3, #24]
 80021d4:	623b      	str	r3, [r7, #32]
 80021d6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	681a      	ldr	r2, [r3, #0]
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021e6:	601a      	str	r2, [r3, #0]
 80021e8:	e184      	b.n	80024f4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021ee:	2b01      	cmp	r3, #1
 80021f0:	d11b      	bne.n	800222a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	681a      	ldr	r2, [r3, #0]
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002200:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002202:	2300      	movs	r3, #0
 8002204:	61fb      	str	r3, [r7, #28]
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	695b      	ldr	r3, [r3, #20]
 800220c:	61fb      	str	r3, [r7, #28]
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	699b      	ldr	r3, [r3, #24]
 8002214:	61fb      	str	r3, [r7, #28]
 8002216:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	681a      	ldr	r2, [r3, #0]
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002226:	601a      	str	r2, [r3, #0]
 8002228:	e164      	b.n	80024f4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800222e:	2b02      	cmp	r3, #2
 8002230:	d11b      	bne.n	800226a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	681a      	ldr	r2, [r3, #0]
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002240:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	681a      	ldr	r2, [r3, #0]
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002250:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002252:	2300      	movs	r3, #0
 8002254:	61bb      	str	r3, [r7, #24]
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	695b      	ldr	r3, [r3, #20]
 800225c:	61bb      	str	r3, [r7, #24]
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	699b      	ldr	r3, [r3, #24]
 8002264:	61bb      	str	r3, [r7, #24]
 8002266:	69bb      	ldr	r3, [r7, #24]
 8002268:	e144      	b.n	80024f4 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800226a:	2300      	movs	r3, #0
 800226c:	617b      	str	r3, [r7, #20]
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	695b      	ldr	r3, [r3, #20]
 8002274:	617b      	str	r3, [r7, #20]
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	699b      	ldr	r3, [r3, #24]
 800227c:	617b      	str	r3, [r7, #20]
 800227e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002280:	e138      	b.n	80024f4 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002286:	2b03      	cmp	r3, #3
 8002288:	f200 80f1 	bhi.w	800246e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002290:	2b01      	cmp	r3, #1
 8002292:	d123      	bne.n	80022dc <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002294:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002296:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002298:	68f8      	ldr	r0, [r7, #12]
 800229a:	f000 fbf7 	bl	8002a8c <I2C_WaitOnRXNEFlagUntilTimeout>
 800229e:	4603      	mov	r3, r0
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d001      	beq.n	80022a8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80022a4:	2301      	movs	r3, #1
 80022a6:	e139      	b.n	800251c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	691a      	ldr	r2, [r3, #16]
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b2:	b2d2      	uxtb	r2, r2
 80022b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ba:	1c5a      	adds	r2, r3, #1
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022c4:	3b01      	subs	r3, #1
 80022c6:	b29a      	uxth	r2, r3
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022d0:	b29b      	uxth	r3, r3
 80022d2:	3b01      	subs	r3, #1
 80022d4:	b29a      	uxth	r2, r3
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80022da:	e10b      	b.n	80024f4 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022e0:	2b02      	cmp	r3, #2
 80022e2:	d14e      	bne.n	8002382 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80022e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e6:	9300      	str	r3, [sp, #0]
 80022e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022ea:	2200      	movs	r2, #0
 80022ec:	4906      	ldr	r1, [pc, #24]	; (8002308 <HAL_I2C_Mem_Read+0x22c>)
 80022ee:	68f8      	ldr	r0, [r7, #12]
 80022f0:	f000 fa74 	bl	80027dc <I2C_WaitOnFlagUntilTimeout>
 80022f4:	4603      	mov	r3, r0
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d008      	beq.n	800230c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80022fa:	2301      	movs	r3, #1
 80022fc:	e10e      	b.n	800251c <HAL_I2C_Mem_Read+0x440>
 80022fe:	bf00      	nop
 8002300:	00100002 	.word	0x00100002
 8002304:	ffff0000 	.word	0xffff0000
 8002308:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	681a      	ldr	r2, [r3, #0]
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800231a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	691a      	ldr	r2, [r3, #16]
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002326:	b2d2      	uxtb	r2, r2
 8002328:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800232e:	1c5a      	adds	r2, r3, #1
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002338:	3b01      	subs	r3, #1
 800233a:	b29a      	uxth	r2, r3
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002344:	b29b      	uxth	r3, r3
 8002346:	3b01      	subs	r3, #1
 8002348:	b29a      	uxth	r2, r3
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	691a      	ldr	r2, [r3, #16]
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002358:	b2d2      	uxtb	r2, r2
 800235a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002360:	1c5a      	adds	r2, r3, #1
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800236a:	3b01      	subs	r3, #1
 800236c:	b29a      	uxth	r2, r3
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002376:	b29b      	uxth	r3, r3
 8002378:	3b01      	subs	r3, #1
 800237a:	b29a      	uxth	r2, r3
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002380:	e0b8      	b.n	80024f4 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002384:	9300      	str	r3, [sp, #0]
 8002386:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002388:	2200      	movs	r2, #0
 800238a:	4966      	ldr	r1, [pc, #408]	; (8002524 <HAL_I2C_Mem_Read+0x448>)
 800238c:	68f8      	ldr	r0, [r7, #12]
 800238e:	f000 fa25 	bl	80027dc <I2C_WaitOnFlagUntilTimeout>
 8002392:	4603      	mov	r3, r0
 8002394:	2b00      	cmp	r3, #0
 8002396:	d001      	beq.n	800239c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002398:	2301      	movs	r3, #1
 800239a:	e0bf      	b.n	800251c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	681a      	ldr	r2, [r3, #0]
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023aa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	691a      	ldr	r2, [r3, #16]
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023b6:	b2d2      	uxtb	r2, r2
 80023b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023be:	1c5a      	adds	r2, r3, #1
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023c8:	3b01      	subs	r3, #1
 80023ca:	b29a      	uxth	r2, r3
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023d4:	b29b      	uxth	r3, r3
 80023d6:	3b01      	subs	r3, #1
 80023d8:	b29a      	uxth	r2, r3
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80023de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e0:	9300      	str	r3, [sp, #0]
 80023e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023e4:	2200      	movs	r2, #0
 80023e6:	494f      	ldr	r1, [pc, #316]	; (8002524 <HAL_I2C_Mem_Read+0x448>)
 80023e8:	68f8      	ldr	r0, [r7, #12]
 80023ea:	f000 f9f7 	bl	80027dc <I2C_WaitOnFlagUntilTimeout>
 80023ee:	4603      	mov	r3, r0
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d001      	beq.n	80023f8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80023f4:	2301      	movs	r3, #1
 80023f6:	e091      	b.n	800251c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	681a      	ldr	r2, [r3, #0]
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002406:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	691a      	ldr	r2, [r3, #16]
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002412:	b2d2      	uxtb	r2, r2
 8002414:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800241a:	1c5a      	adds	r2, r3, #1
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002424:	3b01      	subs	r3, #1
 8002426:	b29a      	uxth	r2, r3
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002430:	b29b      	uxth	r3, r3
 8002432:	3b01      	subs	r3, #1
 8002434:	b29a      	uxth	r2, r3
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	691a      	ldr	r2, [r3, #16]
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002444:	b2d2      	uxtb	r2, r2
 8002446:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800244c:	1c5a      	adds	r2, r3, #1
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002456:	3b01      	subs	r3, #1
 8002458:	b29a      	uxth	r2, r3
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002462:	b29b      	uxth	r3, r3
 8002464:	3b01      	subs	r3, #1
 8002466:	b29a      	uxth	r2, r3
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800246c:	e042      	b.n	80024f4 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800246e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002470:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002472:	68f8      	ldr	r0, [r7, #12]
 8002474:	f000 fb0a 	bl	8002a8c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002478:	4603      	mov	r3, r0
 800247a:	2b00      	cmp	r3, #0
 800247c:	d001      	beq.n	8002482 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	e04c      	b.n	800251c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	691a      	ldr	r2, [r3, #16]
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800248c:	b2d2      	uxtb	r2, r2
 800248e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002494:	1c5a      	adds	r2, r3, #1
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800249e:	3b01      	subs	r3, #1
 80024a0:	b29a      	uxth	r2, r3
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024aa:	b29b      	uxth	r3, r3
 80024ac:	3b01      	subs	r3, #1
 80024ae:	b29a      	uxth	r2, r3
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	695b      	ldr	r3, [r3, #20]
 80024ba:	f003 0304 	and.w	r3, r3, #4
 80024be:	2b04      	cmp	r3, #4
 80024c0:	d118      	bne.n	80024f4 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	691a      	ldr	r2, [r3, #16]
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024cc:	b2d2      	uxtb	r2, r2
 80024ce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024d4:	1c5a      	adds	r2, r3, #1
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024de:	3b01      	subs	r3, #1
 80024e0:	b29a      	uxth	r2, r3
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024ea:	b29b      	uxth	r3, r3
 80024ec:	3b01      	subs	r3, #1
 80024ee:	b29a      	uxth	r2, r3
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	f47f aec2 	bne.w	8002282 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	2220      	movs	r2, #32
 8002502:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	2200      	movs	r2, #0
 800250a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	2200      	movs	r2, #0
 8002512:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002516:	2300      	movs	r3, #0
 8002518:	e000      	b.n	800251c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800251a:	2302      	movs	r3, #2
  }
}
 800251c:	4618      	mov	r0, r3
 800251e:	3728      	adds	r7, #40	; 0x28
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}
 8002524:	00010004 	.word	0x00010004

08002528 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b088      	sub	sp, #32
 800252c:	af02      	add	r7, sp, #8
 800252e:	60f8      	str	r0, [r7, #12]
 8002530:	4608      	mov	r0, r1
 8002532:	4611      	mov	r1, r2
 8002534:	461a      	mov	r2, r3
 8002536:	4603      	mov	r3, r0
 8002538:	817b      	strh	r3, [r7, #10]
 800253a:	460b      	mov	r3, r1
 800253c:	813b      	strh	r3, [r7, #8]
 800253e:	4613      	mov	r3, r2
 8002540:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	681a      	ldr	r2, [r3, #0]
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002550:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002554:	9300      	str	r3, [sp, #0]
 8002556:	6a3b      	ldr	r3, [r7, #32]
 8002558:	2200      	movs	r2, #0
 800255a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800255e:	68f8      	ldr	r0, [r7, #12]
 8002560:	f000 f93c 	bl	80027dc <I2C_WaitOnFlagUntilTimeout>
 8002564:	4603      	mov	r3, r0
 8002566:	2b00      	cmp	r3, #0
 8002568:	d001      	beq.n	800256e <I2C_RequestMemoryWrite+0x46>
  {
    return HAL_ERROR;
 800256a:	2301      	movs	r3, #1
 800256c:	e05f      	b.n	800262e <I2C_RequestMemoryWrite+0x106>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800256e:	897b      	ldrh	r3, [r7, #10]
 8002570:	b2db      	uxtb	r3, r3
 8002572:	461a      	mov	r2, r3
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800257c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800257e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002580:	6a3a      	ldr	r2, [r7, #32]
 8002582:	492d      	ldr	r1, [pc, #180]	; (8002638 <I2C_RequestMemoryWrite+0x110>)
 8002584:	68f8      	ldr	r0, [r7, #12]
 8002586:	f000 f980 	bl	800288a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800258a:	4603      	mov	r3, r0
 800258c:	2b00      	cmp	r3, #0
 800258e:	d001      	beq.n	8002594 <I2C_RequestMemoryWrite+0x6c>
  {
    return HAL_ERROR;
 8002590:	2301      	movs	r3, #1
 8002592:	e04c      	b.n	800262e <I2C_RequestMemoryWrite+0x106>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002594:	2300      	movs	r3, #0
 8002596:	617b      	str	r3, [r7, #20]
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	695b      	ldr	r3, [r3, #20]
 800259e:	617b      	str	r3, [r7, #20]
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	699b      	ldr	r3, [r3, #24]
 80025a6:	617b      	str	r3, [r7, #20]
 80025a8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80025aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025ac:	6a39      	ldr	r1, [r7, #32]
 80025ae:	68f8      	ldr	r0, [r7, #12]
 80025b0:	f000 f9ea 	bl	8002988 <I2C_WaitOnTXEFlagUntilTimeout>
 80025b4:	4603      	mov	r3, r0
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d00d      	beq.n	80025d6 <I2C_RequestMemoryWrite+0xae>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025be:	2b04      	cmp	r3, #4
 80025c0:	d107      	bne.n	80025d2 <I2C_RequestMemoryWrite+0xaa>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	681a      	ldr	r2, [r3, #0]
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025d0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	e02b      	b.n	800262e <I2C_RequestMemoryWrite+0x106>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80025d6:	88fb      	ldrh	r3, [r7, #6]
 80025d8:	2b01      	cmp	r3, #1
 80025da:	d105      	bne.n	80025e8 <I2C_RequestMemoryWrite+0xc0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80025dc:	893b      	ldrh	r3, [r7, #8]
 80025de:	b2da      	uxtb	r2, r3
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	611a      	str	r2, [r3, #16]
 80025e6:	e021      	b.n	800262c <I2C_RequestMemoryWrite+0x104>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80025e8:	893b      	ldrh	r3, [r7, #8]
 80025ea:	0a1b      	lsrs	r3, r3, #8
 80025ec:	b29b      	uxth	r3, r3
 80025ee:	b2da      	uxtb	r2, r3
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80025f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025f8:	6a39      	ldr	r1, [r7, #32]
 80025fa:	68f8      	ldr	r0, [r7, #12]
 80025fc:	f000 f9c4 	bl	8002988 <I2C_WaitOnTXEFlagUntilTimeout>
 8002600:	4603      	mov	r3, r0
 8002602:	2b00      	cmp	r3, #0
 8002604:	d00d      	beq.n	8002622 <I2C_RequestMemoryWrite+0xfa>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800260a:	2b04      	cmp	r3, #4
 800260c:	d107      	bne.n	800261e <I2C_RequestMemoryWrite+0xf6>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	681a      	ldr	r2, [r3, #0]
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800261c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	e005      	b.n	800262e <I2C_RequestMemoryWrite+0x106>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002622:	893b      	ldrh	r3, [r7, #8]
 8002624:	b2da      	uxtb	r2, r3
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800262c:	2300      	movs	r3, #0
}
 800262e:	4618      	mov	r0, r3
 8002630:	3718      	adds	r7, #24
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}
 8002636:	bf00      	nop
 8002638:	00010002 	.word	0x00010002

0800263c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b088      	sub	sp, #32
 8002640:	af02      	add	r7, sp, #8
 8002642:	60f8      	str	r0, [r7, #12]
 8002644:	4608      	mov	r0, r1
 8002646:	4611      	mov	r1, r2
 8002648:	461a      	mov	r2, r3
 800264a:	4603      	mov	r3, r0
 800264c:	817b      	strh	r3, [r7, #10]
 800264e:	460b      	mov	r3, r1
 8002650:	813b      	strh	r3, [r7, #8]
 8002652:	4613      	mov	r3, r2
 8002654:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	681a      	ldr	r2, [r3, #0]
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002664:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	681a      	ldr	r2, [r3, #0]
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002674:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002678:	9300      	str	r3, [sp, #0]
 800267a:	6a3b      	ldr	r3, [r7, #32]
 800267c:	2200      	movs	r2, #0
 800267e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002682:	68f8      	ldr	r0, [r7, #12]
 8002684:	f000 f8aa 	bl	80027dc <I2C_WaitOnFlagUntilTimeout>
 8002688:	4603      	mov	r3, r0
 800268a:	2b00      	cmp	r3, #0
 800268c:	d001      	beq.n	8002692 <I2C_RequestMemoryRead+0x56>
  {
    return HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	e09e      	b.n	80027d0 <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002692:	897b      	ldrh	r3, [r7, #10]
 8002694:	b2db      	uxtb	r3, r3
 8002696:	461a      	mov	r2, r3
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80026a0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80026a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a4:	6a3a      	ldr	r2, [r7, #32]
 80026a6:	494c      	ldr	r1, [pc, #304]	; (80027d8 <I2C_RequestMemoryRead+0x19c>)
 80026a8:	68f8      	ldr	r0, [r7, #12]
 80026aa:	f000 f8ee 	bl	800288a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80026ae:	4603      	mov	r3, r0
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d001      	beq.n	80026b8 <I2C_RequestMemoryRead+0x7c>
  {
    return HAL_ERROR;
 80026b4:	2301      	movs	r3, #1
 80026b6:	e08b      	b.n	80027d0 <I2C_RequestMemoryRead+0x194>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026b8:	2300      	movs	r3, #0
 80026ba:	617b      	str	r3, [r7, #20]
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	695b      	ldr	r3, [r3, #20]
 80026c2:	617b      	str	r3, [r7, #20]
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	699b      	ldr	r3, [r3, #24]
 80026ca:	617b      	str	r3, [r7, #20]
 80026cc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80026ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026d0:	6a39      	ldr	r1, [r7, #32]
 80026d2:	68f8      	ldr	r0, [r7, #12]
 80026d4:	f000 f958 	bl	8002988 <I2C_WaitOnTXEFlagUntilTimeout>
 80026d8:	4603      	mov	r3, r0
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d00d      	beq.n	80026fa <I2C_RequestMemoryRead+0xbe>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e2:	2b04      	cmp	r3, #4
 80026e4:	d107      	bne.n	80026f6 <I2C_RequestMemoryRead+0xba>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	681a      	ldr	r2, [r3, #0]
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026f4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80026f6:	2301      	movs	r3, #1
 80026f8:	e06a      	b.n	80027d0 <I2C_RequestMemoryRead+0x194>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80026fa:	88fb      	ldrh	r3, [r7, #6]
 80026fc:	2b01      	cmp	r3, #1
 80026fe:	d105      	bne.n	800270c <I2C_RequestMemoryRead+0xd0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002700:	893b      	ldrh	r3, [r7, #8]
 8002702:	b2da      	uxtb	r2, r3
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	611a      	str	r2, [r3, #16]
 800270a:	e021      	b.n	8002750 <I2C_RequestMemoryRead+0x114>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800270c:	893b      	ldrh	r3, [r7, #8]
 800270e:	0a1b      	lsrs	r3, r3, #8
 8002710:	b29b      	uxth	r3, r3
 8002712:	b2da      	uxtb	r2, r3
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800271a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800271c:	6a39      	ldr	r1, [r7, #32]
 800271e:	68f8      	ldr	r0, [r7, #12]
 8002720:	f000 f932 	bl	8002988 <I2C_WaitOnTXEFlagUntilTimeout>
 8002724:	4603      	mov	r3, r0
 8002726:	2b00      	cmp	r3, #0
 8002728:	d00d      	beq.n	8002746 <I2C_RequestMemoryRead+0x10a>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800272e:	2b04      	cmp	r3, #4
 8002730:	d107      	bne.n	8002742 <I2C_RequestMemoryRead+0x106>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	681a      	ldr	r2, [r3, #0]
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002740:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	e044      	b.n	80027d0 <I2C_RequestMemoryRead+0x194>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002746:	893b      	ldrh	r3, [r7, #8]
 8002748:	b2da      	uxtb	r2, r3
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002750:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002752:	6a39      	ldr	r1, [r7, #32]
 8002754:	68f8      	ldr	r0, [r7, #12]
 8002756:	f000 f917 	bl	8002988 <I2C_WaitOnTXEFlagUntilTimeout>
 800275a:	4603      	mov	r3, r0
 800275c:	2b00      	cmp	r3, #0
 800275e:	d00d      	beq.n	800277c <I2C_RequestMemoryRead+0x140>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002764:	2b04      	cmp	r3, #4
 8002766:	d107      	bne.n	8002778 <I2C_RequestMemoryRead+0x13c>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	681a      	ldr	r2, [r3, #0]
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002776:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002778:	2301      	movs	r3, #1
 800277a:	e029      	b.n	80027d0 <I2C_RequestMemoryRead+0x194>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	681a      	ldr	r2, [r3, #0]
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800278a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800278c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800278e:	9300      	str	r3, [sp, #0]
 8002790:	6a3b      	ldr	r3, [r7, #32]
 8002792:	2200      	movs	r2, #0
 8002794:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002798:	68f8      	ldr	r0, [r7, #12]
 800279a:	f000 f81f 	bl	80027dc <I2C_WaitOnFlagUntilTimeout>
 800279e:	4603      	mov	r3, r0
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d001      	beq.n	80027a8 <I2C_RequestMemoryRead+0x16c>
  {
    return HAL_ERROR;
 80027a4:	2301      	movs	r3, #1
 80027a6:	e013      	b.n	80027d0 <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80027a8:	897b      	ldrh	r3, [r7, #10]
 80027aa:	b2db      	uxtb	r3, r3
 80027ac:	f043 0301 	orr.w	r3, r3, #1
 80027b0:	b2da      	uxtb	r2, r3
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80027b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ba:	6a3a      	ldr	r2, [r7, #32]
 80027bc:	4906      	ldr	r1, [pc, #24]	; (80027d8 <I2C_RequestMemoryRead+0x19c>)
 80027be:	68f8      	ldr	r0, [r7, #12]
 80027c0:	f000 f863 	bl	800288a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80027c4:	4603      	mov	r3, r0
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d001      	beq.n	80027ce <I2C_RequestMemoryRead+0x192>
  {
    return HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	e000      	b.n	80027d0 <I2C_RequestMemoryRead+0x194>
  }

  return HAL_OK;
 80027ce:	2300      	movs	r3, #0
}
 80027d0:	4618      	mov	r0, r3
 80027d2:	3718      	adds	r7, #24
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}
 80027d8:	00010002 	.word	0x00010002

080027dc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b084      	sub	sp, #16
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	60f8      	str	r0, [r7, #12]
 80027e4:	60b9      	str	r1, [r7, #8]
 80027e6:	603b      	str	r3, [r7, #0]
 80027e8:	4613      	mov	r3, r2
 80027ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80027ec:	e025      	b.n	800283a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027f4:	d021      	beq.n	800283a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027f6:	f7fe fdcb 	bl	8001390 <HAL_GetTick>
 80027fa:	4602      	mov	r2, r0
 80027fc:	69bb      	ldr	r3, [r7, #24]
 80027fe:	1ad3      	subs	r3, r2, r3
 8002800:	683a      	ldr	r2, [r7, #0]
 8002802:	429a      	cmp	r2, r3
 8002804:	d302      	bcc.n	800280c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d116      	bne.n	800283a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	2200      	movs	r2, #0
 8002810:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	2220      	movs	r2, #32
 8002816:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	2200      	movs	r2, #0
 800281e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002826:	f043 0220 	orr.w	r2, r3, #32
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	2200      	movs	r2, #0
 8002832:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002836:	2301      	movs	r3, #1
 8002838:	e023      	b.n	8002882 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800283a:	68bb      	ldr	r3, [r7, #8]
 800283c:	0c1b      	lsrs	r3, r3, #16
 800283e:	b2db      	uxtb	r3, r3
 8002840:	2b01      	cmp	r3, #1
 8002842:	d10d      	bne.n	8002860 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	695b      	ldr	r3, [r3, #20]
 800284a:	43da      	mvns	r2, r3
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	4013      	ands	r3, r2
 8002850:	b29b      	uxth	r3, r3
 8002852:	2b00      	cmp	r3, #0
 8002854:	bf0c      	ite	eq
 8002856:	2301      	moveq	r3, #1
 8002858:	2300      	movne	r3, #0
 800285a:	b2db      	uxtb	r3, r3
 800285c:	461a      	mov	r2, r3
 800285e:	e00c      	b.n	800287a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	699b      	ldr	r3, [r3, #24]
 8002866:	43da      	mvns	r2, r3
 8002868:	68bb      	ldr	r3, [r7, #8]
 800286a:	4013      	ands	r3, r2
 800286c:	b29b      	uxth	r3, r3
 800286e:	2b00      	cmp	r3, #0
 8002870:	bf0c      	ite	eq
 8002872:	2301      	moveq	r3, #1
 8002874:	2300      	movne	r3, #0
 8002876:	b2db      	uxtb	r3, r3
 8002878:	461a      	mov	r2, r3
 800287a:	79fb      	ldrb	r3, [r7, #7]
 800287c:	429a      	cmp	r2, r3
 800287e:	d0b6      	beq.n	80027ee <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002880:	2300      	movs	r3, #0
}
 8002882:	4618      	mov	r0, r3
 8002884:	3710      	adds	r7, #16
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}

0800288a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800288a:	b580      	push	{r7, lr}
 800288c:	b084      	sub	sp, #16
 800288e:	af00      	add	r7, sp, #0
 8002890:	60f8      	str	r0, [r7, #12]
 8002892:	60b9      	str	r1, [r7, #8]
 8002894:	607a      	str	r2, [r7, #4]
 8002896:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002898:	e051      	b.n	800293e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	695b      	ldr	r3, [r3, #20]
 80028a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028a8:	d123      	bne.n	80028f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	681a      	ldr	r2, [r3, #0]
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028b8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80028c2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	2200      	movs	r2, #0
 80028c8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	2220      	movs	r2, #32
 80028ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	2200      	movs	r2, #0
 80028d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028de:	f043 0204 	orr.w	r2, r3, #4
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	2200      	movs	r2, #0
 80028ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80028ee:	2301      	movs	r3, #1
 80028f0:	e046      	b.n	8002980 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028f8:	d021      	beq.n	800293e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028fa:	f7fe fd49 	bl	8001390 <HAL_GetTick>
 80028fe:	4602      	mov	r2, r0
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	1ad3      	subs	r3, r2, r3
 8002904:	687a      	ldr	r2, [r7, #4]
 8002906:	429a      	cmp	r2, r3
 8002908:	d302      	bcc.n	8002910 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d116      	bne.n	800293e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	2200      	movs	r2, #0
 8002914:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	2220      	movs	r2, #32
 800291a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	2200      	movs	r2, #0
 8002922:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800292a:	f043 0220 	orr.w	r2, r3, #32
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	2200      	movs	r2, #0
 8002936:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	e020      	b.n	8002980 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800293e:	68bb      	ldr	r3, [r7, #8]
 8002940:	0c1b      	lsrs	r3, r3, #16
 8002942:	b2db      	uxtb	r3, r3
 8002944:	2b01      	cmp	r3, #1
 8002946:	d10c      	bne.n	8002962 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	695b      	ldr	r3, [r3, #20]
 800294e:	43da      	mvns	r2, r3
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	4013      	ands	r3, r2
 8002954:	b29b      	uxth	r3, r3
 8002956:	2b00      	cmp	r3, #0
 8002958:	bf14      	ite	ne
 800295a:	2301      	movne	r3, #1
 800295c:	2300      	moveq	r3, #0
 800295e:	b2db      	uxtb	r3, r3
 8002960:	e00b      	b.n	800297a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	699b      	ldr	r3, [r3, #24]
 8002968:	43da      	mvns	r2, r3
 800296a:	68bb      	ldr	r3, [r7, #8]
 800296c:	4013      	ands	r3, r2
 800296e:	b29b      	uxth	r3, r3
 8002970:	2b00      	cmp	r3, #0
 8002972:	bf14      	ite	ne
 8002974:	2301      	movne	r3, #1
 8002976:	2300      	moveq	r3, #0
 8002978:	b2db      	uxtb	r3, r3
 800297a:	2b00      	cmp	r3, #0
 800297c:	d18d      	bne.n	800289a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800297e:	2300      	movs	r3, #0
}
 8002980:	4618      	mov	r0, r3
 8002982:	3710      	adds	r7, #16
 8002984:	46bd      	mov	sp, r7
 8002986:	bd80      	pop	{r7, pc}

08002988 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b084      	sub	sp, #16
 800298c:	af00      	add	r7, sp, #0
 800298e:	60f8      	str	r0, [r7, #12]
 8002990:	60b9      	str	r1, [r7, #8]
 8002992:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002994:	e02d      	b.n	80029f2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002996:	68f8      	ldr	r0, [r7, #12]
 8002998:	f000 f8ce 	bl	8002b38 <I2C_IsAcknowledgeFailed>
 800299c:	4603      	mov	r3, r0
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d001      	beq.n	80029a6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
 80029a4:	e02d      	b.n	8002a02 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029a6:	68bb      	ldr	r3, [r7, #8]
 80029a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029ac:	d021      	beq.n	80029f2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029ae:	f7fe fcef 	bl	8001390 <HAL_GetTick>
 80029b2:	4602      	mov	r2, r0
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	1ad3      	subs	r3, r2, r3
 80029b8:	68ba      	ldr	r2, [r7, #8]
 80029ba:	429a      	cmp	r2, r3
 80029bc:	d302      	bcc.n	80029c4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80029be:	68bb      	ldr	r3, [r7, #8]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d116      	bne.n	80029f2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	2200      	movs	r2, #0
 80029c8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	2220      	movs	r2, #32
 80029ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	2200      	movs	r2, #0
 80029d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029de:	f043 0220 	orr.w	r2, r3, #32
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	2200      	movs	r2, #0
 80029ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	e007      	b.n	8002a02 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	695b      	ldr	r3, [r3, #20]
 80029f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029fc:	2b80      	cmp	r3, #128	; 0x80
 80029fe:	d1ca      	bne.n	8002996 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002a00:	2300      	movs	r3, #0
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	3710      	adds	r7, #16
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}

08002a0a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a0a:	b580      	push	{r7, lr}
 8002a0c:	b084      	sub	sp, #16
 8002a0e:	af00      	add	r7, sp, #0
 8002a10:	60f8      	str	r0, [r7, #12]
 8002a12:	60b9      	str	r1, [r7, #8]
 8002a14:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002a16:	e02d      	b.n	8002a74 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002a18:	68f8      	ldr	r0, [r7, #12]
 8002a1a:	f000 f88d 	bl	8002b38 <I2C_IsAcknowledgeFailed>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d001      	beq.n	8002a28 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002a24:	2301      	movs	r3, #1
 8002a26:	e02d      	b.n	8002a84 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a2e:	d021      	beq.n	8002a74 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a30:	f7fe fcae 	bl	8001390 <HAL_GetTick>
 8002a34:	4602      	mov	r2, r0
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	1ad3      	subs	r3, r2, r3
 8002a3a:	68ba      	ldr	r2, [r7, #8]
 8002a3c:	429a      	cmp	r2, r3
 8002a3e:	d302      	bcc.n	8002a46 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d116      	bne.n	8002a74 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	2220      	movs	r2, #32
 8002a50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	2200      	movs	r2, #0
 8002a58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a60:	f043 0220 	orr.w	r2, r3, #32
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002a70:	2301      	movs	r3, #1
 8002a72:	e007      	b.n	8002a84 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	695b      	ldr	r3, [r3, #20]
 8002a7a:	f003 0304 	and.w	r3, r3, #4
 8002a7e:	2b04      	cmp	r3, #4
 8002a80:	d1ca      	bne.n	8002a18 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002a82:	2300      	movs	r3, #0
}
 8002a84:	4618      	mov	r0, r3
 8002a86:	3710      	adds	r7, #16
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bd80      	pop	{r7, pc}

08002a8c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b084      	sub	sp, #16
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	60f8      	str	r0, [r7, #12]
 8002a94:	60b9      	str	r1, [r7, #8]
 8002a96:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002a98:	e042      	b.n	8002b20 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	695b      	ldr	r3, [r3, #20]
 8002aa0:	f003 0310 	and.w	r3, r3, #16
 8002aa4:	2b10      	cmp	r3, #16
 8002aa6:	d119      	bne.n	8002adc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f06f 0210 	mvn.w	r2, #16
 8002ab0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	2220      	movs	r2, #32
 8002abc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	e029      	b.n	8002b30 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002adc:	f7fe fc58 	bl	8001390 <HAL_GetTick>
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	1ad3      	subs	r3, r2, r3
 8002ae6:	68ba      	ldr	r2, [r7, #8]
 8002ae8:	429a      	cmp	r2, r3
 8002aea:	d302      	bcc.n	8002af2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d116      	bne.n	8002b20 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	2200      	movs	r2, #0
 8002af6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	2220      	movs	r2, #32
 8002afc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	2200      	movs	r2, #0
 8002b04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b0c:	f043 0220 	orr.w	r2, r3, #32
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	2200      	movs	r2, #0
 8002b18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	e007      	b.n	8002b30 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	695b      	ldr	r3, [r3, #20]
 8002b26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b2a:	2b40      	cmp	r3, #64	; 0x40
 8002b2c:	d1b5      	bne.n	8002a9a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002b2e:	2300      	movs	r3, #0
}
 8002b30:	4618      	mov	r0, r3
 8002b32:	3710      	adds	r7, #16
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bd80      	pop	{r7, pc}

08002b38 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	b083      	sub	sp, #12
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	695b      	ldr	r3, [r3, #20]
 8002b46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b4e:	d11b      	bne.n	8002b88 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002b58:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2220      	movs	r2, #32
 8002b64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b74:	f043 0204 	orr.w	r2, r3, #4
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002b84:	2301      	movs	r3, #1
 8002b86:	e000      	b.n	8002b8a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002b88:	2300      	movs	r3, #0
}
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	370c      	adds	r7, #12
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bc80      	pop	{r7}
 8002b92:	4770      	bx	lr

08002b94 <HAL_PWR_EnterSLEEPMode>:
  *            @arg PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
  *            @arg PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b083      	sub	sp, #12
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
 8002b9c:	460b      	mov	r3, r1
 8002b9e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Select the regulator state in Sleep mode: Set PDDS and LPSDSR bit according to PWR_Regulator value */
  MODIFY_REG(PWR->CR, (PWR_CR_PDDS | PWR_CR_LPSDSR), Regulator);
 8002ba0:	4b0d      	ldr	r3, [pc, #52]	; (8002bd8 <HAL_PWR_EnterSLEEPMode+0x44>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f023 0203 	bic.w	r2, r3, #3
 8002ba8:	490b      	ldr	r1, [pc, #44]	; (8002bd8 <HAL_PWR_EnterSLEEPMode+0x44>)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	4313      	orrs	r3, r2
 8002bae:	600b      	str	r3, [r1, #0]

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8002bb0:	4b0a      	ldr	r3, [pc, #40]	; (8002bdc <HAL_PWR_EnterSLEEPMode+0x48>)
 8002bb2:	691b      	ldr	r3, [r3, #16]
 8002bb4:	4a09      	ldr	r2, [pc, #36]	; (8002bdc <HAL_PWR_EnterSLEEPMode+0x48>)
 8002bb6:	f023 0304 	bic.w	r3, r3, #4
 8002bba:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8002bbc:	78fb      	ldrb	r3, [r7, #3]
 8002bbe:	2b01      	cmp	r3, #1
 8002bc0:	d101      	bne.n	8002bc6 <HAL_PWR_EnterSLEEPMode+0x32>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8002bc2:	bf30      	wfi
    /* Request Wait For Event */
    __SEV();
    __WFE();
    __WFE();
  }
}
 8002bc4:	e002      	b.n	8002bcc <HAL_PWR_EnterSLEEPMode+0x38>
    __SEV();
 8002bc6:	bf40      	sev
    __WFE();
 8002bc8:	bf20      	wfe
    __WFE();
 8002bca:	bf20      	wfe
}
 8002bcc:	bf00      	nop
 8002bce:	370c      	adds	r7, #12
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bc80      	pop	{r7}
 8002bd4:	4770      	bx	lr
 8002bd6:	bf00      	nop
 8002bd8:	40007000 	.word	0x40007000
 8002bdc:	e000ed00 	.word	0xe000ed00

08002be0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b088      	sub	sp, #32
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d101      	bne.n	8002bf2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e31d      	b.n	800322e <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002bf2:	4b94      	ldr	r3, [pc, #592]	; (8002e44 <HAL_RCC_OscConfig+0x264>)
 8002bf4:	689b      	ldr	r3, [r3, #8]
 8002bf6:	f003 030c 	and.w	r3, r3, #12
 8002bfa:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002bfc:	4b91      	ldr	r3, [pc, #580]	; (8002e44 <HAL_RCC_OscConfig+0x264>)
 8002bfe:	689b      	ldr	r3, [r3, #8]
 8002c00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c04:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f003 0301 	and.w	r3, r3, #1
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d07b      	beq.n	8002d0a <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002c12:	69bb      	ldr	r3, [r7, #24]
 8002c14:	2b08      	cmp	r3, #8
 8002c16:	d006      	beq.n	8002c26 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002c18:	69bb      	ldr	r3, [r7, #24]
 8002c1a:	2b0c      	cmp	r3, #12
 8002c1c:	d10f      	bne.n	8002c3e <HAL_RCC_OscConfig+0x5e>
 8002c1e:	697b      	ldr	r3, [r7, #20]
 8002c20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c24:	d10b      	bne.n	8002c3e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c26:	4b87      	ldr	r3, [pc, #540]	; (8002e44 <HAL_RCC_OscConfig+0x264>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d06a      	beq.n	8002d08 <HAL_RCC_OscConfig+0x128>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d166      	bne.n	8002d08 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	e2f7      	b.n	800322e <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	2b01      	cmp	r3, #1
 8002c44:	d106      	bne.n	8002c54 <HAL_RCC_OscConfig+0x74>
 8002c46:	4b7f      	ldr	r3, [pc, #508]	; (8002e44 <HAL_RCC_OscConfig+0x264>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a7e      	ldr	r2, [pc, #504]	; (8002e44 <HAL_RCC_OscConfig+0x264>)
 8002c4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c50:	6013      	str	r3, [r2, #0]
 8002c52:	e02d      	b.n	8002cb0 <HAL_RCC_OscConfig+0xd0>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d10c      	bne.n	8002c76 <HAL_RCC_OscConfig+0x96>
 8002c5c:	4b79      	ldr	r3, [pc, #484]	; (8002e44 <HAL_RCC_OscConfig+0x264>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a78      	ldr	r2, [pc, #480]	; (8002e44 <HAL_RCC_OscConfig+0x264>)
 8002c62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c66:	6013      	str	r3, [r2, #0]
 8002c68:	4b76      	ldr	r3, [pc, #472]	; (8002e44 <HAL_RCC_OscConfig+0x264>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a75      	ldr	r2, [pc, #468]	; (8002e44 <HAL_RCC_OscConfig+0x264>)
 8002c6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c72:	6013      	str	r3, [r2, #0]
 8002c74:	e01c      	b.n	8002cb0 <HAL_RCC_OscConfig+0xd0>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	2b05      	cmp	r3, #5
 8002c7c:	d10c      	bne.n	8002c98 <HAL_RCC_OscConfig+0xb8>
 8002c7e:	4b71      	ldr	r3, [pc, #452]	; (8002e44 <HAL_RCC_OscConfig+0x264>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a70      	ldr	r2, [pc, #448]	; (8002e44 <HAL_RCC_OscConfig+0x264>)
 8002c84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c88:	6013      	str	r3, [r2, #0]
 8002c8a:	4b6e      	ldr	r3, [pc, #440]	; (8002e44 <HAL_RCC_OscConfig+0x264>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a6d      	ldr	r2, [pc, #436]	; (8002e44 <HAL_RCC_OscConfig+0x264>)
 8002c90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c94:	6013      	str	r3, [r2, #0]
 8002c96:	e00b      	b.n	8002cb0 <HAL_RCC_OscConfig+0xd0>
 8002c98:	4b6a      	ldr	r3, [pc, #424]	; (8002e44 <HAL_RCC_OscConfig+0x264>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a69      	ldr	r2, [pc, #420]	; (8002e44 <HAL_RCC_OscConfig+0x264>)
 8002c9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ca2:	6013      	str	r3, [r2, #0]
 8002ca4:	4b67      	ldr	r3, [pc, #412]	; (8002e44 <HAL_RCC_OscConfig+0x264>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a66      	ldr	r2, [pc, #408]	; (8002e44 <HAL_RCC_OscConfig+0x264>)
 8002caa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d013      	beq.n	8002ce0 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cb8:	f7fe fb6a 	bl	8001390 <HAL_GetTick>
 8002cbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002cbe:	e008      	b.n	8002cd2 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002cc0:	f7fe fb66 	bl	8001390 <HAL_GetTick>
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	1ad3      	subs	r3, r2, r3
 8002cca:	2b64      	cmp	r3, #100	; 0x64
 8002ccc:	d901      	bls.n	8002cd2 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8002cce:	2303      	movs	r3, #3
 8002cd0:	e2ad      	b.n	800322e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002cd2:	4b5c      	ldr	r3, [pc, #368]	; (8002e44 <HAL_RCC_OscConfig+0x264>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d0f0      	beq.n	8002cc0 <HAL_RCC_OscConfig+0xe0>
 8002cde:	e014      	b.n	8002d0a <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ce0:	f7fe fb56 	bl	8001390 <HAL_GetTick>
 8002ce4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002ce6:	e008      	b.n	8002cfa <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ce8:	f7fe fb52 	bl	8001390 <HAL_GetTick>
 8002cec:	4602      	mov	r2, r0
 8002cee:	693b      	ldr	r3, [r7, #16]
 8002cf0:	1ad3      	subs	r3, r2, r3
 8002cf2:	2b64      	cmp	r3, #100	; 0x64
 8002cf4:	d901      	bls.n	8002cfa <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8002cf6:	2303      	movs	r3, #3
 8002cf8:	e299      	b.n	800322e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002cfa:	4b52      	ldr	r3, [pc, #328]	; (8002e44 <HAL_RCC_OscConfig+0x264>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d1f0      	bne.n	8002ce8 <HAL_RCC_OscConfig+0x108>
 8002d06:	e000      	b.n	8002d0a <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f003 0302 	and.w	r3, r3, #2
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d05a      	beq.n	8002dcc <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002d16:	69bb      	ldr	r3, [r7, #24]
 8002d18:	2b04      	cmp	r3, #4
 8002d1a:	d005      	beq.n	8002d28 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002d1c:	69bb      	ldr	r3, [r7, #24]
 8002d1e:	2b0c      	cmp	r3, #12
 8002d20:	d119      	bne.n	8002d56 <HAL_RCC_OscConfig+0x176>
 8002d22:	697b      	ldr	r3, [r7, #20]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d116      	bne.n	8002d56 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d28:	4b46      	ldr	r3, [pc, #280]	; (8002e44 <HAL_RCC_OscConfig+0x264>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f003 0302 	and.w	r3, r3, #2
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d005      	beq.n	8002d40 <HAL_RCC_OscConfig+0x160>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	68db      	ldr	r3, [r3, #12]
 8002d38:	2b01      	cmp	r3, #1
 8002d3a:	d001      	beq.n	8002d40 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	e276      	b.n	800322e <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d40:	4b40      	ldr	r3, [pc, #256]	; (8002e44 <HAL_RCC_OscConfig+0x264>)
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	691b      	ldr	r3, [r3, #16]
 8002d4c:	021b      	lsls	r3, r3, #8
 8002d4e:	493d      	ldr	r1, [pc, #244]	; (8002e44 <HAL_RCC_OscConfig+0x264>)
 8002d50:	4313      	orrs	r3, r2
 8002d52:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d54:	e03a      	b.n	8002dcc <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	68db      	ldr	r3, [r3, #12]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d020      	beq.n	8002da0 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d5e:	4b3a      	ldr	r3, [pc, #232]	; (8002e48 <HAL_RCC_OscConfig+0x268>)
 8002d60:	2201      	movs	r2, #1
 8002d62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d64:	f7fe fb14 	bl	8001390 <HAL_GetTick>
 8002d68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002d6a:	e008      	b.n	8002d7e <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d6c:	f7fe fb10 	bl	8001390 <HAL_GetTick>
 8002d70:	4602      	mov	r2, r0
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	1ad3      	subs	r3, r2, r3
 8002d76:	2b02      	cmp	r3, #2
 8002d78:	d901      	bls.n	8002d7e <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002d7a:	2303      	movs	r3, #3
 8002d7c:	e257      	b.n	800322e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002d7e:	4b31      	ldr	r3, [pc, #196]	; (8002e44 <HAL_RCC_OscConfig+0x264>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f003 0302 	and.w	r3, r3, #2
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d0f0      	beq.n	8002d6c <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d8a:	4b2e      	ldr	r3, [pc, #184]	; (8002e44 <HAL_RCC_OscConfig+0x264>)
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	691b      	ldr	r3, [r3, #16]
 8002d96:	021b      	lsls	r3, r3, #8
 8002d98:	492a      	ldr	r1, [pc, #168]	; (8002e44 <HAL_RCC_OscConfig+0x264>)
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	604b      	str	r3, [r1, #4]
 8002d9e:	e015      	b.n	8002dcc <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002da0:	4b29      	ldr	r3, [pc, #164]	; (8002e48 <HAL_RCC_OscConfig+0x268>)
 8002da2:	2200      	movs	r2, #0
 8002da4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002da6:	f7fe faf3 	bl	8001390 <HAL_GetTick>
 8002daa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002dac:	e008      	b.n	8002dc0 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002dae:	f7fe faef 	bl	8001390 <HAL_GetTick>
 8002db2:	4602      	mov	r2, r0
 8002db4:	693b      	ldr	r3, [r7, #16]
 8002db6:	1ad3      	subs	r3, r2, r3
 8002db8:	2b02      	cmp	r3, #2
 8002dba:	d901      	bls.n	8002dc0 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8002dbc:	2303      	movs	r3, #3
 8002dbe:	e236      	b.n	800322e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002dc0:	4b20      	ldr	r3, [pc, #128]	; (8002e44 <HAL_RCC_OscConfig+0x264>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f003 0302 	and.w	r3, r3, #2
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d1f0      	bne.n	8002dae <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f003 0310 	and.w	r3, r3, #16
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	f000 80b8 	beq.w	8002f4a <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 8002dda:	69bb      	ldr	r3, [r7, #24]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d170      	bne.n	8002ec2 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002de0:	4b18      	ldr	r3, [pc, #96]	; (8002e44 <HAL_RCC_OscConfig+0x264>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d005      	beq.n	8002df8 <HAL_RCC_OscConfig+0x218>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	699b      	ldr	r3, [r3, #24]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d101      	bne.n	8002df8 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8002df4:	2301      	movs	r3, #1
 8002df6:	e21a      	b.n	800322e <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6a1a      	ldr	r2, [r3, #32]
 8002dfc:	4b11      	ldr	r3, [pc, #68]	; (8002e44 <HAL_RCC_OscConfig+0x264>)
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8002e04:	429a      	cmp	r2, r3
 8002e06:	d921      	bls.n	8002e4c <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6a1b      	ldr	r3, [r3, #32]
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	f000 fbd5 	bl	80035bc <RCC_SetFlashLatencyFromMSIRange>
 8002e12:	4603      	mov	r3, r0
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d001      	beq.n	8002e1c <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	e208      	b.n	800322e <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e1c:	4b09      	ldr	r3, [pc, #36]	; (8002e44 <HAL_RCC_OscConfig+0x264>)
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6a1b      	ldr	r3, [r3, #32]
 8002e28:	4906      	ldr	r1, [pc, #24]	; (8002e44 <HAL_RCC_OscConfig+0x264>)
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e2e:	4b05      	ldr	r3, [pc, #20]	; (8002e44 <HAL_RCC_OscConfig+0x264>)
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	69db      	ldr	r3, [r3, #28]
 8002e3a:	061b      	lsls	r3, r3, #24
 8002e3c:	4901      	ldr	r1, [pc, #4]	; (8002e44 <HAL_RCC_OscConfig+0x264>)
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	604b      	str	r3, [r1, #4]
 8002e42:	e020      	b.n	8002e86 <HAL_RCC_OscConfig+0x2a6>
 8002e44:	40023800 	.word	0x40023800
 8002e48:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e4c:	4ba4      	ldr	r3, [pc, #656]	; (80030e0 <HAL_RCC_OscConfig+0x500>)
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6a1b      	ldr	r3, [r3, #32]
 8002e58:	49a1      	ldr	r1, [pc, #644]	; (80030e0 <HAL_RCC_OscConfig+0x500>)
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e5e:	4ba0      	ldr	r3, [pc, #640]	; (80030e0 <HAL_RCC_OscConfig+0x500>)
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	69db      	ldr	r3, [r3, #28]
 8002e6a:	061b      	lsls	r3, r3, #24
 8002e6c:	499c      	ldr	r1, [pc, #624]	; (80030e0 <HAL_RCC_OscConfig+0x500>)
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6a1b      	ldr	r3, [r3, #32]
 8002e76:	4618      	mov	r0, r3
 8002e78:	f000 fba0 	bl	80035bc <RCC_SetFlashLatencyFromMSIRange>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d001      	beq.n	8002e86 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8002e82:	2301      	movs	r3, #1
 8002e84:	e1d3      	b.n	800322e <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6a1b      	ldr	r3, [r3, #32]
 8002e8a:	0b5b      	lsrs	r3, r3, #13
 8002e8c:	3301      	adds	r3, #1
 8002e8e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002e92:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002e96:	4a92      	ldr	r2, [pc, #584]	; (80030e0 <HAL_RCC_OscConfig+0x500>)
 8002e98:	6892      	ldr	r2, [r2, #8]
 8002e9a:	0912      	lsrs	r2, r2, #4
 8002e9c:	f002 020f 	and.w	r2, r2, #15
 8002ea0:	4990      	ldr	r1, [pc, #576]	; (80030e4 <HAL_RCC_OscConfig+0x504>)
 8002ea2:	5c8a      	ldrb	r2, [r1, r2]
 8002ea4:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002ea6:	4a90      	ldr	r2, [pc, #576]	; (80030e8 <HAL_RCC_OscConfig+0x508>)
 8002ea8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002eaa:	4b90      	ldr	r3, [pc, #576]	; (80030ec <HAL_RCC_OscConfig+0x50c>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f7fe fa22 	bl	80012f8 <HAL_InitTick>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002eb8:	7bfb      	ldrb	r3, [r7, #15]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d045      	beq.n	8002f4a <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8002ebe:	7bfb      	ldrb	r3, [r7, #15]
 8002ec0:	e1b5      	b.n	800322e <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	699b      	ldr	r3, [r3, #24]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d029      	beq.n	8002f1e <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002eca:	4b89      	ldr	r3, [pc, #548]	; (80030f0 <HAL_RCC_OscConfig+0x510>)
 8002ecc:	2201      	movs	r2, #1
 8002ece:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ed0:	f7fe fa5e 	bl	8001390 <HAL_GetTick>
 8002ed4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002ed6:	e008      	b.n	8002eea <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002ed8:	f7fe fa5a 	bl	8001390 <HAL_GetTick>
 8002edc:	4602      	mov	r2, r0
 8002ede:	693b      	ldr	r3, [r7, #16]
 8002ee0:	1ad3      	subs	r3, r2, r3
 8002ee2:	2b02      	cmp	r3, #2
 8002ee4:	d901      	bls.n	8002eea <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8002ee6:	2303      	movs	r3, #3
 8002ee8:	e1a1      	b.n	800322e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002eea:	4b7d      	ldr	r3, [pc, #500]	; (80030e0 <HAL_RCC_OscConfig+0x500>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d0f0      	beq.n	8002ed8 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ef6:	4b7a      	ldr	r3, [pc, #488]	; (80030e0 <HAL_RCC_OscConfig+0x500>)
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6a1b      	ldr	r3, [r3, #32]
 8002f02:	4977      	ldr	r1, [pc, #476]	; (80030e0 <HAL_RCC_OscConfig+0x500>)
 8002f04:	4313      	orrs	r3, r2
 8002f06:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002f08:	4b75      	ldr	r3, [pc, #468]	; (80030e0 <HAL_RCC_OscConfig+0x500>)
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	69db      	ldr	r3, [r3, #28]
 8002f14:	061b      	lsls	r3, r3, #24
 8002f16:	4972      	ldr	r1, [pc, #456]	; (80030e0 <HAL_RCC_OscConfig+0x500>)
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	604b      	str	r3, [r1, #4]
 8002f1c:	e015      	b.n	8002f4a <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002f1e:	4b74      	ldr	r3, [pc, #464]	; (80030f0 <HAL_RCC_OscConfig+0x510>)
 8002f20:	2200      	movs	r2, #0
 8002f22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f24:	f7fe fa34 	bl	8001390 <HAL_GetTick>
 8002f28:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002f2a:	e008      	b.n	8002f3e <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002f2c:	f7fe fa30 	bl	8001390 <HAL_GetTick>
 8002f30:	4602      	mov	r2, r0
 8002f32:	693b      	ldr	r3, [r7, #16]
 8002f34:	1ad3      	subs	r3, r2, r3
 8002f36:	2b02      	cmp	r3, #2
 8002f38:	d901      	bls.n	8002f3e <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8002f3a:	2303      	movs	r3, #3
 8002f3c:	e177      	b.n	800322e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002f3e:	4b68      	ldr	r3, [pc, #416]	; (80030e0 <HAL_RCC_OscConfig+0x500>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d1f0      	bne.n	8002f2c <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f003 0308 	and.w	r3, r3, #8
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d030      	beq.n	8002fb8 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	695b      	ldr	r3, [r3, #20]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d016      	beq.n	8002f8c <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f5e:	4b65      	ldr	r3, [pc, #404]	; (80030f4 <HAL_RCC_OscConfig+0x514>)
 8002f60:	2201      	movs	r2, #1
 8002f62:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f64:	f7fe fa14 	bl	8001390 <HAL_GetTick>
 8002f68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002f6a:	e008      	b.n	8002f7e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f6c:	f7fe fa10 	bl	8001390 <HAL_GetTick>
 8002f70:	4602      	mov	r2, r0
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	1ad3      	subs	r3, r2, r3
 8002f76:	2b02      	cmp	r3, #2
 8002f78:	d901      	bls.n	8002f7e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002f7a:	2303      	movs	r3, #3
 8002f7c:	e157      	b.n	800322e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002f7e:	4b58      	ldr	r3, [pc, #352]	; (80030e0 <HAL_RCC_OscConfig+0x500>)
 8002f80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f82:	f003 0302 	and.w	r3, r3, #2
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d0f0      	beq.n	8002f6c <HAL_RCC_OscConfig+0x38c>
 8002f8a:	e015      	b.n	8002fb8 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f8c:	4b59      	ldr	r3, [pc, #356]	; (80030f4 <HAL_RCC_OscConfig+0x514>)
 8002f8e:	2200      	movs	r2, #0
 8002f90:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f92:	f7fe f9fd 	bl	8001390 <HAL_GetTick>
 8002f96:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002f98:	e008      	b.n	8002fac <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f9a:	f7fe f9f9 	bl	8001390 <HAL_GetTick>
 8002f9e:	4602      	mov	r2, r0
 8002fa0:	693b      	ldr	r3, [r7, #16]
 8002fa2:	1ad3      	subs	r3, r2, r3
 8002fa4:	2b02      	cmp	r3, #2
 8002fa6:	d901      	bls.n	8002fac <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002fa8:	2303      	movs	r3, #3
 8002faa:	e140      	b.n	800322e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002fac:	4b4c      	ldr	r3, [pc, #304]	; (80030e0 <HAL_RCC_OscConfig+0x500>)
 8002fae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fb0:	f003 0302 	and.w	r3, r3, #2
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d1f0      	bne.n	8002f9a <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f003 0304 	and.w	r3, r3, #4
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	f000 80b5 	beq.w	8003130 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002fca:	4b45      	ldr	r3, [pc, #276]	; (80030e0 <HAL_RCC_OscConfig+0x500>)
 8002fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d10d      	bne.n	8002ff2 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fd6:	4b42      	ldr	r3, [pc, #264]	; (80030e0 <HAL_RCC_OscConfig+0x500>)
 8002fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fda:	4a41      	ldr	r2, [pc, #260]	; (80030e0 <HAL_RCC_OscConfig+0x500>)
 8002fdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fe0:	6253      	str	r3, [r2, #36]	; 0x24
 8002fe2:	4b3f      	ldr	r3, [pc, #252]	; (80030e0 <HAL_RCC_OscConfig+0x500>)
 8002fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fea:	60bb      	str	r3, [r7, #8]
 8002fec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ff2:	4b41      	ldr	r3, [pc, #260]	; (80030f8 <HAL_RCC_OscConfig+0x518>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d118      	bne.n	8003030 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ffe:	4b3e      	ldr	r3, [pc, #248]	; (80030f8 <HAL_RCC_OscConfig+0x518>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4a3d      	ldr	r2, [pc, #244]	; (80030f8 <HAL_RCC_OscConfig+0x518>)
 8003004:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003008:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800300a:	f7fe f9c1 	bl	8001390 <HAL_GetTick>
 800300e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003010:	e008      	b.n	8003024 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003012:	f7fe f9bd 	bl	8001390 <HAL_GetTick>
 8003016:	4602      	mov	r2, r0
 8003018:	693b      	ldr	r3, [r7, #16]
 800301a:	1ad3      	subs	r3, r2, r3
 800301c:	2b64      	cmp	r3, #100	; 0x64
 800301e:	d901      	bls.n	8003024 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8003020:	2303      	movs	r3, #3
 8003022:	e104      	b.n	800322e <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003024:	4b34      	ldr	r3, [pc, #208]	; (80030f8 <HAL_RCC_OscConfig+0x518>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800302c:	2b00      	cmp	r3, #0
 800302e:	d0f0      	beq.n	8003012 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	689b      	ldr	r3, [r3, #8]
 8003034:	2b01      	cmp	r3, #1
 8003036:	d106      	bne.n	8003046 <HAL_RCC_OscConfig+0x466>
 8003038:	4b29      	ldr	r3, [pc, #164]	; (80030e0 <HAL_RCC_OscConfig+0x500>)
 800303a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800303c:	4a28      	ldr	r2, [pc, #160]	; (80030e0 <HAL_RCC_OscConfig+0x500>)
 800303e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003042:	6353      	str	r3, [r2, #52]	; 0x34
 8003044:	e02d      	b.n	80030a2 <HAL_RCC_OscConfig+0x4c2>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	689b      	ldr	r3, [r3, #8]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d10c      	bne.n	8003068 <HAL_RCC_OscConfig+0x488>
 800304e:	4b24      	ldr	r3, [pc, #144]	; (80030e0 <HAL_RCC_OscConfig+0x500>)
 8003050:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003052:	4a23      	ldr	r2, [pc, #140]	; (80030e0 <HAL_RCC_OscConfig+0x500>)
 8003054:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003058:	6353      	str	r3, [r2, #52]	; 0x34
 800305a:	4b21      	ldr	r3, [pc, #132]	; (80030e0 <HAL_RCC_OscConfig+0x500>)
 800305c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800305e:	4a20      	ldr	r2, [pc, #128]	; (80030e0 <HAL_RCC_OscConfig+0x500>)
 8003060:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003064:	6353      	str	r3, [r2, #52]	; 0x34
 8003066:	e01c      	b.n	80030a2 <HAL_RCC_OscConfig+0x4c2>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	2b05      	cmp	r3, #5
 800306e:	d10c      	bne.n	800308a <HAL_RCC_OscConfig+0x4aa>
 8003070:	4b1b      	ldr	r3, [pc, #108]	; (80030e0 <HAL_RCC_OscConfig+0x500>)
 8003072:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003074:	4a1a      	ldr	r2, [pc, #104]	; (80030e0 <HAL_RCC_OscConfig+0x500>)
 8003076:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800307a:	6353      	str	r3, [r2, #52]	; 0x34
 800307c:	4b18      	ldr	r3, [pc, #96]	; (80030e0 <HAL_RCC_OscConfig+0x500>)
 800307e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003080:	4a17      	ldr	r2, [pc, #92]	; (80030e0 <HAL_RCC_OscConfig+0x500>)
 8003082:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003086:	6353      	str	r3, [r2, #52]	; 0x34
 8003088:	e00b      	b.n	80030a2 <HAL_RCC_OscConfig+0x4c2>
 800308a:	4b15      	ldr	r3, [pc, #84]	; (80030e0 <HAL_RCC_OscConfig+0x500>)
 800308c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800308e:	4a14      	ldr	r2, [pc, #80]	; (80030e0 <HAL_RCC_OscConfig+0x500>)
 8003090:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003094:	6353      	str	r3, [r2, #52]	; 0x34
 8003096:	4b12      	ldr	r3, [pc, #72]	; (80030e0 <HAL_RCC_OscConfig+0x500>)
 8003098:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800309a:	4a11      	ldr	r2, [pc, #68]	; (80030e0 <HAL_RCC_OscConfig+0x500>)
 800309c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80030a0:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	689b      	ldr	r3, [r3, #8]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d015      	beq.n	80030d6 <HAL_RCC_OscConfig+0x4f6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030aa:	f7fe f971 	bl	8001390 <HAL_GetTick>
 80030ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80030b0:	e00a      	b.n	80030c8 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030b2:	f7fe f96d 	bl	8001390 <HAL_GetTick>
 80030b6:	4602      	mov	r2, r0
 80030b8:	693b      	ldr	r3, [r7, #16]
 80030ba:	1ad3      	subs	r3, r2, r3
 80030bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d901      	bls.n	80030c8 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80030c4:	2303      	movs	r3, #3
 80030c6:	e0b2      	b.n	800322e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80030c8:	4b05      	ldr	r3, [pc, #20]	; (80030e0 <HAL_RCC_OscConfig+0x500>)
 80030ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d0ee      	beq.n	80030b2 <HAL_RCC_OscConfig+0x4d2>
 80030d4:	e023      	b.n	800311e <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030d6:	f7fe f95b 	bl	8001390 <HAL_GetTick>
 80030da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80030dc:	e019      	b.n	8003112 <HAL_RCC_OscConfig+0x532>
 80030de:	bf00      	nop
 80030e0:	40023800 	.word	0x40023800
 80030e4:	080042f8 	.word	0x080042f8
 80030e8:	20000008 	.word	0x20000008
 80030ec:	2000000c 	.word	0x2000000c
 80030f0:	42470020 	.word	0x42470020
 80030f4:	42470680 	.word	0x42470680
 80030f8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030fc:	f7fe f948 	bl	8001390 <HAL_GetTick>
 8003100:	4602      	mov	r2, r0
 8003102:	693b      	ldr	r3, [r7, #16]
 8003104:	1ad3      	subs	r3, r2, r3
 8003106:	f241 3288 	movw	r2, #5000	; 0x1388
 800310a:	4293      	cmp	r3, r2
 800310c:	d901      	bls.n	8003112 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 800310e:	2303      	movs	r3, #3
 8003110:	e08d      	b.n	800322e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003112:	4b49      	ldr	r3, [pc, #292]	; (8003238 <HAL_RCC_OscConfig+0x658>)
 8003114:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003116:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800311a:	2b00      	cmp	r3, #0
 800311c:	d1ee      	bne.n	80030fc <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800311e:	7ffb      	ldrb	r3, [r7, #31]
 8003120:	2b01      	cmp	r3, #1
 8003122:	d105      	bne.n	8003130 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003124:	4b44      	ldr	r3, [pc, #272]	; (8003238 <HAL_RCC_OscConfig+0x658>)
 8003126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003128:	4a43      	ldr	r2, [pc, #268]	; (8003238 <HAL_RCC_OscConfig+0x658>)
 800312a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800312e:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003134:	2b00      	cmp	r3, #0
 8003136:	d079      	beq.n	800322c <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003138:	69bb      	ldr	r3, [r7, #24]
 800313a:	2b0c      	cmp	r3, #12
 800313c:	d056      	beq.n	80031ec <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003142:	2b02      	cmp	r3, #2
 8003144:	d13b      	bne.n	80031be <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003146:	4b3d      	ldr	r3, [pc, #244]	; (800323c <HAL_RCC_OscConfig+0x65c>)
 8003148:	2200      	movs	r2, #0
 800314a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800314c:	f7fe f920 	bl	8001390 <HAL_GetTick>
 8003150:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003152:	e008      	b.n	8003166 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003154:	f7fe f91c 	bl	8001390 <HAL_GetTick>
 8003158:	4602      	mov	r2, r0
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	1ad3      	subs	r3, r2, r3
 800315e:	2b02      	cmp	r3, #2
 8003160:	d901      	bls.n	8003166 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8003162:	2303      	movs	r3, #3
 8003164:	e063      	b.n	800322e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003166:	4b34      	ldr	r3, [pc, #208]	; (8003238 <HAL_RCC_OscConfig+0x658>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800316e:	2b00      	cmp	r3, #0
 8003170:	d1f0      	bne.n	8003154 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003172:	4b31      	ldr	r3, [pc, #196]	; (8003238 <HAL_RCC_OscConfig+0x658>)
 8003174:	689b      	ldr	r3, [r3, #8]
 8003176:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003182:	4319      	orrs	r1, r3
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003188:	430b      	orrs	r3, r1
 800318a:	492b      	ldr	r1, [pc, #172]	; (8003238 <HAL_RCC_OscConfig+0x658>)
 800318c:	4313      	orrs	r3, r2
 800318e:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003190:	4b2a      	ldr	r3, [pc, #168]	; (800323c <HAL_RCC_OscConfig+0x65c>)
 8003192:	2201      	movs	r2, #1
 8003194:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003196:	f7fe f8fb 	bl	8001390 <HAL_GetTick>
 800319a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800319c:	e008      	b.n	80031b0 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800319e:	f7fe f8f7 	bl	8001390 <HAL_GetTick>
 80031a2:	4602      	mov	r2, r0
 80031a4:	693b      	ldr	r3, [r7, #16]
 80031a6:	1ad3      	subs	r3, r2, r3
 80031a8:	2b02      	cmp	r3, #2
 80031aa:	d901      	bls.n	80031b0 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 80031ac:	2303      	movs	r3, #3
 80031ae:	e03e      	b.n	800322e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80031b0:	4b21      	ldr	r3, [pc, #132]	; (8003238 <HAL_RCC_OscConfig+0x658>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d0f0      	beq.n	800319e <HAL_RCC_OscConfig+0x5be>
 80031bc:	e036      	b.n	800322c <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031be:	4b1f      	ldr	r3, [pc, #124]	; (800323c <HAL_RCC_OscConfig+0x65c>)
 80031c0:	2200      	movs	r2, #0
 80031c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031c4:	f7fe f8e4 	bl	8001390 <HAL_GetTick>
 80031c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80031ca:	e008      	b.n	80031de <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031cc:	f7fe f8e0 	bl	8001390 <HAL_GetTick>
 80031d0:	4602      	mov	r2, r0
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	1ad3      	subs	r3, r2, r3
 80031d6:	2b02      	cmp	r3, #2
 80031d8:	d901      	bls.n	80031de <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 80031da:	2303      	movs	r3, #3
 80031dc:	e027      	b.n	800322e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80031de:	4b16      	ldr	r3, [pc, #88]	; (8003238 <HAL_RCC_OscConfig+0x658>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d1f0      	bne.n	80031cc <HAL_RCC_OscConfig+0x5ec>
 80031ea:	e01f      	b.n	800322c <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f0:	2b01      	cmp	r3, #1
 80031f2:	d101      	bne.n	80031f8 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 80031f4:	2301      	movs	r3, #1
 80031f6:	e01a      	b.n	800322e <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80031f8:	4b0f      	ldr	r3, [pc, #60]	; (8003238 <HAL_RCC_OscConfig+0x658>)
 80031fa:	689b      	ldr	r3, [r3, #8]
 80031fc:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031fe:	697b      	ldr	r3, [r7, #20]
 8003200:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003208:	429a      	cmp	r2, r3
 800320a:	d10d      	bne.n	8003228 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800320c:	697b      	ldr	r3, [r7, #20]
 800320e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003216:	429a      	cmp	r2, r3
 8003218:	d106      	bne.n	8003228 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003224:	429a      	cmp	r2, r3
 8003226:	d001      	beq.n	800322c <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8003228:	2301      	movs	r3, #1
 800322a:	e000      	b.n	800322e <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 800322c:	2300      	movs	r3, #0
}
 800322e:	4618      	mov	r0, r3
 8003230:	3720      	adds	r7, #32
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}
 8003236:	bf00      	nop
 8003238:	40023800 	.word	0x40023800
 800323c:	42470060 	.word	0x42470060

08003240 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b084      	sub	sp, #16
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
 8003248:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d101      	bne.n	8003254 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003250:	2301      	movs	r3, #1
 8003252:	e11a      	b.n	800348a <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003254:	4b8f      	ldr	r3, [pc, #572]	; (8003494 <HAL_RCC_ClockConfig+0x254>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f003 0301 	and.w	r3, r3, #1
 800325c:	683a      	ldr	r2, [r7, #0]
 800325e:	429a      	cmp	r2, r3
 8003260:	d919      	bls.n	8003296 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	2b01      	cmp	r3, #1
 8003266:	d105      	bne.n	8003274 <HAL_RCC_ClockConfig+0x34>
 8003268:	4b8a      	ldr	r3, [pc, #552]	; (8003494 <HAL_RCC_ClockConfig+0x254>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a89      	ldr	r2, [pc, #548]	; (8003494 <HAL_RCC_ClockConfig+0x254>)
 800326e:	f043 0304 	orr.w	r3, r3, #4
 8003272:	6013      	str	r3, [r2, #0]
 8003274:	4b87      	ldr	r3, [pc, #540]	; (8003494 <HAL_RCC_ClockConfig+0x254>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f023 0201 	bic.w	r2, r3, #1
 800327c:	4985      	ldr	r1, [pc, #532]	; (8003494 <HAL_RCC_ClockConfig+0x254>)
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	4313      	orrs	r3, r2
 8003282:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003284:	4b83      	ldr	r3, [pc, #524]	; (8003494 <HAL_RCC_ClockConfig+0x254>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f003 0301 	and.w	r3, r3, #1
 800328c:	683a      	ldr	r2, [r7, #0]
 800328e:	429a      	cmp	r2, r3
 8003290:	d001      	beq.n	8003296 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8003292:	2301      	movs	r3, #1
 8003294:	e0f9      	b.n	800348a <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f003 0302 	and.w	r3, r3, #2
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d008      	beq.n	80032b4 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032a2:	4b7d      	ldr	r3, [pc, #500]	; (8003498 <HAL_RCC_ClockConfig+0x258>)
 80032a4:	689b      	ldr	r3, [r3, #8]
 80032a6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	689b      	ldr	r3, [r3, #8]
 80032ae:	497a      	ldr	r1, [pc, #488]	; (8003498 <HAL_RCC_ClockConfig+0x258>)
 80032b0:	4313      	orrs	r3, r2
 80032b2:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f003 0301 	and.w	r3, r3, #1
 80032bc:	2b00      	cmp	r3, #0
 80032be:	f000 808e 	beq.w	80033de <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	2b02      	cmp	r3, #2
 80032c8:	d107      	bne.n	80032da <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80032ca:	4b73      	ldr	r3, [pc, #460]	; (8003498 <HAL_RCC_ClockConfig+0x258>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d121      	bne.n	800331a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80032d6:	2301      	movs	r3, #1
 80032d8:	e0d7      	b.n	800348a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	2b03      	cmp	r3, #3
 80032e0:	d107      	bne.n	80032f2 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80032e2:	4b6d      	ldr	r3, [pc, #436]	; (8003498 <HAL_RCC_ClockConfig+0x258>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d115      	bne.n	800331a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80032ee:	2301      	movs	r3, #1
 80032f0:	e0cb      	b.n	800348a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	2b01      	cmp	r3, #1
 80032f8:	d107      	bne.n	800330a <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80032fa:	4b67      	ldr	r3, [pc, #412]	; (8003498 <HAL_RCC_ClockConfig+0x258>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f003 0302 	and.w	r3, r3, #2
 8003302:	2b00      	cmp	r3, #0
 8003304:	d109      	bne.n	800331a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8003306:	2301      	movs	r3, #1
 8003308:	e0bf      	b.n	800348a <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800330a:	4b63      	ldr	r3, [pc, #396]	; (8003498 <HAL_RCC_ClockConfig+0x258>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003312:	2b00      	cmp	r3, #0
 8003314:	d101      	bne.n	800331a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8003316:	2301      	movs	r3, #1
 8003318:	e0b7      	b.n	800348a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800331a:	4b5f      	ldr	r3, [pc, #380]	; (8003498 <HAL_RCC_ClockConfig+0x258>)
 800331c:	689b      	ldr	r3, [r3, #8]
 800331e:	f023 0203 	bic.w	r2, r3, #3
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	495c      	ldr	r1, [pc, #368]	; (8003498 <HAL_RCC_ClockConfig+0x258>)
 8003328:	4313      	orrs	r3, r2
 800332a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800332c:	f7fe f830 	bl	8001390 <HAL_GetTick>
 8003330:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	2b02      	cmp	r3, #2
 8003338:	d112      	bne.n	8003360 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800333a:	e00a      	b.n	8003352 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800333c:	f7fe f828 	bl	8001390 <HAL_GetTick>
 8003340:	4602      	mov	r2, r0
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	1ad3      	subs	r3, r2, r3
 8003346:	f241 3288 	movw	r2, #5000	; 0x1388
 800334a:	4293      	cmp	r3, r2
 800334c:	d901      	bls.n	8003352 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 800334e:	2303      	movs	r3, #3
 8003350:	e09b      	b.n	800348a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003352:	4b51      	ldr	r3, [pc, #324]	; (8003498 <HAL_RCC_ClockConfig+0x258>)
 8003354:	689b      	ldr	r3, [r3, #8]
 8003356:	f003 030c 	and.w	r3, r3, #12
 800335a:	2b08      	cmp	r3, #8
 800335c:	d1ee      	bne.n	800333c <HAL_RCC_ClockConfig+0xfc>
 800335e:	e03e      	b.n	80033de <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	2b03      	cmp	r3, #3
 8003366:	d112      	bne.n	800338e <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003368:	e00a      	b.n	8003380 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800336a:	f7fe f811 	bl	8001390 <HAL_GetTick>
 800336e:	4602      	mov	r2, r0
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	1ad3      	subs	r3, r2, r3
 8003374:	f241 3288 	movw	r2, #5000	; 0x1388
 8003378:	4293      	cmp	r3, r2
 800337a:	d901      	bls.n	8003380 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 800337c:	2303      	movs	r3, #3
 800337e:	e084      	b.n	800348a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003380:	4b45      	ldr	r3, [pc, #276]	; (8003498 <HAL_RCC_ClockConfig+0x258>)
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	f003 030c 	and.w	r3, r3, #12
 8003388:	2b0c      	cmp	r3, #12
 800338a:	d1ee      	bne.n	800336a <HAL_RCC_ClockConfig+0x12a>
 800338c:	e027      	b.n	80033de <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	2b01      	cmp	r3, #1
 8003394:	d11d      	bne.n	80033d2 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003396:	e00a      	b.n	80033ae <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003398:	f7fd fffa 	bl	8001390 <HAL_GetTick>
 800339c:	4602      	mov	r2, r0
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	1ad3      	subs	r3, r2, r3
 80033a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d901      	bls.n	80033ae <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 80033aa:	2303      	movs	r3, #3
 80033ac:	e06d      	b.n	800348a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80033ae:	4b3a      	ldr	r3, [pc, #232]	; (8003498 <HAL_RCC_ClockConfig+0x258>)
 80033b0:	689b      	ldr	r3, [r3, #8]
 80033b2:	f003 030c 	and.w	r3, r3, #12
 80033b6:	2b04      	cmp	r3, #4
 80033b8:	d1ee      	bne.n	8003398 <HAL_RCC_ClockConfig+0x158>
 80033ba:	e010      	b.n	80033de <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033bc:	f7fd ffe8 	bl	8001390 <HAL_GetTick>
 80033c0:	4602      	mov	r2, r0
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	1ad3      	subs	r3, r2, r3
 80033c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d901      	bls.n	80033d2 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 80033ce:	2303      	movs	r3, #3
 80033d0:	e05b      	b.n	800348a <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80033d2:	4b31      	ldr	r3, [pc, #196]	; (8003498 <HAL_RCC_ClockConfig+0x258>)
 80033d4:	689b      	ldr	r3, [r3, #8]
 80033d6:	f003 030c 	and.w	r3, r3, #12
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d1ee      	bne.n	80033bc <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80033de:	4b2d      	ldr	r3, [pc, #180]	; (8003494 <HAL_RCC_ClockConfig+0x254>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f003 0301 	and.w	r3, r3, #1
 80033e6:	683a      	ldr	r2, [r7, #0]
 80033e8:	429a      	cmp	r2, r3
 80033ea:	d219      	bcs.n	8003420 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	2b01      	cmp	r3, #1
 80033f0:	d105      	bne.n	80033fe <HAL_RCC_ClockConfig+0x1be>
 80033f2:	4b28      	ldr	r3, [pc, #160]	; (8003494 <HAL_RCC_ClockConfig+0x254>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a27      	ldr	r2, [pc, #156]	; (8003494 <HAL_RCC_ClockConfig+0x254>)
 80033f8:	f043 0304 	orr.w	r3, r3, #4
 80033fc:	6013      	str	r3, [r2, #0]
 80033fe:	4b25      	ldr	r3, [pc, #148]	; (8003494 <HAL_RCC_ClockConfig+0x254>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f023 0201 	bic.w	r2, r3, #1
 8003406:	4923      	ldr	r1, [pc, #140]	; (8003494 <HAL_RCC_ClockConfig+0x254>)
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	4313      	orrs	r3, r2
 800340c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800340e:	4b21      	ldr	r3, [pc, #132]	; (8003494 <HAL_RCC_ClockConfig+0x254>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f003 0301 	and.w	r3, r3, #1
 8003416:	683a      	ldr	r2, [r7, #0]
 8003418:	429a      	cmp	r2, r3
 800341a:	d001      	beq.n	8003420 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 800341c:	2301      	movs	r3, #1
 800341e:	e034      	b.n	800348a <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f003 0304 	and.w	r3, r3, #4
 8003428:	2b00      	cmp	r3, #0
 800342a:	d008      	beq.n	800343e <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800342c:	4b1a      	ldr	r3, [pc, #104]	; (8003498 <HAL_RCC_ClockConfig+0x258>)
 800342e:	689b      	ldr	r3, [r3, #8]
 8003430:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	68db      	ldr	r3, [r3, #12]
 8003438:	4917      	ldr	r1, [pc, #92]	; (8003498 <HAL_RCC_ClockConfig+0x258>)
 800343a:	4313      	orrs	r3, r2
 800343c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f003 0308 	and.w	r3, r3, #8
 8003446:	2b00      	cmp	r3, #0
 8003448:	d009      	beq.n	800345e <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800344a:	4b13      	ldr	r3, [pc, #76]	; (8003498 <HAL_RCC_ClockConfig+0x258>)
 800344c:	689b      	ldr	r3, [r3, #8]
 800344e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	691b      	ldr	r3, [r3, #16]
 8003456:	00db      	lsls	r3, r3, #3
 8003458:	490f      	ldr	r1, [pc, #60]	; (8003498 <HAL_RCC_ClockConfig+0x258>)
 800345a:	4313      	orrs	r3, r2
 800345c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800345e:	f000 f823 	bl	80034a8 <HAL_RCC_GetSysClockFreq>
 8003462:	4601      	mov	r1, r0
 8003464:	4b0c      	ldr	r3, [pc, #48]	; (8003498 <HAL_RCC_ClockConfig+0x258>)
 8003466:	689b      	ldr	r3, [r3, #8]
 8003468:	091b      	lsrs	r3, r3, #4
 800346a:	f003 030f 	and.w	r3, r3, #15
 800346e:	4a0b      	ldr	r2, [pc, #44]	; (800349c <HAL_RCC_ClockConfig+0x25c>)
 8003470:	5cd3      	ldrb	r3, [r2, r3]
 8003472:	fa21 f303 	lsr.w	r3, r1, r3
 8003476:	4a0a      	ldr	r2, [pc, #40]	; (80034a0 <HAL_RCC_ClockConfig+0x260>)
 8003478:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800347a:	4b0a      	ldr	r3, [pc, #40]	; (80034a4 <HAL_RCC_ClockConfig+0x264>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4618      	mov	r0, r3
 8003480:	f7fd ff3a 	bl	80012f8 <HAL_InitTick>
 8003484:	4603      	mov	r3, r0
 8003486:	72fb      	strb	r3, [r7, #11]

  return status;
 8003488:	7afb      	ldrb	r3, [r7, #11]
}
 800348a:	4618      	mov	r0, r3
 800348c:	3710      	adds	r7, #16
 800348e:	46bd      	mov	sp, r7
 8003490:	bd80      	pop	{r7, pc}
 8003492:	bf00      	nop
 8003494:	40023c00 	.word	0x40023c00
 8003498:	40023800 	.word	0x40023800
 800349c:	080042f8 	.word	0x080042f8
 80034a0:	20000008 	.word	0x20000008
 80034a4:	2000000c 	.word	0x2000000c

080034a8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034a8:	b480      	push	{r7}
 80034aa:	b087      	sub	sp, #28
 80034ac:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 80034ae:	4b26      	ldr	r3, [pc, #152]	; (8003548 <HAL_RCC_GetSysClockFreq+0xa0>)
 80034b0:	689b      	ldr	r3, [r3, #8]
 80034b2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	f003 030c 	and.w	r3, r3, #12
 80034ba:	2b08      	cmp	r3, #8
 80034bc:	d006      	beq.n	80034cc <HAL_RCC_GetSysClockFreq+0x24>
 80034be:	2b0c      	cmp	r3, #12
 80034c0:	d007      	beq.n	80034d2 <HAL_RCC_GetSysClockFreq+0x2a>
 80034c2:	2b04      	cmp	r3, #4
 80034c4:	d12c      	bne.n	8003520 <HAL_RCC_GetSysClockFreq+0x78>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80034c6:	4b21      	ldr	r3, [pc, #132]	; (800354c <HAL_RCC_GetSysClockFreq+0xa4>)
 80034c8:	613b      	str	r3, [r7, #16]
      break;
 80034ca:	e037      	b.n	800353c <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80034cc:	4b20      	ldr	r3, [pc, #128]	; (8003550 <HAL_RCC_GetSysClockFreq+0xa8>)
 80034ce:	613b      	str	r3, [r7, #16]
      break;
 80034d0:	e034      	b.n	800353c <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	0c9b      	lsrs	r3, r3, #18
 80034d6:	f003 030f 	and.w	r3, r3, #15
 80034da:	4a1e      	ldr	r2, [pc, #120]	; (8003554 <HAL_RCC_GetSysClockFreq+0xac>)
 80034dc:	5cd3      	ldrb	r3, [r2, r3]
 80034de:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	0d9b      	lsrs	r3, r3, #22
 80034e4:	f003 0303 	and.w	r3, r3, #3
 80034e8:	3301      	adds	r3, #1
 80034ea:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80034ec:	4b16      	ldr	r3, [pc, #88]	; (8003548 <HAL_RCC_GetSysClockFreq+0xa0>)
 80034ee:	689b      	ldr	r3, [r3, #8]
 80034f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d008      	beq.n	800350a <HAL_RCC_GetSysClockFreq+0x62>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	4a15      	ldr	r2, [pc, #84]	; (8003550 <HAL_RCC_GetSysClockFreq+0xa8>)
 80034fc:	fb02 f203 	mul.w	r2, r2, r3
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	fbb2 f3f3 	udiv	r3, r2, r3
 8003506:	617b      	str	r3, [r7, #20]
 8003508:	e007      	b.n	800351a <HAL_RCC_GetSysClockFreq+0x72>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE * pllm) / plld;
 800350a:	68bb      	ldr	r3, [r7, #8]
 800350c:	4a0f      	ldr	r2, [pc, #60]	; (800354c <HAL_RCC_GetSysClockFreq+0xa4>)
 800350e:	fb02 f203 	mul.w	r2, r2, r3
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	fbb2 f3f3 	udiv	r3, r2, r3
 8003518:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllvco;
 800351a:	697b      	ldr	r3, [r7, #20]
 800351c:	613b      	str	r3, [r7, #16]
      break;
 800351e:	e00d      	b.n	800353c <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8003520:	4b09      	ldr	r3, [pc, #36]	; (8003548 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	0b5b      	lsrs	r3, r3, #13
 8003526:	f003 0307 	and.w	r3, r3, #7
 800352a:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	3301      	adds	r3, #1
 8003530:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003534:	fa02 f303 	lsl.w	r3, r2, r3
 8003538:	613b      	str	r3, [r7, #16]
      break;
 800353a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800353c:	693b      	ldr	r3, [r7, #16]
}
 800353e:	4618      	mov	r0, r3
 8003540:	371c      	adds	r7, #28
 8003542:	46bd      	mov	sp, r7
 8003544:	bc80      	pop	{r7}
 8003546:	4770      	bx	lr
 8003548:	40023800 	.word	0x40023800
 800354c:	00f42400 	.word	0x00f42400
 8003550:	007a1200 	.word	0x007a1200
 8003554:	080042ec 	.word	0x080042ec

08003558 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003558:	b480      	push	{r7}
 800355a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800355c:	4b02      	ldr	r3, [pc, #8]	; (8003568 <HAL_RCC_GetHCLKFreq+0x10>)
 800355e:	681b      	ldr	r3, [r3, #0]
}
 8003560:	4618      	mov	r0, r3
 8003562:	46bd      	mov	sp, r7
 8003564:	bc80      	pop	{r7}
 8003566:	4770      	bx	lr
 8003568:	20000008 	.word	0x20000008

0800356c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003570:	f7ff fff2 	bl	8003558 <HAL_RCC_GetHCLKFreq>
 8003574:	4601      	mov	r1, r0
 8003576:	4b05      	ldr	r3, [pc, #20]	; (800358c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003578:	689b      	ldr	r3, [r3, #8]
 800357a:	0a1b      	lsrs	r3, r3, #8
 800357c:	f003 0307 	and.w	r3, r3, #7
 8003580:	4a03      	ldr	r2, [pc, #12]	; (8003590 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003582:	5cd3      	ldrb	r3, [r2, r3]
 8003584:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003588:	4618      	mov	r0, r3
 800358a:	bd80      	pop	{r7, pc}
 800358c:	40023800 	.word	0x40023800
 8003590:	08004308 	.word	0x08004308

08003594 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003598:	f7ff ffde 	bl	8003558 <HAL_RCC_GetHCLKFreq>
 800359c:	4601      	mov	r1, r0
 800359e:	4b05      	ldr	r3, [pc, #20]	; (80035b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80035a0:	689b      	ldr	r3, [r3, #8]
 80035a2:	0adb      	lsrs	r3, r3, #11
 80035a4:	f003 0307 	and.w	r3, r3, #7
 80035a8:	4a03      	ldr	r2, [pc, #12]	; (80035b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80035aa:	5cd3      	ldrb	r3, [r2, r3]
 80035ac:	fa21 f303 	lsr.w	r3, r1, r3
}
 80035b0:	4618      	mov	r0, r3
 80035b2:	bd80      	pop	{r7, pc}
 80035b4:	40023800 	.word	0x40023800
 80035b8:	08004308 	.word	0x08004308

080035bc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 80035bc:	b480      	push	{r7}
 80035be:	b087      	sub	sp, #28
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80035c4:	2300      	movs	r3, #0
 80035c6:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80035c8:	4b29      	ldr	r3, [pc, #164]	; (8003670 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80035ca:	689b      	ldr	r3, [r3, #8]
 80035cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d12c      	bne.n	800362e <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80035d4:	4b26      	ldr	r3, [pc, #152]	; (8003670 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80035d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d005      	beq.n	80035ec <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80035e0:	4b24      	ldr	r3, [pc, #144]	; (8003674 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 80035e8:	617b      	str	r3, [r7, #20]
 80035ea:	e016      	b.n	800361a <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035ec:	4b20      	ldr	r3, [pc, #128]	; (8003670 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80035ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f0:	4a1f      	ldr	r2, [pc, #124]	; (8003670 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80035f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035f6:	6253      	str	r3, [r2, #36]	; 0x24
 80035f8:	4b1d      	ldr	r3, [pc, #116]	; (8003670 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80035fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003600:	60fb      	str	r3, [r7, #12]
 8003602:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8003604:	4b1b      	ldr	r3, [pc, #108]	; (8003674 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 800360c:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 800360e:	4b18      	ldr	r3, [pc, #96]	; (8003670 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003612:	4a17      	ldr	r2, [pc, #92]	; (8003670 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003614:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003618:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8003620:	d105      	bne.n	800362e <RCC_SetFlashLatencyFromMSIRange+0x72>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003628:	d101      	bne.n	800362e <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 800362a:	2301      	movs	r3, #1
 800362c:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	2b01      	cmp	r3, #1
 8003632:	d105      	bne.n	8003640 <RCC_SetFlashLatencyFromMSIRange+0x84>
 8003634:	4b10      	ldr	r3, [pc, #64]	; (8003678 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a0f      	ldr	r2, [pc, #60]	; (8003678 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800363a:	f043 0304 	orr.w	r3, r3, #4
 800363e:	6013      	str	r3, [r2, #0]
 8003640:	4b0d      	ldr	r3, [pc, #52]	; (8003678 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f023 0201 	bic.w	r2, r3, #1
 8003648:	490b      	ldr	r1, [pc, #44]	; (8003678 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	4313      	orrs	r3, r2
 800364e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003650:	4b09      	ldr	r3, [pc, #36]	; (8003678 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f003 0301 	and.w	r3, r3, #1
 8003658:	693a      	ldr	r2, [r7, #16]
 800365a:	429a      	cmp	r2, r3
 800365c:	d001      	beq.n	8003662 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 800365e:	2301      	movs	r3, #1
 8003660:	e000      	b.n	8003664 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8003662:	2300      	movs	r3, #0
}
 8003664:	4618      	mov	r0, r3
 8003666:	371c      	adds	r7, #28
 8003668:	46bd      	mov	sp, r7
 800366a:	bc80      	pop	{r7}
 800366c:	4770      	bx	lr
 800366e:	bf00      	nop
 8003670:	40023800 	.word	0x40023800
 8003674:	40007000 	.word	0x40007000
 8003678:	40023c00 	.word	0x40023c00

0800367c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b082      	sub	sp, #8
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d101      	bne.n	800368e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800368a:	2301      	movs	r3, #1
 800368c:	e03f      	b.n	800370e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003694:	b2db      	uxtb	r3, r3
 8003696:	2b00      	cmp	r3, #0
 8003698:	d106      	bne.n	80036a8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2200      	movs	r2, #0
 800369e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80036a2:	6878      	ldr	r0, [r7, #4]
 80036a4:	f7fd fd02 	bl	80010ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2224      	movs	r2, #36	; 0x24
 80036ac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	68da      	ldr	r2, [r3, #12]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80036be:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80036c0:	6878      	ldr	r0, [r7, #4]
 80036c2:	f000 fb83 	bl	8003dcc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	691a      	ldr	r2, [r3, #16]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80036d4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	695a      	ldr	r2, [r3, #20]
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80036e4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	68da      	ldr	r2, [r3, #12]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80036f4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2200      	movs	r2, #0
 80036fa:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2220      	movs	r2, #32
 8003700:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2220      	movs	r2, #32
 8003708:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800370c:	2300      	movs	r3, #0
}
 800370e:	4618      	mov	r0, r3
 8003710:	3708      	adds	r7, #8
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}

08003716 <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003716:	b580      	push	{r7, lr}
 8003718:	b088      	sub	sp, #32
 800371a:	af02      	add	r7, sp, #8
 800371c:	60f8      	str	r0, [r7, #12]
 800371e:	60b9      	str	r1, [r7, #8]
 8003720:	603b      	str	r3, [r7, #0]
 8003722:	4613      	mov	r3, r2
 8003724:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8003726:	2300      	movs	r3, #0
 8003728:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003730:	b2db      	uxtb	r3, r3
 8003732:	2b20      	cmp	r3, #32
 8003734:	f040 8083 	bne.w	800383e <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8003738:	68bb      	ldr	r3, [r7, #8]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d002      	beq.n	8003744 <HAL_UART_Transmit+0x2e>
 800373e:	88fb      	ldrh	r3, [r7, #6]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d101      	bne.n	8003748 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8003744:	2301      	movs	r3, #1
 8003746:	e07b      	b.n	8003840 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800374e:	2b01      	cmp	r3, #1
 8003750:	d101      	bne.n	8003756 <HAL_UART_Transmit+0x40>
 8003752:	2302      	movs	r3, #2
 8003754:	e074      	b.n	8003840 <HAL_UART_Transmit+0x12a>
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	2201      	movs	r2, #1
 800375a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	2200      	movs	r2, #0
 8003762:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	2221      	movs	r2, #33	; 0x21
 8003768:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800376c:	f7fd fe10 	bl	8001390 <HAL_GetTick>
 8003770:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	88fa      	ldrh	r2, [r7, #6]
 8003776:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	88fa      	ldrh	r2, [r7, #6]
 800377c:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800377e:	e042      	b.n	8003806 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003784:	b29b      	uxth	r3, r3
 8003786:	3b01      	subs	r3, #1
 8003788:	b29a      	uxth	r2, r3
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	689b      	ldr	r3, [r3, #8]
 8003792:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003796:	d122      	bne.n	80037de <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	9300      	str	r3, [sp, #0]
 800379c:	697b      	ldr	r3, [r7, #20]
 800379e:	2200      	movs	r2, #0
 80037a0:	2180      	movs	r1, #128	; 0x80
 80037a2:	68f8      	ldr	r0, [r7, #12]
 80037a4:	f000 f9a9 	bl	8003afa <UART_WaitOnFlagUntilTimeout>
 80037a8:	4603      	mov	r3, r0
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d001      	beq.n	80037b2 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 80037ae:	2303      	movs	r3, #3
 80037b0:	e046      	b.n	8003840 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80037b2:	68bb      	ldr	r3, [r7, #8]
 80037b4:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	881b      	ldrh	r3, [r3, #0]
 80037ba:	461a      	mov	r2, r3
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80037c4:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	691b      	ldr	r3, [r3, #16]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d103      	bne.n	80037d6 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 80037ce:	68bb      	ldr	r3, [r7, #8]
 80037d0:	3302      	adds	r3, #2
 80037d2:	60bb      	str	r3, [r7, #8]
 80037d4:	e017      	b.n	8003806 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 80037d6:	68bb      	ldr	r3, [r7, #8]
 80037d8:	3301      	adds	r3, #1
 80037da:	60bb      	str	r3, [r7, #8]
 80037dc:	e013      	b.n	8003806 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	9300      	str	r3, [sp, #0]
 80037e2:	697b      	ldr	r3, [r7, #20]
 80037e4:	2200      	movs	r2, #0
 80037e6:	2180      	movs	r1, #128	; 0x80
 80037e8:	68f8      	ldr	r0, [r7, #12]
 80037ea:	f000 f986 	bl	8003afa <UART_WaitOnFlagUntilTimeout>
 80037ee:	4603      	mov	r3, r0
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d001      	beq.n	80037f8 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 80037f4:	2303      	movs	r3, #3
 80037f6:	e023      	b.n	8003840 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80037f8:	68bb      	ldr	r3, [r7, #8]
 80037fa:	1c5a      	adds	r2, r3, #1
 80037fc:	60ba      	str	r2, [r7, #8]
 80037fe:	781a      	ldrb	r2, [r3, #0]
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800380a:	b29b      	uxth	r3, r3
 800380c:	2b00      	cmp	r3, #0
 800380e:	d1b7      	bne.n	8003780 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	9300      	str	r3, [sp, #0]
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	2200      	movs	r2, #0
 8003818:	2140      	movs	r1, #64	; 0x40
 800381a:	68f8      	ldr	r0, [r7, #12]
 800381c:	f000 f96d 	bl	8003afa <UART_WaitOnFlagUntilTimeout>
 8003820:	4603      	mov	r3, r0
 8003822:	2b00      	cmp	r3, #0
 8003824:	d001      	beq.n	800382a <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003826:	2303      	movs	r3, #3
 8003828:	e00a      	b.n	8003840 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	2220      	movs	r2, #32
 800382e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	2200      	movs	r2, #0
 8003836:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 800383a:	2300      	movs	r3, #0
 800383c:	e000      	b.n	8003840 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800383e:	2302      	movs	r3, #2
  }
}
 8003840:	4618      	mov	r0, r3
 8003842:	3718      	adds	r7, #24
 8003844:	46bd      	mov	sp, r7
 8003846:	bd80      	pop	{r7, pc}

08003848 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003848:	b480      	push	{r7}
 800384a:	b085      	sub	sp, #20
 800384c:	af00      	add	r7, sp, #0
 800384e:	60f8      	str	r0, [r7, #12]
 8003850:	60b9      	str	r1, [r7, #8]
 8003852:	4613      	mov	r3, r2
 8003854:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800385c:	b2db      	uxtb	r3, r3
 800385e:	2b20      	cmp	r3, #32
 8003860:	d140      	bne.n	80038e4 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003862:	68bb      	ldr	r3, [r7, #8]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d002      	beq.n	800386e <HAL_UART_Receive_IT+0x26>
 8003868:	88fb      	ldrh	r3, [r7, #6]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d101      	bne.n	8003872 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	e039      	b.n	80038e6 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003878:	2b01      	cmp	r3, #1
 800387a:	d101      	bne.n	8003880 <HAL_UART_Receive_IT+0x38>
 800387c:	2302      	movs	r3, #2
 800387e:	e032      	b.n	80038e6 <HAL_UART_Receive_IT+0x9e>
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	2201      	movs	r2, #1
 8003884:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	68ba      	ldr	r2, [r7, #8]
 800388c:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	88fa      	ldrh	r2, [r7, #6]
 8003892:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	88fa      	ldrh	r2, [r7, #6]
 8003898:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	2200      	movs	r2, #0
 800389e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	2222      	movs	r2, #34	; 0x22
 80038a4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	2200      	movs	r2, #0
 80038ac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	68da      	ldr	r2, [r3, #12]
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80038be:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	695a      	ldr	r2, [r3, #20]
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f042 0201 	orr.w	r2, r2, #1
 80038ce:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	68da      	ldr	r2, [r3, #12]
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f042 0220 	orr.w	r2, r2, #32
 80038de:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80038e0:	2300      	movs	r3, #0
 80038e2:	e000      	b.n	80038e6 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80038e4:	2302      	movs	r3, #2
  }
}
 80038e6:	4618      	mov	r0, r3
 80038e8:	3714      	adds	r7, #20
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bc80      	pop	{r7}
 80038ee:	4770      	bx	lr

080038f0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b088      	sub	sp, #32
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	68db      	ldr	r3, [r3, #12]
 8003906:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	695b      	ldr	r3, [r3, #20]
 800390e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8003910:	2300      	movs	r3, #0
 8003912:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8003914:	2300      	movs	r3, #0
 8003916:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003918:	69fb      	ldr	r3, [r7, #28]
 800391a:	f003 030f 	and.w	r3, r3, #15
 800391e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8003920:	693b      	ldr	r3, [r7, #16]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d10d      	bne.n	8003942 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003926:	69fb      	ldr	r3, [r7, #28]
 8003928:	f003 0320 	and.w	r3, r3, #32
 800392c:	2b00      	cmp	r3, #0
 800392e:	d008      	beq.n	8003942 <HAL_UART_IRQHandler+0x52>
 8003930:	69bb      	ldr	r3, [r7, #24]
 8003932:	f003 0320 	and.w	r3, r3, #32
 8003936:	2b00      	cmp	r3, #0
 8003938:	d003      	beq.n	8003942 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800393a:	6878      	ldr	r0, [r7, #4]
 800393c:	f000 f9c5 	bl	8003cca <UART_Receive_IT>
      return;
 8003940:	e0cc      	b.n	8003adc <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003942:	693b      	ldr	r3, [r7, #16]
 8003944:	2b00      	cmp	r3, #0
 8003946:	f000 80ab 	beq.w	8003aa0 <HAL_UART_IRQHandler+0x1b0>
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	f003 0301 	and.w	r3, r3, #1
 8003950:	2b00      	cmp	r3, #0
 8003952:	d105      	bne.n	8003960 <HAL_UART_IRQHandler+0x70>
 8003954:	69bb      	ldr	r3, [r7, #24]
 8003956:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800395a:	2b00      	cmp	r3, #0
 800395c:	f000 80a0 	beq.w	8003aa0 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003960:	69fb      	ldr	r3, [r7, #28]
 8003962:	f003 0301 	and.w	r3, r3, #1
 8003966:	2b00      	cmp	r3, #0
 8003968:	d00a      	beq.n	8003980 <HAL_UART_IRQHandler+0x90>
 800396a:	69bb      	ldr	r3, [r7, #24]
 800396c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003970:	2b00      	cmp	r3, #0
 8003972:	d005      	beq.n	8003980 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003978:	f043 0201 	orr.w	r2, r3, #1
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003980:	69fb      	ldr	r3, [r7, #28]
 8003982:	f003 0304 	and.w	r3, r3, #4
 8003986:	2b00      	cmp	r3, #0
 8003988:	d00a      	beq.n	80039a0 <HAL_UART_IRQHandler+0xb0>
 800398a:	697b      	ldr	r3, [r7, #20]
 800398c:	f003 0301 	and.w	r3, r3, #1
 8003990:	2b00      	cmp	r3, #0
 8003992:	d005      	beq.n	80039a0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003998:	f043 0202 	orr.w	r2, r3, #2
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80039a0:	69fb      	ldr	r3, [r7, #28]
 80039a2:	f003 0302 	and.w	r3, r3, #2
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d00a      	beq.n	80039c0 <HAL_UART_IRQHandler+0xd0>
 80039aa:	697b      	ldr	r3, [r7, #20]
 80039ac:	f003 0301 	and.w	r3, r3, #1
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d005      	beq.n	80039c0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039b8:	f043 0204 	orr.w	r2, r3, #4
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80039c0:	69fb      	ldr	r3, [r7, #28]
 80039c2:	f003 0308 	and.w	r3, r3, #8
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d00a      	beq.n	80039e0 <HAL_UART_IRQHandler+0xf0>
 80039ca:	697b      	ldr	r3, [r7, #20]
 80039cc:	f003 0301 	and.w	r3, r3, #1
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d005      	beq.n	80039e0 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039d8:	f043 0208 	orr.w	r2, r3, #8
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d078      	beq.n	8003ada <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80039e8:	69fb      	ldr	r3, [r7, #28]
 80039ea:	f003 0320 	and.w	r3, r3, #32
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d007      	beq.n	8003a02 <HAL_UART_IRQHandler+0x112>
 80039f2:	69bb      	ldr	r3, [r7, #24]
 80039f4:	f003 0320 	and.w	r3, r3, #32
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d002      	beq.n	8003a02 <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 80039fc:	6878      	ldr	r0, [r7, #4]
 80039fe:	f000 f964 	bl	8003cca <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	695b      	ldr	r3, [r3, #20]
 8003a08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a0c:	2b40      	cmp	r3, #64	; 0x40
 8003a0e:	bf0c      	ite	eq
 8003a10:	2301      	moveq	r3, #1
 8003a12:	2300      	movne	r3, #0
 8003a14:	b2db      	uxtb	r3, r3
 8003a16:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a1c:	f003 0308 	and.w	r3, r3, #8
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d102      	bne.n	8003a2a <HAL_UART_IRQHandler+0x13a>
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d031      	beq.n	8003a8e <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003a2a:	6878      	ldr	r0, [r7, #4]
 8003a2c:	f000 f8af 	bl	8003b8e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	695b      	ldr	r3, [r3, #20]
 8003a36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a3a:	2b40      	cmp	r3, #64	; 0x40
 8003a3c:	d123      	bne.n	8003a86 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	695a      	ldr	r2, [r3, #20]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a4c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d013      	beq.n	8003a7e <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a5a:	4a22      	ldr	r2, [pc, #136]	; (8003ae4 <HAL_UART_IRQHandler+0x1f4>)
 8003a5c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a62:	4618      	mov	r0, r3
 8003a64:	f7fd fde9 	bl	800163a <HAL_DMA_Abort_IT>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d016      	beq.n	8003a9c <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a74:	687a      	ldr	r2, [r7, #4]
 8003a76:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003a78:	4610      	mov	r0, r2
 8003a7a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a7c:	e00e      	b.n	8003a9c <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003a7e:	6878      	ldr	r0, [r7, #4]
 8003a80:	f000 f832 	bl	8003ae8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a84:	e00a      	b.n	8003a9c <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003a86:	6878      	ldr	r0, [r7, #4]
 8003a88:	f000 f82e 	bl	8003ae8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a8c:	e006      	b.n	8003a9c <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003a8e:	6878      	ldr	r0, [r7, #4]
 8003a90:	f000 f82a 	bl	8003ae8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2200      	movs	r2, #0
 8003a98:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8003a9a:	e01e      	b.n	8003ada <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a9c:	bf00      	nop
    return;
 8003a9e:	e01c      	b.n	8003ada <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003aa0:	69fb      	ldr	r3, [r7, #28]
 8003aa2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d008      	beq.n	8003abc <HAL_UART_IRQHandler+0x1cc>
 8003aaa:	69bb      	ldr	r3, [r7, #24]
 8003aac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d003      	beq.n	8003abc <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8003ab4:	6878      	ldr	r0, [r7, #4]
 8003ab6:	f000 f89b 	bl	8003bf0 <UART_Transmit_IT>
    return;
 8003aba:	e00f      	b.n	8003adc <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003abc:	69fb      	ldr	r3, [r7, #28]
 8003abe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d00a      	beq.n	8003adc <HAL_UART_IRQHandler+0x1ec>
 8003ac6:	69bb      	ldr	r3, [r7, #24]
 8003ac8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d005      	beq.n	8003adc <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8003ad0:	6878      	ldr	r0, [r7, #4]
 8003ad2:	f000 f8e2 	bl	8003c9a <UART_EndTransmit_IT>
    return;
 8003ad6:	bf00      	nop
 8003ad8:	e000      	b.n	8003adc <HAL_UART_IRQHandler+0x1ec>
    return;
 8003ada:	bf00      	nop
  }
}
 8003adc:	3720      	adds	r7, #32
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bd80      	pop	{r7, pc}
 8003ae2:	bf00      	nop
 8003ae4:	08003bc9 	.word	0x08003bc9

08003ae8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	b083      	sub	sp, #12
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003af0:	bf00      	nop
 8003af2:	370c      	adds	r7, #12
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bc80      	pop	{r7}
 8003af8:	4770      	bx	lr

08003afa <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003afa:	b580      	push	{r7, lr}
 8003afc:	b084      	sub	sp, #16
 8003afe:	af00      	add	r7, sp, #0
 8003b00:	60f8      	str	r0, [r7, #12]
 8003b02:	60b9      	str	r1, [r7, #8]
 8003b04:	603b      	str	r3, [r7, #0]
 8003b06:	4613      	mov	r3, r2
 8003b08:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b0a:	e02c      	b.n	8003b66 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b0c:	69bb      	ldr	r3, [r7, #24]
 8003b0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b12:	d028      	beq.n	8003b66 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003b14:	69bb      	ldr	r3, [r7, #24]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d007      	beq.n	8003b2a <UART_WaitOnFlagUntilTimeout+0x30>
 8003b1a:	f7fd fc39 	bl	8001390 <HAL_GetTick>
 8003b1e:	4602      	mov	r2, r0
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	1ad3      	subs	r3, r2, r3
 8003b24:	69ba      	ldr	r2, [r7, #24]
 8003b26:	429a      	cmp	r2, r3
 8003b28:	d21d      	bcs.n	8003b66 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	68da      	ldr	r2, [r3, #12]
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003b38:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	695a      	ldr	r2, [r3, #20]
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f022 0201 	bic.w	r2, r2, #1
 8003b48:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	2220      	movs	r2, #32
 8003b4e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	2220      	movs	r2, #32
 8003b56:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003b62:	2303      	movs	r3, #3
 8003b64:	e00f      	b.n	8003b86 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	681a      	ldr	r2, [r3, #0]
 8003b6c:	68bb      	ldr	r3, [r7, #8]
 8003b6e:	4013      	ands	r3, r2
 8003b70:	68ba      	ldr	r2, [r7, #8]
 8003b72:	429a      	cmp	r2, r3
 8003b74:	bf0c      	ite	eq
 8003b76:	2301      	moveq	r3, #1
 8003b78:	2300      	movne	r3, #0
 8003b7a:	b2db      	uxtb	r3, r3
 8003b7c:	461a      	mov	r2, r3
 8003b7e:	79fb      	ldrb	r3, [r7, #7]
 8003b80:	429a      	cmp	r2, r3
 8003b82:	d0c3      	beq.n	8003b0c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003b84:	2300      	movs	r3, #0
}
 8003b86:	4618      	mov	r0, r3
 8003b88:	3710      	adds	r7, #16
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bd80      	pop	{r7, pc}

08003b8e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003b8e:	b480      	push	{r7}
 8003b90:	b083      	sub	sp, #12
 8003b92:	af00      	add	r7, sp, #0
 8003b94:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	68da      	ldr	r2, [r3, #12]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003ba4:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	695a      	ldr	r2, [r3, #20]
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f022 0201 	bic.w	r2, r2, #1
 8003bb4:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2220      	movs	r2, #32
 8003bba:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8003bbe:	bf00      	nop
 8003bc0:	370c      	adds	r7, #12
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bc80      	pop	{r7}
 8003bc6:	4770      	bx	lr

08003bc8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b084      	sub	sp, #16
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bd4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	2200      	movs	r2, #0
 8003be0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003be2:	68f8      	ldr	r0, [r7, #12]
 8003be4:	f7ff ff80 	bl	8003ae8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003be8:	bf00      	nop
 8003bea:	3710      	adds	r7, #16
 8003bec:	46bd      	mov	sp, r7
 8003bee:	bd80      	pop	{r7, pc}

08003bf0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b085      	sub	sp, #20
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003bfe:	b2db      	uxtb	r3, r3
 8003c00:	2b21      	cmp	r3, #33	; 0x21
 8003c02:	d144      	bne.n	8003c8e <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	689b      	ldr	r3, [r3, #8]
 8003c08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c0c:	d11a      	bne.n	8003c44 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6a1b      	ldr	r3, [r3, #32]
 8003c12:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	881b      	ldrh	r3, [r3, #0]
 8003c18:	461a      	mov	r2, r3
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c22:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	691b      	ldr	r3, [r3, #16]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d105      	bne.n	8003c38 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6a1b      	ldr	r3, [r3, #32]
 8003c30:	1c9a      	adds	r2, r3, #2
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	621a      	str	r2, [r3, #32]
 8003c36:	e00e      	b.n	8003c56 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6a1b      	ldr	r3, [r3, #32]
 8003c3c:	1c5a      	adds	r2, r3, #1
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	621a      	str	r2, [r3, #32]
 8003c42:	e008      	b.n	8003c56 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6a1b      	ldr	r3, [r3, #32]
 8003c48:	1c59      	adds	r1, r3, #1
 8003c4a:	687a      	ldr	r2, [r7, #4]
 8003c4c:	6211      	str	r1, [r2, #32]
 8003c4e:	781a      	ldrb	r2, [r3, #0]
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003c5a:	b29b      	uxth	r3, r3
 8003c5c:	3b01      	subs	r3, #1
 8003c5e:	b29b      	uxth	r3, r3
 8003c60:	687a      	ldr	r2, [r7, #4]
 8003c62:	4619      	mov	r1, r3
 8003c64:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d10f      	bne.n	8003c8a <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	68da      	ldr	r2, [r3, #12]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003c78:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	68da      	ldr	r2, [r3, #12]
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c88:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	e000      	b.n	8003c90 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8003c8e:	2302      	movs	r3, #2
  }
}
 8003c90:	4618      	mov	r0, r3
 8003c92:	3714      	adds	r7, #20
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bc80      	pop	{r7}
 8003c98:	4770      	bx	lr

08003c9a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003c9a:	b580      	push	{r7, lr}
 8003c9c:	b082      	sub	sp, #8
 8003c9e:	af00      	add	r7, sp, #0
 8003ca0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	68da      	ldr	r2, [r3, #12]
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003cb0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2220      	movs	r2, #32
 8003cb6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003cba:	6878      	ldr	r0, [r7, #4]
 8003cbc:	f7fd f8b1 	bl	8000e22 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003cc0:	2300      	movs	r3, #0
}
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	3708      	adds	r7, #8
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bd80      	pop	{r7, pc}

08003cca <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003cca:	b580      	push	{r7, lr}
 8003ccc:	b084      	sub	sp, #16
 8003cce:	af00      	add	r7, sp, #0
 8003cd0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003cd8:	b2db      	uxtb	r3, r3
 8003cda:	2b22      	cmp	r3, #34	; 0x22
 8003cdc:	d171      	bne.n	8003dc2 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	689b      	ldr	r3, [r3, #8]
 8003ce2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ce6:	d123      	bne.n	8003d30 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cec:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	691b      	ldr	r3, [r3, #16]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d10e      	bne.n	8003d14 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	b29b      	uxth	r3, r3
 8003cfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d02:	b29a      	uxth	r2, r3
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d0c:	1c9a      	adds	r2, r3, #2
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	629a      	str	r2, [r3, #40]	; 0x28
 8003d12:	e029      	b.n	8003d68 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	b29b      	uxth	r3, r3
 8003d1c:	b2db      	uxtb	r3, r3
 8003d1e:	b29a      	uxth	r2, r3
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d28:	1c5a      	adds	r2, r3, #1
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	629a      	str	r2, [r3, #40]	; 0x28
 8003d2e:	e01b      	b.n	8003d68 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	691b      	ldr	r3, [r3, #16]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d10a      	bne.n	8003d4e <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	6858      	ldr	r0, [r3, #4]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d42:	1c59      	adds	r1, r3, #1
 8003d44:	687a      	ldr	r2, [r7, #4]
 8003d46:	6291      	str	r1, [r2, #40]	; 0x28
 8003d48:	b2c2      	uxtb	r2, r0
 8003d4a:	701a      	strb	r2, [r3, #0]
 8003d4c:	e00c      	b.n	8003d68 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	b2da      	uxtb	r2, r3
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d5a:	1c58      	adds	r0, r3, #1
 8003d5c:	6879      	ldr	r1, [r7, #4]
 8003d5e:	6288      	str	r0, [r1, #40]	; 0x28
 8003d60:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003d64:	b2d2      	uxtb	r2, r2
 8003d66:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d6c:	b29b      	uxth	r3, r3
 8003d6e:	3b01      	subs	r3, #1
 8003d70:	b29b      	uxth	r3, r3
 8003d72:	687a      	ldr	r2, [r7, #4]
 8003d74:	4619      	mov	r1, r3
 8003d76:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d120      	bne.n	8003dbe <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	68da      	ldr	r2, [r3, #12]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f022 0220 	bic.w	r2, r2, #32
 8003d8a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	68da      	ldr	r2, [r3, #12]
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003d9a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	695a      	ldr	r2, [r3, #20]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f022 0201 	bic.w	r2, r2, #1
 8003daa:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2220      	movs	r2, #32
 8003db0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8003db4:	6878      	ldr	r0, [r7, #4]
 8003db6:	f7fd f82b 	bl	8000e10 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8003dba:	2300      	movs	r3, #0
 8003dbc:	e002      	b.n	8003dc4 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	e000      	b.n	8003dc4 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8003dc2:	2302      	movs	r3, #2
  }
}
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	3710      	adds	r7, #16
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	bd80      	pop	{r7, pc}

08003dcc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b084      	sub	sp, #16
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	691b      	ldr	r3, [r3, #16]
 8003dda:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	68da      	ldr	r2, [r3, #12]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	430a      	orrs	r2, r1
 8003de8:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	689a      	ldr	r2, [r3, #8]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	691b      	ldr	r3, [r3, #16]
 8003df2:	431a      	orrs	r2, r3
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	695b      	ldr	r3, [r3, #20]
 8003df8:	431a      	orrs	r2, r3
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	69db      	ldr	r3, [r3, #28]
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	68db      	ldr	r3, [r3, #12]
 8003e08:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003e0c:	f023 030c 	bic.w	r3, r3, #12
 8003e10:	687a      	ldr	r2, [r7, #4]
 8003e12:	6812      	ldr	r2, [r2, #0]
 8003e14:	68f9      	ldr	r1, [r7, #12]
 8003e16:	430b      	orrs	r3, r1
 8003e18:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	695b      	ldr	r3, [r3, #20]
 8003e20:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	699a      	ldr	r2, [r3, #24]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	430a      	orrs	r2, r1
 8003e2e:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	69db      	ldr	r3, [r3, #28]
 8003e34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e38:	f040 80a5 	bne.w	8003f86 <UART_SetConfig+0x1ba>
  {
    /*------- UART-associated USART registers setting : BRR Configuration ------*/
    if((huart->Instance == USART1))
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4aa4      	ldr	r2, [pc, #656]	; (80040d4 <UART_SetConfig+0x308>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d14f      	bne.n	8003ee6 <UART_SetConfig+0x11a>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003e46:	f7ff fba5 	bl	8003594 <HAL_RCC_GetPCLK2Freq>
 8003e4a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003e4c:	68ba      	ldr	r2, [r7, #8]
 8003e4e:	4613      	mov	r3, r2
 8003e50:	009b      	lsls	r3, r3, #2
 8003e52:	4413      	add	r3, r2
 8003e54:	009a      	lsls	r2, r3, #2
 8003e56:	441a      	add	r2, r3
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	005b      	lsls	r3, r3, #1
 8003e5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e62:	4a9d      	ldr	r2, [pc, #628]	; (80040d8 <UART_SetConfig+0x30c>)
 8003e64:	fba2 2303 	umull	r2, r3, r2, r3
 8003e68:	095b      	lsrs	r3, r3, #5
 8003e6a:	0119      	lsls	r1, r3, #4
 8003e6c:	68ba      	ldr	r2, [r7, #8]
 8003e6e:	4613      	mov	r3, r2
 8003e70:	009b      	lsls	r3, r3, #2
 8003e72:	4413      	add	r3, r2
 8003e74:	009a      	lsls	r2, r3, #2
 8003e76:	441a      	add	r2, r3
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	005b      	lsls	r3, r3, #1
 8003e7e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003e82:	4b95      	ldr	r3, [pc, #596]	; (80040d8 <UART_SetConfig+0x30c>)
 8003e84:	fba3 0302 	umull	r0, r3, r3, r2
 8003e88:	095b      	lsrs	r3, r3, #5
 8003e8a:	2064      	movs	r0, #100	; 0x64
 8003e8c:	fb00 f303 	mul.w	r3, r0, r3
 8003e90:	1ad3      	subs	r3, r2, r3
 8003e92:	00db      	lsls	r3, r3, #3
 8003e94:	3332      	adds	r3, #50	; 0x32
 8003e96:	4a90      	ldr	r2, [pc, #576]	; (80040d8 <UART_SetConfig+0x30c>)
 8003e98:	fba2 2303 	umull	r2, r3, r2, r3
 8003e9c:	095b      	lsrs	r3, r3, #5
 8003e9e:	005b      	lsls	r3, r3, #1
 8003ea0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003ea4:	4419      	add	r1, r3
 8003ea6:	68ba      	ldr	r2, [r7, #8]
 8003ea8:	4613      	mov	r3, r2
 8003eaa:	009b      	lsls	r3, r3, #2
 8003eac:	4413      	add	r3, r2
 8003eae:	009a      	lsls	r2, r3, #2
 8003eb0:	441a      	add	r2, r3
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	005b      	lsls	r3, r3, #1
 8003eb8:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ebc:	4b86      	ldr	r3, [pc, #536]	; (80040d8 <UART_SetConfig+0x30c>)
 8003ebe:	fba3 0302 	umull	r0, r3, r3, r2
 8003ec2:	095b      	lsrs	r3, r3, #5
 8003ec4:	2064      	movs	r0, #100	; 0x64
 8003ec6:	fb00 f303 	mul.w	r3, r0, r3
 8003eca:	1ad3      	subs	r3, r2, r3
 8003ecc:	00db      	lsls	r3, r3, #3
 8003ece:	3332      	adds	r3, #50	; 0x32
 8003ed0:	4a81      	ldr	r2, [pc, #516]	; (80040d8 <UART_SetConfig+0x30c>)
 8003ed2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ed6:	095b      	lsrs	r3, r3, #5
 8003ed8:	f003 0207 	and.w	r2, r3, #7
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	440a      	add	r2, r1
 8003ee2:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8003ee4:	e0f1      	b.n	80040ca <UART_SetConfig+0x2fe>
      pclk = HAL_RCC_GetPCLK1Freq();
 8003ee6:	f7ff fb41 	bl	800356c <HAL_RCC_GetPCLK1Freq>
 8003eea:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003eec:	68ba      	ldr	r2, [r7, #8]
 8003eee:	4613      	mov	r3, r2
 8003ef0:	009b      	lsls	r3, r3, #2
 8003ef2:	4413      	add	r3, r2
 8003ef4:	009a      	lsls	r2, r3, #2
 8003ef6:	441a      	add	r2, r3
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	005b      	lsls	r3, r3, #1
 8003efe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f02:	4a75      	ldr	r2, [pc, #468]	; (80040d8 <UART_SetConfig+0x30c>)
 8003f04:	fba2 2303 	umull	r2, r3, r2, r3
 8003f08:	095b      	lsrs	r3, r3, #5
 8003f0a:	0119      	lsls	r1, r3, #4
 8003f0c:	68ba      	ldr	r2, [r7, #8]
 8003f0e:	4613      	mov	r3, r2
 8003f10:	009b      	lsls	r3, r3, #2
 8003f12:	4413      	add	r3, r2
 8003f14:	009a      	lsls	r2, r3, #2
 8003f16:	441a      	add	r2, r3
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	005b      	lsls	r3, r3, #1
 8003f1e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003f22:	4b6d      	ldr	r3, [pc, #436]	; (80040d8 <UART_SetConfig+0x30c>)
 8003f24:	fba3 0302 	umull	r0, r3, r3, r2
 8003f28:	095b      	lsrs	r3, r3, #5
 8003f2a:	2064      	movs	r0, #100	; 0x64
 8003f2c:	fb00 f303 	mul.w	r3, r0, r3
 8003f30:	1ad3      	subs	r3, r2, r3
 8003f32:	00db      	lsls	r3, r3, #3
 8003f34:	3332      	adds	r3, #50	; 0x32
 8003f36:	4a68      	ldr	r2, [pc, #416]	; (80040d8 <UART_SetConfig+0x30c>)
 8003f38:	fba2 2303 	umull	r2, r3, r2, r3
 8003f3c:	095b      	lsrs	r3, r3, #5
 8003f3e:	005b      	lsls	r3, r3, #1
 8003f40:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003f44:	4419      	add	r1, r3
 8003f46:	68ba      	ldr	r2, [r7, #8]
 8003f48:	4613      	mov	r3, r2
 8003f4a:	009b      	lsls	r3, r3, #2
 8003f4c:	4413      	add	r3, r2
 8003f4e:	009a      	lsls	r2, r3, #2
 8003f50:	441a      	add	r2, r3
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	685b      	ldr	r3, [r3, #4]
 8003f56:	005b      	lsls	r3, r3, #1
 8003f58:	fbb2 f2f3 	udiv	r2, r2, r3
 8003f5c:	4b5e      	ldr	r3, [pc, #376]	; (80040d8 <UART_SetConfig+0x30c>)
 8003f5e:	fba3 0302 	umull	r0, r3, r3, r2
 8003f62:	095b      	lsrs	r3, r3, #5
 8003f64:	2064      	movs	r0, #100	; 0x64
 8003f66:	fb00 f303 	mul.w	r3, r0, r3
 8003f6a:	1ad3      	subs	r3, r2, r3
 8003f6c:	00db      	lsls	r3, r3, #3
 8003f6e:	3332      	adds	r3, #50	; 0x32
 8003f70:	4a59      	ldr	r2, [pc, #356]	; (80040d8 <UART_SetConfig+0x30c>)
 8003f72:	fba2 2303 	umull	r2, r3, r2, r3
 8003f76:	095b      	lsrs	r3, r3, #5
 8003f78:	f003 0207 	and.w	r2, r3, #7
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	440a      	add	r2, r1
 8003f82:	609a      	str	r2, [r3, #8]
}
 8003f84:	e0a1      	b.n	80040ca <UART_SetConfig+0x2fe>
    if((huart->Instance == USART1))
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a52      	ldr	r2, [pc, #328]	; (80040d4 <UART_SetConfig+0x308>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d14e      	bne.n	800402e <UART_SetConfig+0x262>
      pclk = HAL_RCC_GetPCLK2Freq();
 8003f90:	f7ff fb00 	bl	8003594 <HAL_RCC_GetPCLK2Freq>
 8003f94:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003f96:	68ba      	ldr	r2, [r7, #8]
 8003f98:	4613      	mov	r3, r2
 8003f9a:	009b      	lsls	r3, r3, #2
 8003f9c:	4413      	add	r3, r2
 8003f9e:	009a      	lsls	r2, r3, #2
 8003fa0:	441a      	add	r2, r3
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	009b      	lsls	r3, r3, #2
 8003fa8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fac:	4a4a      	ldr	r2, [pc, #296]	; (80040d8 <UART_SetConfig+0x30c>)
 8003fae:	fba2 2303 	umull	r2, r3, r2, r3
 8003fb2:	095b      	lsrs	r3, r3, #5
 8003fb4:	0119      	lsls	r1, r3, #4
 8003fb6:	68ba      	ldr	r2, [r7, #8]
 8003fb8:	4613      	mov	r3, r2
 8003fba:	009b      	lsls	r3, r3, #2
 8003fbc:	4413      	add	r3, r2
 8003fbe:	009a      	lsls	r2, r3, #2
 8003fc0:	441a      	add	r2, r3
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	009b      	lsls	r3, r3, #2
 8003fc8:	fbb2 f2f3 	udiv	r2, r2, r3
 8003fcc:	4b42      	ldr	r3, [pc, #264]	; (80040d8 <UART_SetConfig+0x30c>)
 8003fce:	fba3 0302 	umull	r0, r3, r3, r2
 8003fd2:	095b      	lsrs	r3, r3, #5
 8003fd4:	2064      	movs	r0, #100	; 0x64
 8003fd6:	fb00 f303 	mul.w	r3, r0, r3
 8003fda:	1ad3      	subs	r3, r2, r3
 8003fdc:	011b      	lsls	r3, r3, #4
 8003fde:	3332      	adds	r3, #50	; 0x32
 8003fe0:	4a3d      	ldr	r2, [pc, #244]	; (80040d8 <UART_SetConfig+0x30c>)
 8003fe2:	fba2 2303 	umull	r2, r3, r2, r3
 8003fe6:	095b      	lsrs	r3, r3, #5
 8003fe8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003fec:	4419      	add	r1, r3
 8003fee:	68ba      	ldr	r2, [r7, #8]
 8003ff0:	4613      	mov	r3, r2
 8003ff2:	009b      	lsls	r3, r3, #2
 8003ff4:	4413      	add	r3, r2
 8003ff6:	009a      	lsls	r2, r3, #2
 8003ff8:	441a      	add	r2, r3
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	009b      	lsls	r3, r3, #2
 8004000:	fbb2 f2f3 	udiv	r2, r2, r3
 8004004:	4b34      	ldr	r3, [pc, #208]	; (80040d8 <UART_SetConfig+0x30c>)
 8004006:	fba3 0302 	umull	r0, r3, r3, r2
 800400a:	095b      	lsrs	r3, r3, #5
 800400c:	2064      	movs	r0, #100	; 0x64
 800400e:	fb00 f303 	mul.w	r3, r0, r3
 8004012:	1ad3      	subs	r3, r2, r3
 8004014:	011b      	lsls	r3, r3, #4
 8004016:	3332      	adds	r3, #50	; 0x32
 8004018:	4a2f      	ldr	r2, [pc, #188]	; (80040d8 <UART_SetConfig+0x30c>)
 800401a:	fba2 2303 	umull	r2, r3, r2, r3
 800401e:	095b      	lsrs	r3, r3, #5
 8004020:	f003 020f 	and.w	r2, r3, #15
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	440a      	add	r2, r1
 800402a:	609a      	str	r2, [r3, #8]
}
 800402c:	e04d      	b.n	80040ca <UART_SetConfig+0x2fe>
      pclk = HAL_RCC_GetPCLK1Freq();
 800402e:	f7ff fa9d 	bl	800356c <HAL_RCC_GetPCLK1Freq>
 8004032:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004034:	68ba      	ldr	r2, [r7, #8]
 8004036:	4613      	mov	r3, r2
 8004038:	009b      	lsls	r3, r3, #2
 800403a:	4413      	add	r3, r2
 800403c:	009a      	lsls	r2, r3, #2
 800403e:	441a      	add	r2, r3
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	009b      	lsls	r3, r3, #2
 8004046:	fbb2 f3f3 	udiv	r3, r2, r3
 800404a:	4a23      	ldr	r2, [pc, #140]	; (80040d8 <UART_SetConfig+0x30c>)
 800404c:	fba2 2303 	umull	r2, r3, r2, r3
 8004050:	095b      	lsrs	r3, r3, #5
 8004052:	0119      	lsls	r1, r3, #4
 8004054:	68ba      	ldr	r2, [r7, #8]
 8004056:	4613      	mov	r3, r2
 8004058:	009b      	lsls	r3, r3, #2
 800405a:	4413      	add	r3, r2
 800405c:	009a      	lsls	r2, r3, #2
 800405e:	441a      	add	r2, r3
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	009b      	lsls	r3, r3, #2
 8004066:	fbb2 f2f3 	udiv	r2, r2, r3
 800406a:	4b1b      	ldr	r3, [pc, #108]	; (80040d8 <UART_SetConfig+0x30c>)
 800406c:	fba3 0302 	umull	r0, r3, r3, r2
 8004070:	095b      	lsrs	r3, r3, #5
 8004072:	2064      	movs	r0, #100	; 0x64
 8004074:	fb00 f303 	mul.w	r3, r0, r3
 8004078:	1ad3      	subs	r3, r2, r3
 800407a:	011b      	lsls	r3, r3, #4
 800407c:	3332      	adds	r3, #50	; 0x32
 800407e:	4a16      	ldr	r2, [pc, #88]	; (80040d8 <UART_SetConfig+0x30c>)
 8004080:	fba2 2303 	umull	r2, r3, r2, r3
 8004084:	095b      	lsrs	r3, r3, #5
 8004086:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800408a:	4419      	add	r1, r3
 800408c:	68ba      	ldr	r2, [r7, #8]
 800408e:	4613      	mov	r3, r2
 8004090:	009b      	lsls	r3, r3, #2
 8004092:	4413      	add	r3, r2
 8004094:	009a      	lsls	r2, r3, #2
 8004096:	441a      	add	r2, r3
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	009b      	lsls	r3, r3, #2
 800409e:	fbb2 f2f3 	udiv	r2, r2, r3
 80040a2:	4b0d      	ldr	r3, [pc, #52]	; (80040d8 <UART_SetConfig+0x30c>)
 80040a4:	fba3 0302 	umull	r0, r3, r3, r2
 80040a8:	095b      	lsrs	r3, r3, #5
 80040aa:	2064      	movs	r0, #100	; 0x64
 80040ac:	fb00 f303 	mul.w	r3, r0, r3
 80040b0:	1ad3      	subs	r3, r2, r3
 80040b2:	011b      	lsls	r3, r3, #4
 80040b4:	3332      	adds	r3, #50	; 0x32
 80040b6:	4a08      	ldr	r2, [pc, #32]	; (80040d8 <UART_SetConfig+0x30c>)
 80040b8:	fba2 2303 	umull	r2, r3, r2, r3
 80040bc:	095b      	lsrs	r3, r3, #5
 80040be:	f003 020f 	and.w	r2, r3, #15
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	440a      	add	r2, r1
 80040c8:	609a      	str	r2, [r3, #8]
}
 80040ca:	bf00      	nop
 80040cc:	3710      	adds	r7, #16
 80040ce:	46bd      	mov	sp, r7
 80040d0:	bd80      	pop	{r7, pc}
 80040d2:	bf00      	nop
 80040d4:	40013800 	.word	0x40013800
 80040d8:	51eb851f 	.word	0x51eb851f

080040dc <__errno>:
 80040dc:	4b01      	ldr	r3, [pc, #4]	; (80040e4 <__errno+0x8>)
 80040de:	6818      	ldr	r0, [r3, #0]
 80040e0:	4770      	bx	lr
 80040e2:	bf00      	nop
 80040e4:	20000014 	.word	0x20000014

080040e8 <__libc_init_array>:
 80040e8:	b570      	push	{r4, r5, r6, lr}
 80040ea:	2500      	movs	r5, #0
 80040ec:	4e0c      	ldr	r6, [pc, #48]	; (8004120 <__libc_init_array+0x38>)
 80040ee:	4c0d      	ldr	r4, [pc, #52]	; (8004124 <__libc_init_array+0x3c>)
 80040f0:	1ba4      	subs	r4, r4, r6
 80040f2:	10a4      	asrs	r4, r4, #2
 80040f4:	42a5      	cmp	r5, r4
 80040f6:	d109      	bne.n	800410c <__libc_init_array+0x24>
 80040f8:	f000 f8ea 	bl	80042d0 <_init>
 80040fc:	2500      	movs	r5, #0
 80040fe:	4e0a      	ldr	r6, [pc, #40]	; (8004128 <__libc_init_array+0x40>)
 8004100:	4c0a      	ldr	r4, [pc, #40]	; (800412c <__libc_init_array+0x44>)
 8004102:	1ba4      	subs	r4, r4, r6
 8004104:	10a4      	asrs	r4, r4, #2
 8004106:	42a5      	cmp	r5, r4
 8004108:	d105      	bne.n	8004116 <__libc_init_array+0x2e>
 800410a:	bd70      	pop	{r4, r5, r6, pc}
 800410c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004110:	4798      	blx	r3
 8004112:	3501      	adds	r5, #1
 8004114:	e7ee      	b.n	80040f4 <__libc_init_array+0xc>
 8004116:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800411a:	4798      	blx	r3
 800411c:	3501      	adds	r5, #1
 800411e:	e7f2      	b.n	8004106 <__libc_init_array+0x1e>
 8004120:	08004310 	.word	0x08004310
 8004124:	08004310 	.word	0x08004310
 8004128:	08004310 	.word	0x08004310
 800412c:	08004314 	.word	0x08004314

08004130 <malloc>:
 8004130:	4b02      	ldr	r3, [pc, #8]	; (800413c <malloc+0xc>)
 8004132:	4601      	mov	r1, r0
 8004134:	6818      	ldr	r0, [r3, #0]
 8004136:	f000 b85f 	b.w	80041f8 <_malloc_r>
 800413a:	bf00      	nop
 800413c:	20000014 	.word	0x20000014

08004140 <free>:
 8004140:	4b02      	ldr	r3, [pc, #8]	; (800414c <free+0xc>)
 8004142:	4601      	mov	r1, r0
 8004144:	6818      	ldr	r0, [r3, #0]
 8004146:	f000 b80b 	b.w	8004160 <_free_r>
 800414a:	bf00      	nop
 800414c:	20000014 	.word	0x20000014

08004150 <memset>:
 8004150:	4603      	mov	r3, r0
 8004152:	4402      	add	r2, r0
 8004154:	4293      	cmp	r3, r2
 8004156:	d100      	bne.n	800415a <memset+0xa>
 8004158:	4770      	bx	lr
 800415a:	f803 1b01 	strb.w	r1, [r3], #1
 800415e:	e7f9      	b.n	8004154 <memset+0x4>

08004160 <_free_r>:
 8004160:	b538      	push	{r3, r4, r5, lr}
 8004162:	4605      	mov	r5, r0
 8004164:	2900      	cmp	r1, #0
 8004166:	d043      	beq.n	80041f0 <_free_r+0x90>
 8004168:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800416c:	1f0c      	subs	r4, r1, #4
 800416e:	2b00      	cmp	r3, #0
 8004170:	bfb8      	it	lt
 8004172:	18e4      	addlt	r4, r4, r3
 8004174:	f000 f8aa 	bl	80042cc <__malloc_lock>
 8004178:	4a1e      	ldr	r2, [pc, #120]	; (80041f4 <_free_r+0x94>)
 800417a:	6813      	ldr	r3, [r2, #0]
 800417c:	4610      	mov	r0, r2
 800417e:	b933      	cbnz	r3, 800418e <_free_r+0x2e>
 8004180:	6063      	str	r3, [r4, #4]
 8004182:	6014      	str	r4, [r2, #0]
 8004184:	4628      	mov	r0, r5
 8004186:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800418a:	f000 b8a0 	b.w	80042ce <__malloc_unlock>
 800418e:	42a3      	cmp	r3, r4
 8004190:	d90b      	bls.n	80041aa <_free_r+0x4a>
 8004192:	6821      	ldr	r1, [r4, #0]
 8004194:	1862      	adds	r2, r4, r1
 8004196:	4293      	cmp	r3, r2
 8004198:	bf01      	itttt	eq
 800419a:	681a      	ldreq	r2, [r3, #0]
 800419c:	685b      	ldreq	r3, [r3, #4]
 800419e:	1852      	addeq	r2, r2, r1
 80041a0:	6022      	streq	r2, [r4, #0]
 80041a2:	6063      	str	r3, [r4, #4]
 80041a4:	6004      	str	r4, [r0, #0]
 80041a6:	e7ed      	b.n	8004184 <_free_r+0x24>
 80041a8:	4613      	mov	r3, r2
 80041aa:	685a      	ldr	r2, [r3, #4]
 80041ac:	b10a      	cbz	r2, 80041b2 <_free_r+0x52>
 80041ae:	42a2      	cmp	r2, r4
 80041b0:	d9fa      	bls.n	80041a8 <_free_r+0x48>
 80041b2:	6819      	ldr	r1, [r3, #0]
 80041b4:	1858      	adds	r0, r3, r1
 80041b6:	42a0      	cmp	r0, r4
 80041b8:	d10b      	bne.n	80041d2 <_free_r+0x72>
 80041ba:	6820      	ldr	r0, [r4, #0]
 80041bc:	4401      	add	r1, r0
 80041be:	1858      	adds	r0, r3, r1
 80041c0:	4282      	cmp	r2, r0
 80041c2:	6019      	str	r1, [r3, #0]
 80041c4:	d1de      	bne.n	8004184 <_free_r+0x24>
 80041c6:	6810      	ldr	r0, [r2, #0]
 80041c8:	6852      	ldr	r2, [r2, #4]
 80041ca:	4401      	add	r1, r0
 80041cc:	6019      	str	r1, [r3, #0]
 80041ce:	605a      	str	r2, [r3, #4]
 80041d0:	e7d8      	b.n	8004184 <_free_r+0x24>
 80041d2:	d902      	bls.n	80041da <_free_r+0x7a>
 80041d4:	230c      	movs	r3, #12
 80041d6:	602b      	str	r3, [r5, #0]
 80041d8:	e7d4      	b.n	8004184 <_free_r+0x24>
 80041da:	6820      	ldr	r0, [r4, #0]
 80041dc:	1821      	adds	r1, r4, r0
 80041de:	428a      	cmp	r2, r1
 80041e0:	bf01      	itttt	eq
 80041e2:	6811      	ldreq	r1, [r2, #0]
 80041e4:	6852      	ldreq	r2, [r2, #4]
 80041e6:	1809      	addeq	r1, r1, r0
 80041e8:	6021      	streq	r1, [r4, #0]
 80041ea:	6062      	str	r2, [r4, #4]
 80041ec:	605c      	str	r4, [r3, #4]
 80041ee:	e7c9      	b.n	8004184 <_free_r+0x24>
 80041f0:	bd38      	pop	{r3, r4, r5, pc}
 80041f2:	bf00      	nop
 80041f4:	200000a4 	.word	0x200000a4

080041f8 <_malloc_r>:
 80041f8:	b570      	push	{r4, r5, r6, lr}
 80041fa:	1ccd      	adds	r5, r1, #3
 80041fc:	f025 0503 	bic.w	r5, r5, #3
 8004200:	3508      	adds	r5, #8
 8004202:	2d0c      	cmp	r5, #12
 8004204:	bf38      	it	cc
 8004206:	250c      	movcc	r5, #12
 8004208:	2d00      	cmp	r5, #0
 800420a:	4606      	mov	r6, r0
 800420c:	db01      	blt.n	8004212 <_malloc_r+0x1a>
 800420e:	42a9      	cmp	r1, r5
 8004210:	d903      	bls.n	800421a <_malloc_r+0x22>
 8004212:	230c      	movs	r3, #12
 8004214:	6033      	str	r3, [r6, #0]
 8004216:	2000      	movs	r0, #0
 8004218:	bd70      	pop	{r4, r5, r6, pc}
 800421a:	f000 f857 	bl	80042cc <__malloc_lock>
 800421e:	4a21      	ldr	r2, [pc, #132]	; (80042a4 <_malloc_r+0xac>)
 8004220:	6814      	ldr	r4, [r2, #0]
 8004222:	4621      	mov	r1, r4
 8004224:	b991      	cbnz	r1, 800424c <_malloc_r+0x54>
 8004226:	4c20      	ldr	r4, [pc, #128]	; (80042a8 <_malloc_r+0xb0>)
 8004228:	6823      	ldr	r3, [r4, #0]
 800422a:	b91b      	cbnz	r3, 8004234 <_malloc_r+0x3c>
 800422c:	4630      	mov	r0, r6
 800422e:	f000 f83d 	bl	80042ac <_sbrk_r>
 8004232:	6020      	str	r0, [r4, #0]
 8004234:	4629      	mov	r1, r5
 8004236:	4630      	mov	r0, r6
 8004238:	f000 f838 	bl	80042ac <_sbrk_r>
 800423c:	1c43      	adds	r3, r0, #1
 800423e:	d124      	bne.n	800428a <_malloc_r+0x92>
 8004240:	230c      	movs	r3, #12
 8004242:	4630      	mov	r0, r6
 8004244:	6033      	str	r3, [r6, #0]
 8004246:	f000 f842 	bl	80042ce <__malloc_unlock>
 800424a:	e7e4      	b.n	8004216 <_malloc_r+0x1e>
 800424c:	680b      	ldr	r3, [r1, #0]
 800424e:	1b5b      	subs	r3, r3, r5
 8004250:	d418      	bmi.n	8004284 <_malloc_r+0x8c>
 8004252:	2b0b      	cmp	r3, #11
 8004254:	d90f      	bls.n	8004276 <_malloc_r+0x7e>
 8004256:	600b      	str	r3, [r1, #0]
 8004258:	18cc      	adds	r4, r1, r3
 800425a:	50cd      	str	r5, [r1, r3]
 800425c:	4630      	mov	r0, r6
 800425e:	f000 f836 	bl	80042ce <__malloc_unlock>
 8004262:	f104 000b 	add.w	r0, r4, #11
 8004266:	1d23      	adds	r3, r4, #4
 8004268:	f020 0007 	bic.w	r0, r0, #7
 800426c:	1ac3      	subs	r3, r0, r3
 800426e:	d0d3      	beq.n	8004218 <_malloc_r+0x20>
 8004270:	425a      	negs	r2, r3
 8004272:	50e2      	str	r2, [r4, r3]
 8004274:	e7d0      	b.n	8004218 <_malloc_r+0x20>
 8004276:	684b      	ldr	r3, [r1, #4]
 8004278:	428c      	cmp	r4, r1
 800427a:	bf16      	itet	ne
 800427c:	6063      	strne	r3, [r4, #4]
 800427e:	6013      	streq	r3, [r2, #0]
 8004280:	460c      	movne	r4, r1
 8004282:	e7eb      	b.n	800425c <_malloc_r+0x64>
 8004284:	460c      	mov	r4, r1
 8004286:	6849      	ldr	r1, [r1, #4]
 8004288:	e7cc      	b.n	8004224 <_malloc_r+0x2c>
 800428a:	1cc4      	adds	r4, r0, #3
 800428c:	f024 0403 	bic.w	r4, r4, #3
 8004290:	42a0      	cmp	r0, r4
 8004292:	d005      	beq.n	80042a0 <_malloc_r+0xa8>
 8004294:	1a21      	subs	r1, r4, r0
 8004296:	4630      	mov	r0, r6
 8004298:	f000 f808 	bl	80042ac <_sbrk_r>
 800429c:	3001      	adds	r0, #1
 800429e:	d0cf      	beq.n	8004240 <_malloc_r+0x48>
 80042a0:	6025      	str	r5, [r4, #0]
 80042a2:	e7db      	b.n	800425c <_malloc_r+0x64>
 80042a4:	200000a4 	.word	0x200000a4
 80042a8:	200000a8 	.word	0x200000a8

080042ac <_sbrk_r>:
 80042ac:	b538      	push	{r3, r4, r5, lr}
 80042ae:	2300      	movs	r3, #0
 80042b0:	4c05      	ldr	r4, [pc, #20]	; (80042c8 <_sbrk_r+0x1c>)
 80042b2:	4605      	mov	r5, r0
 80042b4:	4608      	mov	r0, r1
 80042b6:	6023      	str	r3, [r4, #0]
 80042b8:	f7fc ff80 	bl	80011bc <_sbrk>
 80042bc:	1c43      	adds	r3, r0, #1
 80042be:	d102      	bne.n	80042c6 <_sbrk_r+0x1a>
 80042c0:	6823      	ldr	r3, [r4, #0]
 80042c2:	b103      	cbz	r3, 80042c6 <_sbrk_r+0x1a>
 80042c4:	602b      	str	r3, [r5, #0]
 80042c6:	bd38      	pop	{r3, r4, r5, pc}
 80042c8:	20000144 	.word	0x20000144

080042cc <__malloc_lock>:
 80042cc:	4770      	bx	lr

080042ce <__malloc_unlock>:
 80042ce:	4770      	bx	lr

080042d0 <_init>:
 80042d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042d2:	bf00      	nop
 80042d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042d6:	bc08      	pop	{r3}
 80042d8:	469e      	mov	lr, r3
 80042da:	4770      	bx	lr

080042dc <_fini>:
 80042dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042de:	bf00      	nop
 80042e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042e2:	bc08      	pop	{r3}
 80042e4:	469e      	mov	lr, r3
 80042e6:	4770      	bx	lr
